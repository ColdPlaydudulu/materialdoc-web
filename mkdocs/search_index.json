{
    "docs": [
        {
            "location": "/", 
            "text": "What is this site about?\n\n\nWe feel there's a huge disconnect between \ngoogle material design guidelines\n and developers docs. After collecting feedback on \nGoogle+\n and \nReddit\n we decided to make a site with a single list of available material components and samples of their usage.\n\n\nWhat are you planning to cover?\n\n\nWe want to describe how to use and style material components with google appcompat and design libraries.\n\n\nLater we will prepare tutorials of how to make widgets which are not available in google material spec/links to open source libraries.\n\n\nWhat is different between app compat and design library?\n\n\n\n\n\n\nv7 appcompat library\n - provide support of material design user interface implementations  for older Android platforms.\n\n\n\n\n\n\ndesign library\n - provides various material design components which are not part of Android SDK.\n\n\n\n\n\n\n\u4f5c\u8005\u662f\u8c01?\n\n\n\n\nDmytro Danylyk\n\n\nYakiv Mospan\n\n\nSa\u00fal Molinero\n\n\nRoman Danylyk\n\n\nVolodymyr Yatsykiv\n\n\nMiguel Catalan Ba\u00f1uls\n\n\nLuis G. Valle\n\n\nSa\u00fal D\u00edaz Gonz\u00e1lez\n\n\nAntonio Leiva\n\n\nAlexandru Simonescu\n\n\nParesh Mayani\n\n\nGonzalo Toledano\n\n\n\n\n\u8bd1\u8005\u662f\u8c01?\n\n\n\n\n\u8109\u8109\u4e0d\u5f97\u8bed\n\n\nAilurus\n\n\nGoodev\n\n\n\n\n\u9700\u8981\u4f60\u7684\u5e2e\u52a9?\n\n\n\n\nShare this website to social media\n\n\nStar our repository \ngithub.com/materialdoccn\n\n\nWrite or edit article and send pull request to \nmaster\n branch. \n(Make sure you have read \nhow to contribute\n section)", 
            "title": "\u5173\u4e8e"
        }, 
        {
            "location": "/#what-is-this-site-about", 
            "text": "We feel there's a huge disconnect between  google material design guidelines  and developers docs. After collecting feedback on  Google+  and  Reddit  we decided to make a site with a single list of available material components and samples of their usage.", 
            "title": "What is this site about?"
        }, 
        {
            "location": "/#what-are-you-planning-to-cover", 
            "text": "We want to describe how to use and style material components with google appcompat and design libraries.  Later we will prepare tutorials of how to make widgets which are not available in google material spec/links to open source libraries.", 
            "title": "What are you planning to cover?"
        }, 
        {
            "location": "/#what-is-different-between-app-compat-and-design-library", 
            "text": "v7 appcompat library  - provide support of material design user interface implementations  for older Android platforms.    design library  - provides various material design components which are not part of Android SDK.", 
            "title": "What is different between app compat and design library?"
        }, 
        {
            "location": "/#_1", 
            "text": "Dmytro Danylyk  Yakiv Mospan  Sa\u00fal Molinero  Roman Danylyk  Volodymyr Yatsykiv  Miguel Catalan Ba\u00f1uls  Luis G. Valle  Sa\u00fal D\u00edaz Gonz\u00e1lez  Antonio Leiva  Alexandru Simonescu  Paresh Mayani  Gonzalo Toledano", 
            "title": "\u4f5c\u8005\u662f\u8c01?"
        }, 
        {
            "location": "/#_2", 
            "text": "\u8109\u8109\u4e0d\u5f97\u8bed  Ailurus  Goodev", 
            "title": "\u8bd1\u8005\u662f\u8c01?"
        }, 
        {
            "location": "/#_3", 
            "text": "Share this website to social media  Star our repository  github.com/materialdoccn  Write or edit article and send pull request to  master  branch.  (Make sure you have read  how to contribute  section)", 
            "title": "\u9700\u8981\u4f60\u7684\u5e2e\u52a9?"
        }, 
        {
            "location": "/application/", 
            "text": "Android Application\n\n\nI am happy to announce that we just released open source \nAndroid application\n which includes all source code (layouts, styles, colors) of \nmaterialdoc.com\n tutorials.\n\n\nYou can \ndownload apk\n and check how material components will look on different Android versions.", 
            "title": "\u5e94\u7528\u7a0b\u5e8f"
        }, 
        {
            "location": "/application/#android-application", 
            "text": "I am happy to announce that we just released open source  Android application  which includes all source code (layouts, styles, colors) of  materialdoc.com  tutorials.  You can  download apk  and check how material components will look on different Android versions.", 
            "title": "Android Application"
        }, 
        {
            "location": "/how-to-contribute/", 
            "text": "How to contribute\n\n\n\n\nIf you want to edit an article, at the top right corner of every page there is \nPencil\n icon.\n\n\n\n\nIf you want to write a new article.\n\n\n\n\nCreate \narticle-name.md\n file based on \narticle-template\n.\n\n\nPut this file inside \n/docs/components\n or \n/docs/patterns\n folder.\n\n\nPut images inside \n/docs/images/\n folder.\n\n\nAdd article reference to \nmkdocs.ymld\n file.\n\n\nWhen ready send pull request to \nmaster\n branch.\n\n\n\n\n\n\n\n\nPreview\n\n\nIf you want to preview your article in browser, you have to install \nmkdocs.js.org\n and run local server.\n\n\ncd materialdoc\nmkdocs serve", 
            "title": "\u5982\u4f55\u53c2\u4e0e\u8d21\u732e"
        }, 
        {
            "location": "/how-to-contribute/#how-to-contribute", 
            "text": "If you want to edit an article, at the top right corner of every page there is  Pencil  icon.   If you want to write a new article.   Create  article-name.md  file based on  article-template .  Put this file inside  /docs/components  or  /docs/patterns  folder.  Put images inside  /docs/images/  folder.  Add article reference to  mkdocs.ymld  file.  When ready send pull request to  master  branch.", 
            "title": "How to contribute"
        }, 
        {
            "location": "/how-to-contribute/#preview", 
            "text": "If you want to preview your article in browser, you have to install  mkdocs.js.org  and run local server.  cd materialdoc\nmkdocs serve", 
            "title": "Preview"
        }, 
        {
            "location": "/components/autocomplete/", 
            "text": "From Google Material Design documentation.\n\n\nUse auto-complete text fields to present real-time suggestions or completions in dropdowns, so users can enter information more accurately and efficiently.\n\n\n\n\nHow to add?\n\n\nI. Declare your \nAutoCompleteTextView\n inside any \nlayout.xml\n.\n\n\nAutoCompleteTextView\n\n    \nandroid:id=\n@+id/autocompleteView\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:hint=\nSearch dogs...\n/\n\n\n\n\n\n\nII. Define a \nstring-array\n that contains all text suggestions in a file inside \nres/values\n directory.\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nresources\n\n    \nstring-array\n \nname=\ndogs_list\n\n        \nitem\nBichon Frise\n/item\n\n        \nitem\nBorder Collie\n/item\n\n        \nitem\nBorder Terrier\n/item\n\n        \nitem\nBoxer\n/item\n\n        \nitem\nChihuahua\n/item\n\n        \nitem\nGerman Shepherd\n/item\n\n        \nitem\nGolden Retriever\n/item\n\n        \nitem\nGreyhound\n/item\n\n    \n/string-array\n\n\n/resources\n\n\n\n\n\n\nIII. Define a \nfilterable list adapter\n to manage the auto completion data list.\n\n\nint\n \nlayoutItemId\n \n=\n \nandroid\n.\nR\n.\nlayout\n.\nsimple_dropdown_item_1line\n;\n\n\nString\n[]\n \ndogArr\n \n=\n \ngetResources\n().\ngetStringArray\n(\nR\n.\narray\n.\ndogs_list\n);\n\n\nList\nString\n \ndogList\n \n=\n \nArrays\n.\nasList\n(\ndogsArr\n);\n\n\nArrayAdapter\nString\n \nadapter\n \n=\n \nnew\n \nArrayAdapter\n(\nthis\n,\n \nlayoutItemId\n,\n \ndogList\n);\n\n\n\nAutoCompleteTextView\n \nautocompleteView\n \n=\n\n    \n(\nAutoCompleteTextView\n)\n \nfindViewById\n(\nR\n.\nid\n.\nautocompleteView\n);\n\n\nautocompleteView\n.\nsetAdapter\n(\nadapter\n);\n\n\n\n\n\n\nHow to style?\n\n\n\n\nI. Declare custom styles in your \nstyles.xml\n file.\n\n\n \nstyle\n \nname=\nAutocomplete\n \nparent=\nWidget.AppCompat.Light.AutoCompleteTextView\n\n    \nitem\n \nname=\nandroid:background\n@color/green500\n/item\n\n    \nitem\n \nname=\ncolorControlNormal\n@color/amber500\n/item\n\n    \nitem\n \nname=\ncolorControlActivated\n@color/cyan500\n/item\n\n\n/style\n\n\n\n\n\n\nII. Apply this style to the \nAutoCompleteTextView\n via \nandroid:theme\n attribute.\n\n\nAutoCompleteTextView\n\n    \nandroid:id=\n@+id/autocomplete_dogs\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:theme=\n@style/Autocomplete\n\n    \nandroid:hint=\nSearch dogs...\n \n/\n\n\n\n\n\n\nDrop down anchor\n\n\n\n\nBy default, the dropdown list with your filtered data appear just below the \nAutoCompleteTextView\n.\n\n\nTo change this position use \ndropDownAnchor\n attribute and reference another view id.\n\n\nAutoCompleteTextView\n\n    \nandroid:id=\n@+id/autocomplete_dogs\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:theme=\n@style/Autocomplete\n\n    \nandroid:hint=\nSearch dogs...\n\n    \nandroid:dropDownAnchor=\n@+id/header\n\n    \nandroid:dropDownWidth=\nmatch_parent\n\n    \n/\n\n\n\n\n\n\nCustom Adapter\n\n\n\n\nTo fully customize the dropdown list you need to provide your own \nAdapter\n. It needs to implement \nFilterable\n and \nListAdapter\n interfaces.\n\n\nThe easiest way to achieve this is by extending \nArrayAdapter\n which already implements both interfaces.\n\n\nI. Create a custom adapter extending \nArrayAdapter\n class.\n\n\nclass\n \nAutoCompleteDogsAdapter\n \nextends\n \nArrayAdapter\nDog\n \n{\n\n  \n...\n\n\n}\n\n\n\n\n\n\nII. Create a custom filter extending \nFilter\n class and provide your own filtering logic overriding \nperformFiltering\n method.\n\n\nclass\n \nDogsFilter\n \nextends\n \nFilter\n \n{\n\n\n    \nAutoCompleteDogsAdapter\n \nadapter\n;\n\n    \nList\nDog\n \noriginalList\n;\n\n    \nList\nDog\n \nfilteredList\n;\n\n\n    \npublic\n \nDogsFilter\n(\nAutoCompleteDogsAdapter\n \nadapter\n,\n \nList\nDog\n \noriginalList\n)\n \n{\n\n        \nsuper\n();\n\n        \nthis\n.\nadapter\n \n=\n \nadapter\n;\n\n        \nthis\n.\noriginalList\n \n=\n \noriginalList\n;\n\n        \nthis\n.\nfilteredList\n \n=\n \nnew\n \nArrayList\n();\n\n    \n}\n\n\n    \n@Override\n\n    \nprotected\n \nFilterResults\n \nperformFiltering\n(\nCharSequence\n \nconstraint\n)\n \n{\n\n        \nfilteredList\n.\nclear\n();\n\n        \nfinal\n \nFilterResults\n \nresults\n \n=\n \nnew\n \nFilterResults\n();\n\n\n        \nif\n \n(\nconstraint\n \n==\n \nnull\n \n||\n \nconstraint\n.\nlength\n()\n \n==\n \n0\n)\n \n{\n\n            \nfilteredList\n.\naddAll\n(\noriginalList\n);\n\n        \n}\n \nelse\n \n{\n\n            \nfinal\n \nString\n \nfilterPattern\n \n=\n \nconstraint\n.\ntoString\n().\ntoLowerCase\n().\ntrim\n();\n\n\n                  \n// Your filtering logic goes in here\n\n            \nfor\n \n(\nfinal\n \nDog\n \ndog\n \n:\n \noriginalList\n)\n \n{\n\n                \nif\n \n(\ndog\n.\nbreed\n.\ntoLowerCase\n().\ncontains\n(\nfilterPattern\n))\n \n{\n\n                    \nfilteredList\n.\nadd\n(\ndog\n);\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \nresults\n.\nvalues\n \n=\n \nfilteredList\n;\n\n        \nresults\n.\ncount\n \n=\n \nfilteredList\n.\nsize\n();\n\n        \nreturn\n \nresults\n;\n\n    \n}\n\n\n    \n@Override\n\n    \nprotected\n \nvoid\n \npublishResults\n(\nCharSequence\n \nconstraint\n,\n \nFilterResults\n \nresults\n)\n \n{\n\n        \nadapter\n.\nfilteredDogs\n.\nclear\n();\n\n        \nadapter\n.\nfilteredDogs\n.\naddAll\n((\nList\n)\n \nresults\n.\nvalues\n);\n\n        \nadapter\n.\nnotifyDataSetChanged\n();\n\n    \n}\n\n\n}\n\n\n\n\n\n\nIII. Provide your custom filter from your adapter class by overriding \ngetFilter()\n method.\n\n\nclass\n \nAutoCompleteDogsAdapter\n \nextends\n \nArrayAdapter\nDog\n \n{\n\n\n    \nprivate\n \nfinal\n \nList\nDog\n \ndogs\n;\n\n    \nprivate\n \nList\nDog\n \nfilteredDogs\n \n=\n \nnew\n \nArrayList\n();\n\n\n    \npublic\n \nAutoCompleteDogsAdapter\n(\nContext\n \ncontext\n,\n \nList\nDog\n \ndogs\n)\n \n{\n\n        \nsuper\n(\ncontext\n,\n \n0\n,\n \ndogs\n);\n\n        \nthis\n.\ndogs\n \n=\n \ndogs\n;\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nint\n \ngetCount\n()\n \n{\n\n        \nreturn\n \nfilteredDogs\n.\nsize\n();\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nFilter\n \ngetFilter\n()\n \n{\n\n        \nreturn\n \nnew\n \nDogsFilter\n(\nthis\n,\n \ndogs\n);\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nView\n \ngetView\n(\nint\n \nposition\n,\n \nView\n \nconvertView\n,\n \nViewGroup\n \nparent\n)\n \n{\n\n        \n// Get the data item from filtered list.\n\n        \nDog\n \ndog\n \n=\n \nfilteredDogs\n.\nget\n(\nposition\n);\n\n\n        \n// Inflate your custom row layout as usual.\n\n        \nLayoutInflater\n \ninflater\n \n=\n \nLayoutInflater\n.\nfrom\n(\ngetContext\n());\n\n        \nconvertView\n \n=\n \ninflater\n.\ninflate\n(\nR\n.\nlayout\n.\nrow_dog\n,\n \nparent\n,\n \nfalse\n);\n\n\n        \nTextView\n \ntvName\n \n=\n \n(\nTextView\n)\n \nconvertView\n.\nfindViewById\n(\nR\n.\nid\n.\nrow_breed\n);\n\n        \nImageView\n \nivIcon\n \n=\n \n(\nImageView\n)\n \nconvertView\n.\nfindViewById\n(\nR\n.\nid\n.\nrow_icon\n);\n\n        \ntvName\n.\nsetText\n(\ndog\n.\nbreed\n);\n\n        \nivIcon\n.\nsetImageResource\n(\ndog\n.\ndrawable\n);\n\n\n        \nreturn\n \nconvertView\n;\n\n    \n}", 
            "title": "Auto-complete"
        }, 
        {
            "location": "/components/autocomplete/#how-to-add", 
            "text": "I. Declare your  AutoCompleteTextView  inside any  layout.xml .  AutoCompleteTextView \n     android:id= @+id/autocompleteView \n     android:layout_width= match_parent \n     android:layout_height= wrap_content \n     android:hint= Search dogs... /   II. Define a  string-array  that contains all text suggestions in a file inside  res/values  directory.  ?xml version= 1.0  encoding= utf-8 ?  resources \n     string-array   name= dogs_list \n         item Bichon Frise /item \n         item Border Collie /item \n         item Border Terrier /item \n         item Boxer /item \n         item Chihuahua /item \n         item German Shepherd /item \n         item Golden Retriever /item \n         item Greyhound /item \n     /string-array  /resources   III. Define a  filterable list adapter  to manage the auto completion data list.  int   layoutItemId   =   android . R . layout . simple_dropdown_item_1line ;  String []   dogArr   =   getResources (). getStringArray ( R . array . dogs_list );  List String   dogList   =   Arrays . asList ( dogsArr );  ArrayAdapter String   adapter   =   new   ArrayAdapter ( this ,   layoutItemId ,   dogList );  AutoCompleteTextView   autocompleteView   = \n     ( AutoCompleteTextView )   findViewById ( R . id . autocompleteView );  autocompleteView . setAdapter ( adapter );", 
            "title": "How to add?"
        }, 
        {
            "location": "/components/autocomplete/#how-to-style", 
            "text": "I. Declare custom styles in your  styles.xml  file.    style   name= Autocomplete   parent= Widget.AppCompat.Light.AutoCompleteTextView \n     item   name= android:background @color/green500 /item \n     item   name= colorControlNormal @color/amber500 /item \n     item   name= colorControlActivated @color/cyan500 /item  /style   II. Apply this style to the  AutoCompleteTextView  via  android:theme  attribute.  AutoCompleteTextView \n     android:id= @+id/autocomplete_dogs \n     android:layout_width= match_parent \n     android:layout_height= wrap_content \n     android:theme= @style/Autocomplete \n     android:hint= Search dogs...   /", 
            "title": "How to style?"
        }, 
        {
            "location": "/components/autocomplete/#drop-down-anchor", 
            "text": "By default, the dropdown list with your filtered data appear just below the  AutoCompleteTextView .  To change this position use  dropDownAnchor  attribute and reference another view id.  AutoCompleteTextView \n     android:id= @+id/autocomplete_dogs \n     android:layout_width= match_parent \n     android:layout_height= wrap_content \n     android:theme= @style/Autocomplete \n     android:hint= Search dogs... \n     android:dropDownAnchor= @+id/header \n     android:dropDownWidth= match_parent \n     /", 
            "title": "Drop down anchor"
        }, 
        {
            "location": "/components/autocomplete/#custom-adapter", 
            "text": "To fully customize the dropdown list you need to provide your own  Adapter . It needs to implement  Filterable  and  ListAdapter  interfaces.  The easiest way to achieve this is by extending  ArrayAdapter  which already implements both interfaces.  I. Create a custom adapter extending  ArrayAdapter  class.  class   AutoCompleteDogsAdapter   extends   ArrayAdapter Dog   { \n   ...  }   II. Create a custom filter extending  Filter  class and provide your own filtering logic overriding  performFiltering  method.  class   DogsFilter   extends   Filter   { \n\n     AutoCompleteDogsAdapter   adapter ; \n     List Dog   originalList ; \n     List Dog   filteredList ; \n\n     public   DogsFilter ( AutoCompleteDogsAdapter   adapter ,   List Dog   originalList )   { \n         super (); \n         this . adapter   =   adapter ; \n         this . originalList   =   originalList ; \n         this . filteredList   =   new   ArrayList (); \n     } \n\n     @Override \n     protected   FilterResults   performFiltering ( CharSequence   constraint )   { \n         filteredList . clear (); \n         final   FilterResults   results   =   new   FilterResults (); \n\n         if   ( constraint   ==   null   ||   constraint . length ()   ==   0 )   { \n             filteredList . addAll ( originalList ); \n         }   else   { \n             final   String   filterPattern   =   constraint . toString (). toLowerCase (). trim (); \n\n                   // Your filtering logic goes in here \n             for   ( final   Dog   dog   :   originalList )   { \n                 if   ( dog . breed . toLowerCase (). contains ( filterPattern ))   { \n                     filteredList . add ( dog ); \n                 } \n             } \n         } \n         results . values   =   filteredList ; \n         results . count   =   filteredList . size (); \n         return   results ; \n     } \n\n     @Override \n     protected   void   publishResults ( CharSequence   constraint ,   FilterResults   results )   { \n         adapter . filteredDogs . clear (); \n         adapter . filteredDogs . addAll (( List )   results . values ); \n         adapter . notifyDataSetChanged (); \n     }  }   III. Provide your custom filter from your adapter class by overriding  getFilter()  method.  class   AutoCompleteDogsAdapter   extends   ArrayAdapter Dog   { \n\n     private   final   List Dog   dogs ; \n     private   List Dog   filteredDogs   =   new   ArrayList (); \n\n     public   AutoCompleteDogsAdapter ( Context   context ,   List Dog   dogs )   { \n         super ( context ,   0 ,   dogs ); \n         this . dogs   =   dogs ; \n     } \n\n     @Override \n     public   int   getCount ()   { \n         return   filteredDogs . size (); \n     } \n\n     @Override \n     public   Filter   getFilter ()   { \n         return   new   DogsFilter ( this ,   dogs ); \n     } \n\n     @Override \n     public   View   getView ( int   position ,   View   convertView ,   ViewGroup   parent )   { \n         // Get the data item from filtered list. \n         Dog   dog   =   filteredDogs . get ( position ); \n\n         // Inflate your custom row layout as usual. \n         LayoutInflater   inflater   =   LayoutInflater . from ( getContext ()); \n         convertView   =   inflater . inflate ( R . layout . row_dog ,   parent ,   false ); \n\n         TextView   tvName   =   ( TextView )   convertView . findViewById ( R . id . row_breed ); \n         ImageView   ivIcon   =   ( ImageView )   convertView . findViewById ( R . id . row_icon ); \n         tvName . setText ( dog . breed ); \n         ivIcon . setImageResource ( dog . drawable ); \n\n         return   convertView ; \n     }", 
            "title": "Custom Adapter"
        }, 
        {
            "location": "/components/buttons/", 
            "text": "Buttons\n\n\nRaised Button\n\n\n\n\n\n\n\u6458\u81ea google material design \n\u6587\u6863\n.\"\n\n\n\u4e00\u4e2a\u5178\u578b\u7684\u77e9\u5f62 material \u6309\u94ae\u5728\u624b\u6307\u62ac\u8d77\u548c\u6309\u4e0b\u7684\u65f6\u5019\u4f1a\u5c55\u73b0\u58a8\u6c34\u5728\u7eb8\u4e0a\u6563\u5f00\u7684\u6548\u679c\u3002\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0?\n\n\nI. \u5728\u4f60\u7684 \nbuild.gradle\n \u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0 \nappcompat\n \u5e93.\n\n\ndependencies\n \n{\n\n    \ncompile\n \ncom.android.support:appcompat-v7:X.X.X\n \n// where X.X.X version\n\n\n}\n\n\n\n\n\n\nII. \u521b\u5efa\u4f60\u7684 activity \u5e76\u7ee7\u627f\u81ea \nandroid.support.v7.app.AppCompatActivity\n.\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n    \n...\n\n\n}\n\n\n\n\n\n\nIII. \u5728 \nlayout.xml\n \u5185\u7684\u4efb\u610f\u4f4d\u7f6e\u58f0\u660e\u4f60\u7684 \nButton\n\n\nButton\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:text=\nButton\n/\n\n\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?\n\n\n\n\nI. \u5728\u4f60\u7684 \nstyles.xml\n \u5185\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002\n\n\nstyle\n \nname=\nMyButton\n \nparent=\nTheme.AppCompat.Light\n\n    \nitem\n \nname=\ncolorControlHighlight\n@color/indigo\n/item\n\n    \nitem\n \nname=\ncolorButtonNormal\n@color/pink\n/item\n\n\n/style\n\n\n\n\n\n\nII. \u901a\u8fc7 \nandroid:theme\n \u5c5e\u6027\u5e94\u7528\u8fd9\u4e2a\u6837\u5f0f\u5230\u4f60\u7684 \nButton\n \u3002\n\n\nButton\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:text=\nButton\n\n    \nandroid:theme=\n@style/MyButton\n/\n\n\n\n\n\n\n\u517c\u5bb9\u6027\u95ee\u9898\n\n\nI. \u5207\u6362 \nButton\n \u6309\u4e0b\u72b6\u6001\u7684\u989c\u8272\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e3b\u9898\u7684 \ncolorControlHighlight\n \u5c5e\u6027\uff0c\u867d\u7136\u5b83\u4ec5\u4ec5\u5f71\u54cd Lollipop \u7248\u672c\u7684\u7cfb\u7edf\u3002\n\n\nII. Android \nelevation\n \u53ea\u5728 Lollipop \u8bbe\u5907\u4e0a\u6709\u6548\uff0c\u56e0\u6b64\u4f60\u5728\nLollipop \u4e4b\u524d\u7684\u8bbe\u5907\u4e0a\u5c06\u770b\u4e0d\u5230 \nButton\n \u5468\u56f4\u7684\u9634\u5f71\u3002\n\n\n\n\n\u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\n\n\n\n\n\u539f\u6587\u4f5c\u8005\uff1aDmytro Danylyk \u539f\u6587\u94fe\u63a5\uff1a\nhttps://materialdoc.com/components/buttons/\n\n\nFlat Button\n\n\n\n\n\n\n\u6458\u81ea google material design \n\u6587\u6863\n.\n\n\n\u4e00\u4e2a\u5728\u6309\u4e0b\u7684\u65f6\u5019\u4f1a\u5c55\u73b0\u58a8\u6c34\u6563\u5f00\u7684\u6548\u679c\u4f46\u6ca1\u6709\u51f8\u8d77\u6548\u679c\u7531\u58a8\u6c34\u5f62\u6210\u7684\u6309\u94ae\u3002\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0?\n\n\nI. \u5728\u4f60\u7684 \nbuild.grade\n \u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0 \nappcompat\n \u5e93.\n\n\ndependencies {\n    compile \ncom.android.support:appcompat-v7:X.X.X\n // where X.X.X version\n}\n\n\n\n\n\nII. \u521b\u5efa\u4f60\u7684 activity \u5e76\u7ee7\u627f\u81ea \nandroid.support.v7.app.AppCompatActivity\n.\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n    \n...\n\n\n}\n\n\n\n\n\n\nIII. \u5728 \nlayout.xml\n \u5185\u7684\u4efb\u610f\u4f4d\u7f6e\u58f0\u660e\u4f60\u7684 \nButton\n \u5e76\u8bbe\u7f6e  \nBorderless\n \u6837\u5f0f.\n\n\nButton\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:text=\nButton\n\n    \nstyle=\n@style/Widget.AppCompat.Button.Borderless\n/\n\n\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?\n\n\n\n\nI. \u5728\u4f60\u7684 \nstyles.xml\n \u5185\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002\n\n\nstyle\n \nname=\nMyButton\n \nparent=\nTheme.AppCompat.Light\n\n    \nitem\n \nname=\ncolorControlHighlight\n@color/pink\n/item\n\n\n/style\n\n\n\n\n\n\nIII. \u901a\u8fc7 \nandroid:theme\n \u5c5e\u6027\u5e94\u7528\u8fd9\u4e2a\u6837\u5f0f\u5230\u4f60\u7684 \nButton\n\u3002\n\n\nButton\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:text=\nButton\n\n    \nandroid:theme=\n@style/MyButton\n\n    \nstyle=\n@style/Widget.AppCompat.Button.Borderless\n/\n\n\n\n\n\n\n\n\n\u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\n\n\n\n\n\u539f\u6587\u4f5c\u8005:Dmytro Danylyk  \u539f\u6587\u94fe\u63a5: \nhttps://materialdoc.com/components/buttons/#flat-button", 
            "title": "Buttons"
        }, 
        {
            "location": "/components/buttons/#buttons", 
            "text": "", 
            "title": "Buttons"
        }, 
        {
            "location": "/components/buttons/#raised-button", 
            "text": "\u6458\u81ea google material design  \u6587\u6863 .\"  \u4e00\u4e2a\u5178\u578b\u7684\u77e9\u5f62 material \u6309\u94ae\u5728\u624b\u6307\u62ac\u8d77\u548c\u6309\u4e0b\u7684\u65f6\u5019\u4f1a\u5c55\u73b0\u58a8\u6c34\u5728\u7eb8\u4e0a\u6563\u5f00\u7684\u6548\u679c\u3002", 
            "title": "Raised Button"
        }, 
        {
            "location": "/components/buttons/#_1", 
            "text": "I. \u5728\u4f60\u7684  build.gradle  \u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0  appcompat  \u5e93.  dependencies   { \n     compile   com.android.support:appcompat-v7:X.X.X   // where X.X.X version  }   II. \u521b\u5efa\u4f60\u7684 activity \u5e76\u7ee7\u627f\u81ea  android.support.v7.app.AppCompatActivity .  public   class   MainActivity   extends   AppCompatActivity   { \n     ...  }   III. \u5728  layout.xml  \u5185\u7684\u4efb\u610f\u4f4d\u7f6e\u58f0\u660e\u4f60\u7684  Button  Button \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:text= Button /", 
            "title": "\u5982\u4f55\u6dfb\u52a0?"
        }, 
        {
            "location": "/components/buttons/#_2", 
            "text": "I. \u5728\u4f60\u7684  styles.xml  \u5185\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002  style   name= MyButton   parent= Theme.AppCompat.Light \n     item   name= colorControlHighlight @color/indigo /item \n     item   name= colorButtonNormal @color/pink /item  /style   II. \u901a\u8fc7  android:theme  \u5c5e\u6027\u5e94\u7528\u8fd9\u4e2a\u6837\u5f0f\u5230\u4f60\u7684  Button  \u3002  Button \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:text= Button \n     android:theme= @style/MyButton /", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?"
        }, 
        {
            "location": "/components/buttons/#_3", 
            "text": "I. \u5207\u6362  Button  \u6309\u4e0b\u72b6\u6001\u7684\u989c\u8272\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e3b\u9898\u7684  colorControlHighlight  \u5c5e\u6027\uff0c\u867d\u7136\u5b83\u4ec5\u4ec5\u5f71\u54cd Lollipop \u7248\u672c\u7684\u7cfb\u7edf\u3002  II. Android  elevation  \u53ea\u5728 Lollipop \u8bbe\u5907\u4e0a\u6709\u6548\uff0c\u56e0\u6b64\u4f60\u5728\nLollipop \u4e4b\u524d\u7684\u8bbe\u5907\u4e0a\u5c06\u770b\u4e0d\u5230  Button  \u5468\u56f4\u7684\u9634\u5f71\u3002   \u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63   \u539f\u6587\u4f5c\u8005\uff1aDmytro Danylyk \u539f\u6587\u94fe\u63a5\uff1a https://materialdoc.com/components/buttons/", 
            "title": "\u517c\u5bb9\u6027\u95ee\u9898"
        }, 
        {
            "location": "/components/buttons/#flat-button", 
            "text": "\u6458\u81ea google material design  \u6587\u6863 .  \u4e00\u4e2a\u5728\u6309\u4e0b\u7684\u65f6\u5019\u4f1a\u5c55\u73b0\u58a8\u6c34\u6563\u5f00\u7684\u6548\u679c\u4f46\u6ca1\u6709\u51f8\u8d77\u6548\u679c\u7531\u58a8\u6c34\u5f62\u6210\u7684\u6309\u94ae\u3002", 
            "title": "Flat Button"
        }, 
        {
            "location": "/components/buttons/#_4", 
            "text": "I. \u5728\u4f60\u7684  build.grade  \u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0  appcompat  \u5e93.  dependencies {\n    compile  com.android.support:appcompat-v7:X.X.X  // where X.X.X version\n}  II. \u521b\u5efa\u4f60\u7684 activity \u5e76\u7ee7\u627f\u81ea  android.support.v7.app.AppCompatActivity .  public   class   MainActivity   extends   AppCompatActivity   { \n     ...  }   III. \u5728  layout.xml  \u5185\u7684\u4efb\u610f\u4f4d\u7f6e\u58f0\u660e\u4f60\u7684  Button  \u5e76\u8bbe\u7f6e   Borderless  \u6837\u5f0f.  Button \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:text= Button \n     style= @style/Widget.AppCompat.Button.Borderless /", 
            "title": "\u5982\u4f55\u6dfb\u52a0?"
        }, 
        {
            "location": "/components/buttons/#_5", 
            "text": "I. \u5728\u4f60\u7684  styles.xml  \u5185\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002  style   name= MyButton   parent= Theme.AppCompat.Light \n     item   name= colorControlHighlight @color/pink /item  /style   III. \u901a\u8fc7  android:theme  \u5c5e\u6027\u5e94\u7528\u8fd9\u4e2a\u6837\u5f0f\u5230\u4f60\u7684  Button \u3002  Button \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:text= Button \n     android:theme= @style/MyButton \n     style= @style/Widget.AppCompat.Button.Borderless /    \u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63   \u539f\u6587\u4f5c\u8005:Dmytro Danylyk  \u539f\u6587\u94fe\u63a5:  https://materialdoc.com/components/buttons/#flat-button", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?"
        }, 
        {
            "location": "/components/fab/", 
            "text": "Floating Action Button\n\n\n\n\n\n\n\u6458\u81ea\u8c37\u6b4c\u5b98\u65b9\u7684 Material Design \n\u6587\u6863\n:\n\n\nFAB \u7528\u4e8e\u4e3b\u8981\u7684\u529f\u80fd\u6309\u94ae\u3002FAB \u662f\u4e00\u4e2a\u6f02\u6d6e\u5728 UI \u4e4b\u4e0a\u7684\u5706\u5f62\u56fe\u6807\uff0c\u5e76\u4e14\u5f53\u70b9\u51fb\u8be5\u6309\u94ae\u7684\u65f6\u5019\uff0c\u901a\u5e38\u5177\u6709 \u53d8\u5f62\u3001\u4f4d\u79fb \u7b49\u52a8\u753b\u6548\u679c\u3002\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0\uff1f\n\n\nI. \u5728 \nbuild.gradle\n \u4e2d\u6dfb\u52a0\u6700\u65b0\u7684 \nappcompat\n \u548c\ndesign\n \u5e93\u3002\n\n\ndependencies\n \n{\n\n    \ncompile\n \ncom.android.support:appcompat-v7:X.X.X\n \n// where X.X.X version\n\n    \ncompile\n \ncom.android.support:design:X.X.X\n \n// where X.X.X version\n\n\n}\n\n\n\n\n\n\nII. \u7ee7\u627f\u81f3 \nandroid.support.v7.app.AppCompatActivity\n Activity\u3002\n\n\n\n\n\u8ba9\u4f60\u7684 Activity \u7ee7\u627f\u81ea android.support.v7.app.AppCompatActivity \u3002\n\n\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n    \n...\n\n\n}\n\n\n\n\n\n\nIII. \u5728 \nlayout.xml\n \u5e03\u5c40\u6587\u4ef6\u4e2d\u4f7f\u7528 \nFloatingActionButton\n\u3002\n\n\n```prettyprint lang-xml\n\n\n\n### \u5982\u4f55\u4fee\u6539\u6837\u5f0f\n\n\n\n!\n[\nMini\n \nFAB\n](\nhttps\n:\n//materialdoc.com/images/device-2016-01-02-153733.png)\n\n\n\n#### \u80cc\u666f\u989c\u8272\n\n\n\nI\n.\n \n\u5728\n \nvalues\n/\nstyles\n.\nxml\n \n\u4e2d\u5b9a\u4e49\u4e00\u4e2a\n \nstyle\n\u3002\n\n\n\n```\nxml\n\n\nstyle\n \nname\n=\nMyFloatingButton\n \nparent\n=\nTheme.AppCompat.Light\n\n    \nitem\n \nname\n=\ncolorAccent\n@\ncolor\n/\npink\n/\nitem\n\n\n/\nstyle\n\n\n\n\n\n\nII. \u901a\u8fc7 \nandroid:theme\n \u5c5e\u6027\u5728 \nFloatingActionButton\n \u4e0a\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684 style\u3002\n\n\nandroid.support.design.widget.FloatingActionButton\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:src=\n@drawable/ic_call\n\n    \nandroid:theme=\n@style/MyFloatingButton\n \n/\n\n\n\n\n\n\nRipple \u6548\u679c\u989c\u8272\n\n\n\u4f7f\u7528 \napp:rippleColor\n \u5c5e\u6027\u6765\u4fee\u6539\u5f53\u70b9\u51fb \nFloatingActionButton\n \u65f6\u5019\u7684 \u6c34\u6ce2\u7eb9 \u7684\u989c\u8272\u3002\n\n\nandroid\n.\nsupport\n.\ndesign\n.\nwidget\n.\nFloatingActionButton\n\n    \nandroid\n:\nlayout_width\n=\nwrap_content\n\n    \nandroid\n:\nlayout_height\n=\nwrap_content\n\n    \nandroid\n:\nsrc\n=\n@drawable/ic_call\n\n    \napp\n:\nrippleColor\n=\n@color/indigo\n \n/\n\n\n\n\n\n\n\u56fe\u6807\n\n\n\u4f7f\u7528 \nandroid:src\n \u6765\u6307\u5b9a \nFloatingActionButton\n \u7684\u56fe\u6807\u3002\n\n\nandroid.support.design.widget.FloatingActionButton\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:src=\n@drawable/ic_favorite\n/\n\n\n\n\n\n\n\u5927\u5c0f\n\n\n\n\n\u5728\u8c37\u6b4c\u5b98\u65b9\u7684 Material Deisgn \n\u6587\u6863\n \u4e2d\u4ecb\u7ecd:\n\n\nFAB \u6709\u4e24\u79cd\u5c3a\u5bf8\uff1a\n\n\n\n\n\u9ed8\u8ba4\u5c3a\u5bf8\uff1a\u9002\u5408\u5927\u90e8\u5206\u60c5\u51b5\n\n\n\u8ff7\u4f60\u5c3a\u5bf8\uff1a\u5f53\u9ed8\u8ba4\u5c3a\u5bf8\u548c\u5f53\u524d UI \u7684\u5176\u4ed6\u5143\u7d20\u4e0d\u534f\u8c03\u7684\u65f6\u5019\u4f7f\u7528\u8ff7\u4f60\u5c3a\u5bf8\n\n\n\n\n\n\n\u4f7f\u7528 \napp:fabSize\n  \u6765\u4fee\u6539 \nFloatingActionButton\n \u7684\u5927\u5c0f\uff0c\u5176\u53d6\u503c\u4e3a\u9884\u8bbe\u7684\u4e24\u4e2a\u5e38\u91cf\uff1a \nmini\n \u6216\u8005 \nnormal\n\u3002\n\n\nandroid.support.design.widget.FloatingActionButton\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:src=\n@drawable/ic_mini\n\n    \napp:fabSize=\nmini\n/\n\n\n\n\n\n\n\n\n\u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\n\n\n\u539f\u6587\u4f5c\u8005\uff1aParesh Mayani \u539f\u6587\u5730\u5740\uff1a\nhttps://materialdoc.com/components/fab/\n\n\n\u8bd1\u8005\uff1a\nGoodev\n\n\u6821\u5bf9\uff1a\nAilurus", 
            "title": "Buttons FAB"
        }, 
        {
            "location": "/components/fab/#floating-action-button", 
            "text": "\u6458\u81ea\u8c37\u6b4c\u5b98\u65b9\u7684 Material Design  \u6587\u6863 :  FAB \u7528\u4e8e\u4e3b\u8981\u7684\u529f\u80fd\u6309\u94ae\u3002FAB \u662f\u4e00\u4e2a\u6f02\u6d6e\u5728 UI \u4e4b\u4e0a\u7684\u5706\u5f62\u56fe\u6807\uff0c\u5e76\u4e14\u5f53\u70b9\u51fb\u8be5\u6309\u94ae\u7684\u65f6\u5019\uff0c\u901a\u5e38\u5177\u6709 \u53d8\u5f62\u3001\u4f4d\u79fb \u7b49\u52a8\u753b\u6548\u679c\u3002", 
            "title": "Floating Action Button"
        }, 
        {
            "location": "/components/fab/#_1", 
            "text": "I. \u5728  build.gradle  \u4e2d\u6dfb\u52a0\u6700\u65b0\u7684  appcompat  \u548c design  \u5e93\u3002  dependencies   { \n     compile   com.android.support:appcompat-v7:X.X.X   // where X.X.X version \n     compile   com.android.support:design:X.X.X   // where X.X.X version  }   II. \u7ee7\u627f\u81f3  android.support.v7.app.AppCompatActivity  Activity\u3002   \u8ba9\u4f60\u7684 Activity \u7ee7\u627f\u81ea android.support.v7.app.AppCompatActivity \u3002   public   class   MainActivity   extends   AppCompatActivity   { \n     ...  }   III. \u5728  layout.xml  \u5e03\u5c40\u6587\u4ef6\u4e2d\u4f7f\u7528  FloatingActionButton \u3002  ```prettyprint lang-xml  ### \u5982\u4f55\u4fee\u6539\u6837\u5f0f  ! [ Mini   FAB ]( https : //materialdoc.com/images/device-2016-01-02-153733.png)  #### \u80cc\u666f\u989c\u8272  I .   \u5728   values / styles . xml   \u4e2d\u5b9a\u4e49\u4e00\u4e2a   style \u3002  ``` xml  style   name = MyFloatingButton   parent = Theme.AppCompat.Light \n     item   name = colorAccent @ color / pink / item  / style   II. \u901a\u8fc7  android:theme  \u5c5e\u6027\u5728  FloatingActionButton  \u4e0a\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684 style\u3002  android.support.design.widget.FloatingActionButton \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:src= @drawable/ic_call \n     android:theme= @style/MyFloatingButton   /", 
            "title": "\u5982\u4f55\u6dfb\u52a0\uff1f"
        }, 
        {
            "location": "/components/fab/#ripple", 
            "text": "\u4f7f\u7528  app:rippleColor  \u5c5e\u6027\u6765\u4fee\u6539\u5f53\u70b9\u51fb  FloatingActionButton  \u65f6\u5019\u7684 \u6c34\u6ce2\u7eb9 \u7684\u989c\u8272\u3002  android . support . design . widget . FloatingActionButton \n     android : layout_width = wrap_content \n     android : layout_height = wrap_content \n     android : src = @drawable/ic_call \n     app : rippleColor = @color/indigo   /", 
            "title": "Ripple \u6548\u679c\u989c\u8272"
        }, 
        {
            "location": "/components/fab/#_2", 
            "text": "\u4f7f\u7528  android:src  \u6765\u6307\u5b9a  FloatingActionButton  \u7684\u56fe\u6807\u3002  android.support.design.widget.FloatingActionButton \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:src= @drawable/ic_favorite /", 
            "title": "\u56fe\u6807"
        }, 
        {
            "location": "/components/fab/#_3", 
            "text": "\u5728\u8c37\u6b4c\u5b98\u65b9\u7684 Material Deisgn  \u6587\u6863  \u4e2d\u4ecb\u7ecd:  FAB \u6709\u4e24\u79cd\u5c3a\u5bf8\uff1a   \u9ed8\u8ba4\u5c3a\u5bf8\uff1a\u9002\u5408\u5927\u90e8\u5206\u60c5\u51b5  \u8ff7\u4f60\u5c3a\u5bf8\uff1a\u5f53\u9ed8\u8ba4\u5c3a\u5bf8\u548c\u5f53\u524d UI \u7684\u5176\u4ed6\u5143\u7d20\u4e0d\u534f\u8c03\u7684\u65f6\u5019\u4f7f\u7528\u8ff7\u4f60\u5c3a\u5bf8    \u4f7f\u7528  app:fabSize   \u6765\u4fee\u6539  FloatingActionButton  \u7684\u5927\u5c0f\uff0c\u5176\u53d6\u503c\u4e3a\u9884\u8bbe\u7684\u4e24\u4e2a\u5e38\u91cf\uff1a  mini  \u6216\u8005  normal \u3002  android.support.design.widget.FloatingActionButton \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:src= @drawable/ic_mini \n     app:fabSize= mini /    \u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63  \u539f\u6587\u4f5c\u8005\uff1aParesh Mayani \u539f\u6587\u5730\u5740\uff1a https://materialdoc.com/components/fab/  \u8bd1\u8005\uff1a Goodev \n\u6821\u5bf9\uff1a Ailurus", 
            "title": "\u5927\u5c0f"
        }, 
        {
            "location": "/components/bottom-navigation/", 
            "text": "Bottom navigation\n\n\n\n\n\n\nFrom google material design \ndocumentation\n.\n\n\nBottom navigation bars make it easy to explore and switch between top-level views in a single tap.\n\n\n\n\nHow to add?\n\n\nI. In your \nbuild.gradle\n add latest \ndesign\n  and \nappcompat\n libraries.\n\n\ndependencies {\n    compile \ncom.android.support:appcompat-v7:X.X.X\n\n    compile \ncom.android.support:design:X.X.X\n\n\n    // where X.X.X version\n}\n\n\n\n\n\nII. Make your activity extend \nandroid.support.v7.app.AppCompatActivity\n.\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n \n...\n\n\n}\n\n\n\n\n\n\nIII. Declare navigation items in \nmenu\n file.\n\n\nmenu\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \nitem\n\n            \nandroid:id=\n@+id/recents\n\n            \nandroid:title=\nRecents\n\n            \nandroid:icon=\n@drawable/ic_history_24dp\n/\n\n    \nitem\n\n            \nandroid:id=\n@+id/favorites\n\n            \nandroid:title=\nFavorites\n\n            \nandroid:icon=\n@drawable/ic_favorite_24dp\n/\n\n    \nitem\n\n            \nandroid:id=\n@+id/nearby\n\n            \nandroid:title=\nNearby\n\n            \nandroid:icon=\n@drawable/ic_place_24dp\n/\n\n\n/menu\n\n\n\n\n\n\nIV. Declare \nBottomNavigationView\n inside your \nlayout.xml\n file.\n\n\nandroid.support.design.widget.BottomNavigationView\n\n    \nandroid:id=\n@+id/bottomNavigationView\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nwrap_content\n\n    \napp:menu=\n@menu/bottom_navigation_menu\n/\n\n\n\n\n\n\nHow to style?\n\n\n\n\nI. Define custom color for navigation bar.\n\n\nselector\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \nitem\n \nandroid:state_checked=\nfalse\n \nandroid:color=\n@color/pink\n/\n\n    \nitem\n \nandroid:color=\n@android:color/white\n/\n\n\n/selector\n\n\n\n\n\n\nII.  Define custom backgrounds for navigation bar items.\n\n\n// res/drawable, to support devices lower then 21 API\n\nselector\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \nitem\n \nandroid:state_pressed=\ntrue\n \nandroid:drawable=\n@android:color/white\n/\n\n    \nitem\n \nandroid:drawable=\n@android:color/transparent\n/\n\n\n/selector\n\n\n// res/drawable-v21 folder, for devices greater or equal then 21 API\n\nripple\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n        \nandroid:color=\n@android:color/white\n\n\n/ripple\n\n\n\n\n\n\nIII. Declare custom style in your \nstyles.xml\n file.\n\n\nstyle\n \nname=\nBottomNavigation\n\n    \nitem\n \nname=\nandroid:background\n@color/indigo\n/item\n\n    \nitem\n \nname=\nitemBackground\n@drawable/navigation_bar_item_bg\n/item\n\n    \nitem\n \nname=\nitemIconTint\n@color/navigation_bar_txt_color\n/item\n\n    \nitem\n \nname=\nitemTextColor\n@color/navigation_bar_txt_color\n/item\n\n    \nitem\n \nname=\npaddingStart\n@dimen/bottom_navigation_padding\n/item\n\n    \nitem\n \nname=\npaddingEnd\n@dimen/bottom_navigation_padding\n/item\n\n\n/style\n\n\n\n\n\n\nIV. Apply this style to your \nBottomNavigationView\n via \nstyle\n attribute.\n\n\nandroid.support.design.widget.BottomNavigationView\n\n    \nandroid:id=\n@+id/bottomNavigationView\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nwrap_content\n\n    \napp:menu=\n@menu/bottom_navigation_menu\n\n    \nstyle=\n@style/BottomNavigation\n/\n\n\n\n\n\n\nHandle item selection\n\n\nBottomNavigationView\n \nbottomNavigationView\n;\n\n\n// ...\n\n\nbottomNavigationView\n.\nsetOnNavigationItemSelectedListener\n(\nnew\n \nOnNavigationItemSelectedListener\n()\n \n{\n\n     \n@Override\n\n     \npublic\n \nboolean\n \nonNavigationItemSelected\n(\n@NonNull\n \nMenuItem\n \nitem\n)\n \n{\n\n         \nif\n \n(\nitem\n.\ngetItemId\n()\n \n==\n \nR\n.\nid\n.\nfavorites\n)\n \n{\n\n             \n// on favorites clicked\n\n             \nreturn\n \ntrue\n;\n\n         \n}\n\n         \nreturn\n \nfalse\n;\n\n     \n}\n\n\n});\n\n\n\n\n\n\nSelect item programmatically\n\n\nBottomNavigationView\n \nnavigationView\n;\n\n\n// ...\n\n\nnavigationView\n=\n \n(\nBottomNavigationView\n)\n \nfindViewById\n(\nR\n.\nid\n.\nbottomNavigationView\n);\n\n\nnavigationView\n.\ngetMenu\n().\ngetItem\n(\nitemToSelect\n).\nsetChecked\n(\ntrue\n);\n\n\n\n\n\n\nGet selected item\n\n\nThere is no API to get selected item. Instead you can :\n\n\nI. Get \nmenu\n from \nBottomNavigationView\n and search for\nchecked item.\n\n\nBottomNavigationView\n \nbottomNavigationView\n;\n\n\n// ...\n\n\nint\n \ngetSelectedItem\n()\n \n{\n\n    \nMenu\n \nmenu\n \n=\n \nbottomNavigationView\n.\ngetMenu\n();\n\n    \nfor\n \n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n \nmenu\n.\nsize\n();\n \ni\n++)\n \n{\n\n        \nif\n \n(\nmenu\n.\ngetItem\n(\ni\n).\nisChecked\n())\n \n{\n\n            \nreturn\n \ni\n;\n\n        \n}\n\n    \n}\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\nII. Add global \nselectedItem\n variable and update it each time you do select item programmatically and each time you receive \nOnNavigationItemSelected\n event.", 
            "title": "Bottom navigation"
        }, 
        {
            "location": "/components/bottom-navigation/#bottom-navigation", 
            "text": "From google material design  documentation .  Bottom navigation bars make it easy to explore and switch between top-level views in a single tap.", 
            "title": "Bottom navigation"
        }, 
        {
            "location": "/components/bottom-navigation/#how-to-add", 
            "text": "I. In your  build.gradle  add latest  design   and  appcompat  libraries.  dependencies {\n    compile  com.android.support:appcompat-v7:X.X.X \n    compile  com.android.support:design:X.X.X \n\n    // where X.X.X version\n}  II. Make your activity extend  android.support.v7.app.AppCompatActivity .  public   class   MainActivity   extends   AppCompatActivity   { \n  ...  }   III. Declare navigation items in  menu  file.  menu   xmlns:android= http://schemas.android.com/apk/res/android \n     item \n             android:id= @+id/recents \n             android:title= Recents \n             android:icon= @drawable/ic_history_24dp / \n     item \n             android:id= @+id/favorites \n             android:title= Favorites \n             android:icon= @drawable/ic_favorite_24dp / \n     item \n             android:id= @+id/nearby \n             android:title= Nearby \n             android:icon= @drawable/ic_place_24dp /  /menu   IV. Declare  BottomNavigationView  inside your  layout.xml  file.  android.support.design.widget.BottomNavigationView \n     android:id= @+id/bottomNavigationView \n     android:layout_width= match_parent \n     android:layout_height= wrap_content \n     app:menu= @menu/bottom_navigation_menu /", 
            "title": "How to add?"
        }, 
        {
            "location": "/components/bottom-navigation/#how-to-style", 
            "text": "I. Define custom color for navigation bar.  selector   xmlns:android= http://schemas.android.com/apk/res/android \n     item   android:state_checked= false   android:color= @color/pink / \n     item   android:color= @android:color/white /  /selector   II.  Define custom backgrounds for navigation bar items.  // res/drawable, to support devices lower then 21 API selector   xmlns:android= http://schemas.android.com/apk/res/android \n     item   android:state_pressed= true   android:drawable= @android:color/white / \n     item   android:drawable= @android:color/transparent /  /selector \n\n// res/drawable-v21 folder, for devices greater or equal then 21 API ripple   xmlns:android= http://schemas.android.com/apk/res/android \n         android:color= @android:color/white  /ripple   III. Declare custom style in your  styles.xml  file.  style   name= BottomNavigation \n     item   name= android:background @color/indigo /item \n     item   name= itemBackground @drawable/navigation_bar_item_bg /item \n     item   name= itemIconTint @color/navigation_bar_txt_color /item \n     item   name= itemTextColor @color/navigation_bar_txt_color /item \n     item   name= paddingStart @dimen/bottom_navigation_padding /item \n     item   name= paddingEnd @dimen/bottom_navigation_padding /item  /style   IV. Apply this style to your  BottomNavigationView  via  style  attribute.  android.support.design.widget.BottomNavigationView \n     android:id= @+id/bottomNavigationView \n     android:layout_width= match_parent \n     android:layout_height= wrap_content \n     app:menu= @menu/bottom_navigation_menu \n     style= @style/BottomNavigation /", 
            "title": "How to style?"
        }, 
        {
            "location": "/components/bottom-navigation/#handle-item-selection", 
            "text": "BottomNavigationView   bottomNavigationView ;  // ...  bottomNavigationView . setOnNavigationItemSelectedListener ( new   OnNavigationItemSelectedListener ()   { \n      @Override \n      public   boolean   onNavigationItemSelected ( @NonNull   MenuItem   item )   { \n          if   ( item . getItemId ()   ==   R . id . favorites )   { \n              // on favorites clicked \n              return   true ; \n          } \n          return   false ; \n      }  });", 
            "title": "Handle item selection"
        }, 
        {
            "location": "/components/bottom-navigation/#select-item-programmatically", 
            "text": "BottomNavigationView   navigationView ;  // ...  navigationView =   ( BottomNavigationView )   findViewById ( R . id . bottomNavigationView );  navigationView . getMenu (). getItem ( itemToSelect ). setChecked ( true );", 
            "title": "Select item programmatically"
        }, 
        {
            "location": "/components/bottom-navigation/#get-selected-item", 
            "text": "There is no API to get selected item. Instead you can :  I. Get  menu  from  BottomNavigationView  and search for\nchecked item.  BottomNavigationView   bottomNavigationView ;  // ...  int   getSelectedItem ()   { \n     Menu   menu   =   bottomNavigationView . getMenu (); \n     for   ( int   i   =   0 ;   i     menu . size ();   i ++)   { \n         if   ( menu . getItem ( i ). isChecked ())   { \n             return   i ; \n         } \n     } \n     return   0 ;  }   II. Add global  selectedItem  variable and update it each time you do select item programmatically and each time you receive  OnNavigationItemSelected  event.", 
            "title": "Get selected item"
        }, 
        {
            "location": "/components/bottom-sheets/", 
            "text": "Bottom Sheets\n\n\n\n\n\n\nFrom google material design \ndocumentation\n.\n\n\nA bottom sheet is a sheet of material that slides up from the bottom edge of the screen.\n\n\nBottom sheets are displayed only as a result of a user-initiated action, and can be swiped up to reveal additional content. A bottom sheet can be a temporary modal surface or a persistent structural element of an app.\n\n\n\n\nHow to add?\n\n\nI. In your \nbuild.gradle\n add latest \nappcompat\n and \ndesign\n libraries.\n\n\ndependencies {\n    compile \ncom.android.support:appcompat-v7:X.X.X\n // where X.X.X version\n    compile \ncom.android.support:design:X.X.X\n // where X.X.X version\n}\n\n\n\n\n\nII. Set the \napp:layout_behavior\n attribute with the value  \n@string/bottom_sheet_behavior\n which will allow your view or viewgroup appear as a bottom sheet.\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nLinearLayout\n\n    \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\n300dp\n\n    \nandroid:orientation=\nvertical\n\n    \nandroid:padding=\n16dp\n\n    \napp:layout_behavior=\n@string/bottom_sheet_behavior\n\n\n    \nTextView\n\n        \nandroid:layout_width=\nwrap_content\n\n        \nandroid:layout_height=\nwrap_content\n\n        \nandroid:text=\nDandelion Chocolate\n\n        \nandroid:textAppearance=\n@style/TextAppearance.AppCompat.Display1\n\n        \nandroid:textColor=\n@android:color/black\n/\n\n\n/LinearLayout\n\n\n\n\n\n\n\n\nNote\n\n\nYou can use the \nbehavior_peekHeight\n attribute to set the default height of the bottom sheet.\n\n\n\n\nIII. Add your view which implements the bottom sheet behavior as a direct child of a \nCoordinatorLayout\n.\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nandroid.support.design.widget.CoordinatorLayout\n\n    \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \nxmlns:tools=\nhttp://schemas.android.com/tools\n\n    \nxmlns:app=\nhttp://schemas.android.com/apk/res-auto\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nmatch_parent\n\n    \ntools:context=\n.MainActivity\n \n\n\n    \nandroid.support.design.widget.AppBarLayout\n\n        \nandroid:id=\n@+id/appbarLayout\n\n        \nandroid:layout_width=\nmatch_parent\n\n        \nandroid:layout_height=\n?attr/actionBarSize\n\n        \nandroid:theme=\n@style/ThemeOverlay.AppCompat.Dark.ActionBar\n \n\n\n        \nandroid.support.v7.widget.Toolbar\n\n            \nandroid:id=\n@+id/appbar\n\n            \nandroid:layout_height=\n?attr/actionBarSize\n\n            \nandroid:layout_width=\nmatch_parent\n\n            \nandroid:minHeight=\n?attr/actionBarSize\n\n            \nandroid:background=\n?attr/colorPrimary\n\n            \napp:elevation=\n4dp\n\n            \nandroid:theme=\n@style/ThemeOverlay.AppCompat.Dark.ActionBar\n\n            \napp:popupTheme=\n@style/ThemeOverlay.AppCompat.Light\n \n\n\n        \n/android.support.v7.widget.Toolbar\n\n\n    \n/android.support.design.widget.AppBarLayout\n\n\n    \n!-- Your content --\n\n    \ninclude\n \nlayout=\n@layout/content_main\n \n/\n\n\n    \n!-- Bottom Sheet --\n\n    \ninclude\n \nlayout=\n@layout/bottom_sheets_main\n \n/\n\n\n/android.support.design.widget.CoordinatorLayout\n\n\n\n\n\n\n\n\nNote\n\n\nYou can wrap your views and viewgroups under \ninclude\n tags in order to keep clean your layouts.\n\n\n\n\nIV. Get a reference of \nBottomSheetBehavior\n with a reference of  the view which has the bottom behavior set. Use the \nfrom\n method of \nBottomSheetBehavior\n.\n\n\nLinearLayout\n \nbottomSheetViewgroup\n \n=\n \n(\nLinearLayout\n)\n \nfindViewById\n(\nR\n.\nid\n.\nbottom_sheet\n);\n\n\nBottomSheetBehavior\n \nbottomSheetBehavior\n \n=\n \nBottomSheetBehavior\n.\nfrom\n(\nbottomSheetViewgroup\n);\n\n\n\n\n\n\nVI. To expand your bottom sheet use \nsetState\n method with \nBottomSheetBehavior.STATE_EXPANDED\n parameter.\n\n\nbottomSheetBehavior\n.\nsetState\n(\nBottomSheetBehavior\n.\nSTATE_EXPANDED\n);\n\n\n\n\n\n\nYou can handle these states via the \nsetState\n method:\n\n\n\n\nSTATE_EXPANDED\n: To completely expand the bottom sheet.\n\n\nSTATE_HIDE\n: To completely hide the bottom sheet.\n\n\nSTATE_COLLAPSED\n: To set the bottom sheet height with the value set on the \npeekHeight\n attribute.\n\n\n\n\nModal bottom sheets\n\n\n\n\n\n\nFrom google material design \ndocumentation\n.\n\n\nModal bottom sheets are alternatives to menus or simple dialogs. They can also present deep-linked content from other apps. They are primarily for mobile.\n\n\n\n\nI. Create a class extending the \nBottomSheetDialogFragment\n inflated with a layout which will be used as the content of your modal bottom sheet.\n\n\npublic\n \nclass\n \nModalBottomSheet\n \nextends\n \nBottomSheetDialogFragment\n \n{\n\n\n    \nstatic\n \nBottomSheetDialogFragment\n \nnewInstance\n()\n \n{\n\n        \nreturn\n \nnew\n \nBottomSheetDialogFragment\n();\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nView\n \nonCreateView\n(\n\n       \nLayoutInflater\n \ninflater\n,\n \nViewGroup\n \ncontainer\n,\n \nBundle\n \nsavedInstanceState\n)\n \n{\n\n\n        \nView\n \nv\n \n=\n \ninflater\n.\ninflate\n(\nR\n.\nlayout\n.\nbottom_sheet_modal\n,\n \ncontainer\n,\n \nfalse\n);\n\n\n        \nreturn\n \nv\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\nII. Create an instance of your modal bottom sheet and show it with the \nshow\n method with a \nSupportFragmentManager\n and a String as parameters.\n\n\nModalBottomSheet\n \nmodalBottomSheet\n \n=\n \nnew\n \nModalBottomSheet\n();\n\n\nmodalBottomSheet\n.\nshow\n(\ngetSupportFragmentManager\n(),\n \nbottom sheet\n);\n\n\n\n\n\n\nHow to anchor views?\n\n\n\n\nI. Add the view that will be anchored to the bottom sheet as a direct child of the \nCoordinatorLayout\n\n\nandroid.support.design.widget.FloatingActionButton\n\n    \nandroid:id=\n@+id/fab\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:layout_margin=\n@dimen/fab_margin\n\n    \nandroid:src=\n@android:drawable/ic_dialog_email\n\n    \n/\n\n\n\n\n\n\nII. Reference the id of the view wich has set the \nBottomSheetBehavior\n with the \nlayout_anchor\n attribute.\n\n\nandroid.support.design.widget.FloatingActionButton\n\n    \nandroid:id=\n@+id/fab\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:layout_margin=\n@dimen/fab_margin\n\n    \nandroid:src=\n@android:drawable/ic_dialog_email\n\n    \napp:layout_anchor=\n@id/app_bar\n\n    \n/\n\n\n\n\n\n\nIII. Configure the \nlayout_anchorGravity\n attribute with the desired gravity.\n\n\nandroid.support.design.widget.FloatingActionButton\n\n    \nandroid:id=\n@+id/fab\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:layout_margin=\n@dimen/fab_margin\n\n    \nandroid:src=\n@android:drawable/ic_dialog_email\n\n    \napp:layout_anchor=\n@id/app_bar\n\n    \napp:layout_anchorGravity=\nbottom|end\n\n    \n/", 
            "title": "Bottom sheets"
        }, 
        {
            "location": "/components/bottom-sheets/#bottom-sheets", 
            "text": "From google material design  documentation .  A bottom sheet is a sheet of material that slides up from the bottom edge of the screen.  Bottom sheets are displayed only as a result of a user-initiated action, and can be swiped up to reveal additional content. A bottom sheet can be a temporary modal surface or a persistent structural element of an app.", 
            "title": "Bottom Sheets"
        }, 
        {
            "location": "/components/bottom-sheets/#how-to-add", 
            "text": "I. In your  build.gradle  add latest  appcompat  and  design  libraries.  dependencies {\n    compile  com.android.support:appcompat-v7:X.X.X  // where X.X.X version\n    compile  com.android.support:design:X.X.X  // where X.X.X version\n}  II. Set the  app:layout_behavior  attribute with the value   @string/bottom_sheet_behavior  which will allow your view or viewgroup appear as a bottom sheet.  ?xml version= 1.0  encoding= utf-8 ?  LinearLayout \n     xmlns:android= http://schemas.android.com/apk/res/android \n     android:layout_width= match_parent \n     android:layout_height= 300dp \n     android:orientation= vertical \n     android:padding= 16dp \n     app:layout_behavior= @string/bottom_sheet_behavior \n\n     TextView \n         android:layout_width= wrap_content \n         android:layout_height= wrap_content \n         android:text= Dandelion Chocolate \n         android:textAppearance= @style/TextAppearance.AppCompat.Display1 \n         android:textColor= @android:color/black /  /LinearLayout    Note  You can use the  behavior_peekHeight  attribute to set the default height of the bottom sheet.   III. Add your view which implements the bottom sheet behavior as a direct child of a  CoordinatorLayout .  ?xml version= 1.0  encoding= utf-8 ?  android.support.design.widget.CoordinatorLayout \n     xmlns:android= http://schemas.android.com/apk/res/android \n     xmlns:tools= http://schemas.android.com/tools \n     xmlns:app= http://schemas.android.com/apk/res-auto \n     android:layout_width= match_parent \n     android:layout_height= match_parent \n     tools:context= .MainActivity   \n\n     android.support.design.widget.AppBarLayout \n         android:id= @+id/appbarLayout \n         android:layout_width= match_parent \n         android:layout_height= ?attr/actionBarSize \n         android:theme= @style/ThemeOverlay.AppCompat.Dark.ActionBar   \n\n         android.support.v7.widget.Toolbar \n             android:id= @+id/appbar \n             android:layout_height= ?attr/actionBarSize \n             android:layout_width= match_parent \n             android:minHeight= ?attr/actionBarSize \n             android:background= ?attr/colorPrimary \n             app:elevation= 4dp \n             android:theme= @style/ThemeOverlay.AppCompat.Dark.ActionBar \n             app:popupTheme= @style/ThemeOverlay.AppCompat.Light   \n\n         /android.support.v7.widget.Toolbar \n\n     /android.support.design.widget.AppBarLayout \n\n     !-- Your content -- \n     include   layout= @layout/content_main   / \n\n     !-- Bottom Sheet -- \n     include   layout= @layout/bottom_sheets_main   /  /android.support.design.widget.CoordinatorLayout    Note  You can wrap your views and viewgroups under  include  tags in order to keep clean your layouts.   IV. Get a reference of  BottomSheetBehavior  with a reference of  the view which has the bottom behavior set. Use the  from  method of  BottomSheetBehavior .  LinearLayout   bottomSheetViewgroup   =   ( LinearLayout )   findViewById ( R . id . bottom_sheet );  BottomSheetBehavior   bottomSheetBehavior   =   BottomSheetBehavior . from ( bottomSheetViewgroup );   VI. To expand your bottom sheet use  setState  method with  BottomSheetBehavior.STATE_EXPANDED  parameter.  bottomSheetBehavior . setState ( BottomSheetBehavior . STATE_EXPANDED );   You can handle these states via the  setState  method:   STATE_EXPANDED : To completely expand the bottom sheet.  STATE_HIDE : To completely hide the bottom sheet.  STATE_COLLAPSED : To set the bottom sheet height with the value set on the  peekHeight  attribute.", 
            "title": "How to add?"
        }, 
        {
            "location": "/components/bottom-sheets/#modal-bottom-sheets", 
            "text": "From google material design  documentation .  Modal bottom sheets are alternatives to menus or simple dialogs. They can also present deep-linked content from other apps. They are primarily for mobile.   I. Create a class extending the  BottomSheetDialogFragment  inflated with a layout which will be used as the content of your modal bottom sheet.  public   class   ModalBottomSheet   extends   BottomSheetDialogFragment   { \n\n     static   BottomSheetDialogFragment   newInstance ()   { \n         return   new   BottomSheetDialogFragment (); \n     } \n\n     @Override \n     public   View   onCreateView ( \n        LayoutInflater   inflater ,   ViewGroup   container ,   Bundle   savedInstanceState )   { \n\n         View   v   =   inflater . inflate ( R . layout . bottom_sheet_modal ,   container ,   false ); \n\n         return   v ; \n     }  }   II. Create an instance of your modal bottom sheet and show it with the  show  method with a  SupportFragmentManager  and a String as parameters.  ModalBottomSheet   modalBottomSheet   =   new   ModalBottomSheet ();  modalBottomSheet . show ( getSupportFragmentManager (),   bottom sheet );", 
            "title": "Modal bottom sheets"
        }, 
        {
            "location": "/components/bottom-sheets/#how-to-anchor-views", 
            "text": "I. Add the view that will be anchored to the bottom sheet as a direct child of the  CoordinatorLayout  android.support.design.widget.FloatingActionButton \n     android:id= @+id/fab \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:layout_margin= @dimen/fab_margin \n     android:src= @android:drawable/ic_dialog_email \n     /   II. Reference the id of the view wich has set the  BottomSheetBehavior  with the  layout_anchor  attribute.  android.support.design.widget.FloatingActionButton \n     android:id= @+id/fab \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:layout_margin= @dimen/fab_margin \n     android:src= @android:drawable/ic_dialog_email \n     app:layout_anchor= @id/app_bar \n     /   III. Configure the  layout_anchorGravity  attribute with the desired gravity.  android.support.design.widget.FloatingActionButton \n     android:id= @+id/fab \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:layout_margin= @dimen/fab_margin \n     android:src= @android:drawable/ic_dialog_email \n     app:layout_anchor= @id/app_bar \n     app:layout_anchorGravity= bottom|end \n     /", 
            "title": "How to anchor views?"
        }, 
        {
            "location": "/components/cards/", 
            "text": "Cards\n\n\n\n\n\n\n\u6458\u81ea Google material design \n\u6587\u6863\n\ncard \u53ef\u4ee5\u7528\u6765\u5c55\u793a\u4e00\u4e9b\u72ec\u7279\u76f8\u5173\u7684\u6570\u636e\uff0c\u7528\u6765\u4f5c\u4e3a\u66f4\u52a0\u8be6\u7ec6\u7684\u4fe1\u606f\u7684\u5165\u53e3\u3002\u4f8b\u5982\uff0c\u5361\u7247\u53ef\u80fd\u5305\u542b\u6709\u7167\u7247\uff0c\u6587\u5b57\uff0c\u5173\u4e8e\u4e00\u4e2a\u4e3b\u9898\u7684\u94fe\u63a5\u7b49\u3002\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0\uff1f\n\n\nI. \u5728 \nbuild.gradle\n \u91cc\u5f15\u5165 \ncardview\n \u5e93\u3002\n\n\ndependencies\n \n{\n\n  \ncompile\n \ncom.android.support:cardview-v7:X.X.X\n \n// where X.X.X version\n\n\n}\n\n\n\n\n\n\nII. \u5728 \nlayout.xml\n \u91cc\u58f0\u660e card \uff0c\u5e76\u7528\u5b83\u5305\u88f9\u5176\u4ed6\u7684 view \u3002\n\n\nandroid.support.v7.widget.CardView\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\n200dp\n\n\n    \nTextView\n\n        \nandroid:text=\nHello World!\n\n        \nandroid:layout_width=\nwrap_content\n\n        \nandroid:layout_height=\nwrap_content\n/\n\n\n\n/android.support.v7.widget.CardView\n\n\n\n\n\n\n\n\n\u6ce8\u610f\n\n\n\u7ed9 CardView \u7684\u7236\u5e03\u5c40\u589e\u52a0\u5c5e\u6027 \nandroid:clipToPadding=\"false\"\n \uff0c\u53ef\u4ee5\u4fdd\u8bc1 CardView \u7684\u9634\u5f71\u4e0d\u88ab\u88c1\u526a\u6389\u3002\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f\uff1f\n\n\n\n\nI. \u5728 \nstyles.xml\n \u6587\u4ef6\u91cc\u58f0\u660e\u4f60\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002\n\n\nstyle\n \nname=\nMyCardViewStyle\n \nparent=\nTheme.AppCompat.Light\n\n    \nitem\n \nname=\ncardCornerRadius\n2dp\n/item\n\n    \nitem\n \nname=\ncardElevation\n2dp\n/item\n\n    \nitem\n \nname=\ncontentPaddingBottom\n24dp\n/item\n\n    \nitem\n \nname=\ncontentPaddingTop\n24dp\n/item\n\n    \nitem\n \nname=\ncontentPaddingLeft\n16dp\n/item\n\n    \nitem\n \nname=\ncontentPaddingRight\n16dp\n/item\n\n    \nitem\n \nname=\ncardBackgroundColor\n@color/indigo\n/item\n\n\n/style\n\n\n\n\n\n\nII. \u8bbe\u7f6e\u4f60\u7684 CardView \u7684 \nstyle\n \u5c5e\u6027\u503c\u4e3a\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002\n\n\nandroid.support.v7.widget.CardView\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nstyle=\n@style/MyCardViewStyle\n\n\n\n\n\n\n\n\n\u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\n\n\n\u539f\u6587\u94fe\u63a5 https://materialdoc.com/components/cards/", 
            "title": "Cards"
        }, 
        {
            "location": "/components/cards/#cards", 
            "text": "\u6458\u81ea Google material design  \u6587\u6863 \ncard \u53ef\u4ee5\u7528\u6765\u5c55\u793a\u4e00\u4e9b\u72ec\u7279\u76f8\u5173\u7684\u6570\u636e\uff0c\u7528\u6765\u4f5c\u4e3a\u66f4\u52a0\u8be6\u7ec6\u7684\u4fe1\u606f\u7684\u5165\u53e3\u3002\u4f8b\u5982\uff0c\u5361\u7247\u53ef\u80fd\u5305\u542b\u6709\u7167\u7247\uff0c\u6587\u5b57\uff0c\u5173\u4e8e\u4e00\u4e2a\u4e3b\u9898\u7684\u94fe\u63a5\u7b49\u3002", 
            "title": "Cards"
        }, 
        {
            "location": "/components/cards/#_1", 
            "text": "I. \u5728  build.gradle  \u91cc\u5f15\u5165  cardview  \u5e93\u3002  dependencies   { \n   compile   com.android.support:cardview-v7:X.X.X   // where X.X.X version  }   II. \u5728  layout.xml  \u91cc\u58f0\u660e card \uff0c\u5e76\u7528\u5b83\u5305\u88f9\u5176\u4ed6\u7684 view \u3002  android.support.v7.widget.CardView \n     android:layout_width= match_parent \n     android:layout_height= 200dp \n\n     TextView \n         android:text= Hello World! \n         android:layout_width= wrap_content \n         android:layout_height= wrap_content /  /android.support.v7.widget.CardView    \u6ce8\u610f  \u7ed9 CardView \u7684\u7236\u5e03\u5c40\u589e\u52a0\u5c5e\u6027  android:clipToPadding=\"false\"  \uff0c\u53ef\u4ee5\u4fdd\u8bc1 CardView \u7684\u9634\u5f71\u4e0d\u88ab\u88c1\u526a\u6389\u3002", 
            "title": "\u5982\u4f55\u6dfb\u52a0\uff1f"
        }, 
        {
            "location": "/components/cards/#_2", 
            "text": "I. \u5728  styles.xml  \u6587\u4ef6\u91cc\u58f0\u660e\u4f60\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002  style   name= MyCardViewStyle   parent= Theme.AppCompat.Light \n     item   name= cardCornerRadius 2dp /item \n     item   name= cardElevation 2dp /item \n     item   name= contentPaddingBottom 24dp /item \n     item   name= contentPaddingTop 24dp /item \n     item   name= contentPaddingLeft 16dp /item \n     item   name= contentPaddingRight 16dp /item \n     item   name= cardBackgroundColor @color/indigo /item  /style   II. \u8bbe\u7f6e\u4f60\u7684 CardView \u7684  style  \u5c5e\u6027\u503c\u4e3a\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002  android.support.v7.widget.CardView \n     android:layout_width= match_parent \n     android:layout_height= wrap_content \n     style= @style/MyCardViewStyle    \u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63  \u539f\u6587\u94fe\u63a5 https://materialdoc.com/components/cards/", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f\uff1f"
        }, 
        {
            "location": "/components/dialogs/", 
            "text": "Dialogs\n\n\nAlerts\n\n\n\n\n\n\n\u6458\u81ea Google material design \n\u6587\u6863\n\n\nAlerts \u7528\u5728\u9700\u8981\u544a\u77e5\u7528\u6237\u4e00\u4e9b\u60c5\u51b5\u4fe1\u606f\u7684\u65f6\u5019\uff0c\u662f\u4e00\u79cd\u7d27\u6025\u4e2d\u65ad\uff0c\u9700\u8981\u7528\u6237\u786e\u8ba4\u64cd\u4f5c\u3002\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0\uff1f\n\n\nI. \u5728\u4f60\u7684 \nbuild.gradle\n \u6dfb\u52a0\u6700\u65b0\u7248\u672c\u7684 \nappcompat\n \u5e93\u3002\n\n\ndependencies\n \n{\n\n    \ncompile\n \ncom.android.support:appcompat-v7:X.X.X\n \n// where X.X.X version\n\n\n}\n\n\n\n\n\n\nII. \u4f7f\u4f60\u7684 Activity \u7ee7\u627f\u81ea \nandroid.support.v7.app.AppCompatActivity\n \u3002\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n    \n...\n\n\n}\n\n\n\n\n\n\nIII. \u7528 \nandroid.support.v7.app.AlertDialog.Builder\n \u521b\u5efa\u4f60\u7684 dialog \u3002\n\n\nprivate\n \nvoid\n \nshowLocationDialog\n()\n \n{\n\n    \nAlertDialog\n.\nBuilder\n \nbuilder\n \n=\n \nnew\n \nAlertDialog\n.\nBuilder\n(\nMainActivity\n.\nthis\n);\n\n    \nbuilder\n.\nsetTitle\n(\ngetString\n(\nR\n.\nstring\n.\ndialog_title\n));\n\n    \nbuilder\n.\nsetMessage\n(\ngetString\n(\nR\n.\nstring\n.\ndialog_message\n));\n\n\n    \nString\n \npositiveText\n \n=\n \ngetString\n(\nandroid\n.\nR\n.\nstring\n.\nok\n);\n\n    \nbuilder\n.\nsetPositiveButton\n(\npositiveText\n,\n\n            \nnew\n \nDialogInterface\n.\nOnClickListener\n()\n \n{\n\n        \n@Override\n\n        \npublic\n \nvoid\n \nonClick\n(\nDialogInterface\n \ndialog\n,\n \nint\n \nwhich\n)\n \n{\n\n            \n// positive button logic\n\n        \n}\n\n    \n});\n\n\n    \nString\n \nnegativeText\n \n=\n \ngetString\n(\nandroid\n.\nR\n.\nstring\n.\ncancel\n);\n\n    \nbuilder\n.\nsetNegativeButton\n(\nnegativeText\n,\n\n            \nnew\n \nDialogInterface\n.\nOnClickListener\n()\n \n{\n\n        \n@Override\n\n        \npublic\n \nvoid\n \nonClick\n(\nDialogInterface\n \ndialog\n,\n \nint\n \nwhich\n)\n \n{\n\n            \n// negative button logic\n\n        \n}\n\n    \n});\n\n\n    \nAlertDialog\n \ndialog\n \n=\n \nbuilder\n.\ncreate\n();\n\n    \n// display dialog\n\n    \ndialog\n.\nshow\n();\n\n\n}\n\n\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f\n\n\n\n\nI. \u7ed9 dialog \u80cc\u666f\u58f0\u660e\u81ea\u5b9a\u4e49\u7684 \ndrawable.xml\n \u3002\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\n!-- From: support/v7/appcompat/res/drawable/abc_dialog_material_background_light.xml --\n\n\ninset\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \nandroid:insetLeft=\n16dp\n\n    \nandroid:insetTop=\n16dp\n\n    \nandroid:insetRight=\n16dp\n\n    \nandroid:insetBottom=\n16dp\n\n\n    \nshape\n \nandroid:shape=\nrectangle\n\n        \ncorners\n \nandroid:radius=\n2dp\n \n/\n\n        \nsolid\n \nandroid:color=\n@color/indigo\n \n/\n\n    \n/shape\n\n\n\n/inset\n\n\n\n\n\n\nII. \u5728 \nstyles.xml\n \u91cc\u58f0\u660e\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002\n\n\nstyle\n \nname=\nMyDialogTheme\n \nparent=\nTheme.AppCompat.Light.Dialog.Alert\n\n    \n!--buttons color--\n\n    \nitem\n \nname=\ncolorAccent\n@color/pink\n/item\n\n    \n!--title and message color--\n\n    \nitem\n \nname=\nandroid:textColorPrimary\n@android:color/white\n/item\n\n    \n!--dialog background--\n\n    \nitem\n \nname=\nandroid:windowBackground\n@drawable/background_dialog\n/item\n\n\n/style\n\n\n\n\n\n\nIII. \u628a\u4e0a\u9762\u5b9a\u4e49\u7684 \nstyle\n \u6837\u5f0f\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165 \nAlertDialog.Builder\n \u6765\u521b\u5efa dialog \u3002\n\n\nAlertDialog\n.\nBuilder\n \nbuilder\n \n=\n \nnew\n \nAlertDialog\n.\nBuilder\n(\nthis\n,\n \nR\n.\nstyle\n.\nMyDialogTheme\n);\n\n\n...\n\n\nAlertDialog\n \ndialog\n \n=\n \nbuilder\n.\ncreate\n();\n\n\n// display dialog\n\n\ndialog\n.\nshow\n();\n\n\n\n\n\n\n\n\n\u4f60\u540c\u6837\u53ef\u4ee5\u5728\u4f60\u7684 activity theme \u91cc\u901a\u8fc7 \nalertDialogTheme\n \u5c5e\u6027\u8bbe\u7f6e dialog \u7684\u6837\u5f0f\u3002\n\n\n\u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\n\n\n\u539f\u6587\u4f5c\u8005 Volodymyr Yatsykiv \u539f\u6587\u94fe\u63a5 \nAlerts\n\n\n\n\nConfirmation Dialogs\n\n\n\n\n\n\n\u6458\u81ea Google material design \n\u6587\u6863\n\n\n\u786e\u8ba4 dialogs \u9700\u8981\u7528\u6237\u5728\u63d0\u4ea4\u4e4b\u524d\u660e\u786e\u7684\u786e\u8ba4\u4ed6\u4eec\u9009\u62e9\u7684\u9009\u9879\u3002\u4f8b\u5982\uff0c\u7528\u6237\u53ef\u4ee5\u8bd5\u542c\u591a\u4e2a\u94c3\u58f0\uff0c\u4f46\u662f\u53ea\u6709\u70b9\u51fb \u201c\u786e\u5b9a\u201d \u624d\u662f\u6700\u7ec8\u9009\u62e9\u3002\n\n\n\u5728\u786e\u8ba4 dialogs \u4e2d\u70b9\u51fb \u201c\u53d6\u6d88\u201d \u6216\u8005\u6309\u4e0b\u8fd4\u56de\u952e\u4f1a\u53d6\u6d88\u4e00\u4e2a\u52a8\u4f5c\uff0c\u4e22\u5f03\u4efb\u4f55\u6539\u52a8\u548c\u5173\u95ed dialogs \u3002\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0?\n\n\nI. \u5728\u4f60\u7684 \nbuild.grade\n \u6587\u4ef6\u91cc\u6dfb\u52a0\u6700\u65b0\u7248\u672c\u7684 \nappcompat\n \u5e93\u3002\n\n\ndependencies\n \n{\n\n    \ncompile\n \ncom.android.support:appcompat-v7:X.X.X\n \n// where X.X.X version\n\n\n}\n\n\n\n\n\n\nII.\u4f7f\u4f60\u7684 activity \u7ee7\u627f\u81ea \nandroid.support.v7.app.AppCompatActivity\n.\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n    \n...\n\n\n}\n\n\n\n\n\n\nIII. \u4f7f\u7528 \nandroid.support.v7.app.AlertDialog.Builder\n \u521b\u5efa dialogs \u3002\n\n\n\u5355\u9009 dialogs\n\n\n\u5728\u4f60\u7684 \nbuilder\n \u5bf9\u8c61\u4e0a\u4f7f\u7528 \nsetSingleChoiceItems\n \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u5355\u9009\u5217\u8868 dialogs \u3002\n\n\npublic\n \nvoid\n \nshowDialog\n()\n \n{\n\n    \nAlertDialog\n.\nBuilder\n \nbuilder\n \n=\n \nnew\n \nAlertDialog\n.\nBuilder\n(\nMainActivity\n.\nthis\n);\n\n    \nbuilder\n.\nsetTitle\n(\nR\n.\nstring\n.\ndialog_title\n);\n\n\n    \n//list of items\n\n    \nString\n[]\n \nitems\n \n=\n \ngetResources\n().\ngetStringArray\n(\nR\n.\narray\n.\nringtone_list\n);\n\n    \nbuilder\n.\nsetSingleChoiceItems\n(\nitems\n,\n \n0\n,\n\n            \nnew\n \nDialogInterface\n.\nOnClickListener\n()\n \n{\n\n        \n@Override\n\n        \npublic\n \nvoid\n \nonClick\n(\nDialogInterface\n \ndialog\n,\n \nint\n \nwhich\n)\n \n{\n\n            \n// item selected logic\n\n        \n}\n\n    \n});\n\n\n    \nString\n \npositiveText\n \n=\n \ngetString\n(\nandroid\n.\nR\n.\nstring\n.\nok\n);\n\n    \nbuilder\n.\nsetPositiveButton\n(\npositiveText\n,\n\n            \nnew\n \nDialogInterface\n.\nOnClickListener\n()\n \n{\n\n        \n@Override\n\n        \npublic\n \nvoid\n \nonClick\n(\nDialogInterface\n \ndialog\n,\n \nint\n \nwhich\n)\n \n{\n\n            \n// positive button logic\n\n        \n}\n\n    \n});\n\n\n    \nString\n \nnegativeText\n \n=\n \ngetString\n(\nandroid\n.\nR\n.\nstring\n.\ncancel\n);\n\n    \nbuilder\n.\nsetNegativeButton\n(\nnegativeText\n,\n\n            \nnew\n \nDialogInterface\n.\nOnClickListener\n()\n \n{\n\n        \n@Override\n\n        \npublic\n \nvoid\n \nonClick\n(\nDialogInterface\n \ndialog\n,\n \nint\n \nwhich\n)\n \n{\n\n            \n// negative button logic\n\n        \n}\n\n    \n});\n\n\n    \nAlertDialog\n \ndialog\n \n=\n \nbuilder\n.\ncreate\n();\n\n    \n// display dialog\n\n    \ndialog\n.\nshow\n();\n\n\n}\n\n\n\n\n\n\n\u591a\u9009 dialogs\n\n\n\u5728\u4f60\u7684 \nbuilder\n \u5bf9\u8c61\u4e0a\u4f7f\u7528 \nsetMultiChoiceItems\n \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u591a\u9009\u5217\u8868 dialogs \u3002\n\n\nbuilder\n.\nsetMultiChoiceItems\n(\nitems\n,\n \nselectedItemsArray\n,\n\n        \nnew\n \nDialogInterface\n.\nOnMultiChoiceClickListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonClick\n(\nDialogInterface\n \ndialog\n,\n \nint\n \nwhich\n,\n \nboolean\n \nisChecked\n)\n \n{\n\n        \n//item checked logic\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f\uff1f\n\n\n\n\nI. \u58f0\u660e\u81ea\u5b9a\u4e49\u7684 dialogs \u80cc\u666f \ndrawable.xml\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\n!-- From: support/v7/appcompat/res/drawable/abc_dialog_material_background_light.xml --\n\n\ninset\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \nandroid:insetLeft=\n16dp\n\n    \nandroid:insetTop=\n16dp\n\n    \nandroid:insetRight=\n16dp\n\n    \nandroid:insetBottom=\n16dp\n\n\n    \nshape\n \nandroid:shape=\nrectangle\n\n        \ncorners\n \nandroid:radius=\n2dp\n \n/\n\n        \nsolid\n \nandroid:color=\n@color/indigo\n \n/\n\n    \n/shape\n\n\n\n/inset\n\n\n\n\n\n\nII. \u5728\u4f60\u7684 \nstyles.xml\n \u6587\u4ef6\u91cc\u58f0\u660e\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002\n\n\nstyle\n \nname=\nMyDialogTheme\n \nparent=\nTheme.AppCompat.Light.Dialog.Alert\n\n    \n!--item RadioButton or CheckBox color--\n\n    \nitem\n \nname=\ncolorControlNormal\n@android:color/white\n/item\n\n    \nitem\n \nname=\ncolorControlActivated\n@color/pink\n/item\n\n    \n!--item text color--\n\n    \nitem\n \nname=\ntextColorAlertDialogListItem\n@android:color/white\n/item\n\n    \n!--buttons color--\n\n    \nitem\n \nname=\ncolorAccent\n@color/pink\n/item\n\n    \n!--title and message color--\n\n    \nitem\n \nname=\nandroid:textColorPrimary\n@android:color/white\n/item\n\n    \n!--dialog background--\n\n    \nitem\n \nname=\nandroid:windowBackground\n@drawable/background_dialog\n/item\n\n\n/style\n\n\n\n\n\n\nIII. \u4f7f\u7528\u6837\u5f0f\u4f5c\u4e3a \nAlertDialog.Builder\n \u7684\u53c2\u6570\u6765\u521b\u5efa\u4f60\u7684 dialogs \u3002\n\n\nAlertDialog\n.\nBuilder\n \nbuilder\n \n=\n\n        \nnew\n \nAlertDialog\n.\nBuilder\n(\nthis\n,\n \nR\n.\nstyle\n.\nMyDialogTheme\n);\n\n\n...\n\n\nAlertDialog\n \ndialog\n \n=\n \nbuilder\n.\ncreate\n();\n\n\n// display dialog\n\n\ndialog\n.\nshow\n();\n\n\n\n\n\n\n\n\n\u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\n\n\n\u539f\u6587\u4f5c\u8005\uff1aVolodymyr Yatsykiv \u539f\u6587\u5730\u5740\uff1a\nConfirmation Dialog", 
            "title": "Dialogs"
        }, 
        {
            "location": "/components/dialogs/#dialogs", 
            "text": "", 
            "title": "Dialogs"
        }, 
        {
            "location": "/components/dialogs/#alerts", 
            "text": "\u6458\u81ea Google material design  \u6587\u6863  Alerts \u7528\u5728\u9700\u8981\u544a\u77e5\u7528\u6237\u4e00\u4e9b\u60c5\u51b5\u4fe1\u606f\u7684\u65f6\u5019\uff0c\u662f\u4e00\u79cd\u7d27\u6025\u4e2d\u65ad\uff0c\u9700\u8981\u7528\u6237\u786e\u8ba4\u64cd\u4f5c\u3002", 
            "title": "Alerts"
        }, 
        {
            "location": "/components/dialogs/#_1", 
            "text": "I. \u5728\u4f60\u7684  build.gradle  \u6dfb\u52a0\u6700\u65b0\u7248\u672c\u7684  appcompat  \u5e93\u3002  dependencies   { \n     compile   com.android.support:appcompat-v7:X.X.X   // where X.X.X version  }   II. \u4f7f\u4f60\u7684 Activity \u7ee7\u627f\u81ea  android.support.v7.app.AppCompatActivity  \u3002  public   class   MainActivity   extends   AppCompatActivity   { \n     ...  }   III. \u7528  android.support.v7.app.AlertDialog.Builder  \u521b\u5efa\u4f60\u7684 dialog \u3002  private   void   showLocationDialog ()   { \n     AlertDialog . Builder   builder   =   new   AlertDialog . Builder ( MainActivity . this ); \n     builder . setTitle ( getString ( R . string . dialog_title )); \n     builder . setMessage ( getString ( R . string . dialog_message )); \n\n     String   positiveText   =   getString ( android . R . string . ok ); \n     builder . setPositiveButton ( positiveText , \n             new   DialogInterface . OnClickListener ()   { \n         @Override \n         public   void   onClick ( DialogInterface   dialog ,   int   which )   { \n             // positive button logic \n         } \n     }); \n\n     String   negativeText   =   getString ( android . R . string . cancel ); \n     builder . setNegativeButton ( negativeText , \n             new   DialogInterface . OnClickListener ()   { \n         @Override \n         public   void   onClick ( DialogInterface   dialog ,   int   which )   { \n             // negative button logic \n         } \n     }); \n\n     AlertDialog   dialog   =   builder . create (); \n     // display dialog \n     dialog . show ();  }", 
            "title": "\u5982\u4f55\u6dfb\u52a0\uff1f"
        }, 
        {
            "location": "/components/dialogs/#_2", 
            "text": "I. \u7ed9 dialog \u80cc\u666f\u58f0\u660e\u81ea\u5b9a\u4e49\u7684  drawable.xml  \u3002  ?xml version= 1.0  encoding= utf-8 ?  !-- From: support/v7/appcompat/res/drawable/abc_dialog_material_background_light.xml --  inset   xmlns:android= http://schemas.android.com/apk/res/android \n     android:insetLeft= 16dp \n     android:insetTop= 16dp \n     android:insetRight= 16dp \n     android:insetBottom= 16dp \n\n     shape   android:shape= rectangle \n         corners   android:radius= 2dp   / \n         solid   android:color= @color/indigo   / \n     /shape  /inset   II. \u5728  styles.xml  \u91cc\u58f0\u660e\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002  style   name= MyDialogTheme   parent= Theme.AppCompat.Light.Dialog.Alert \n     !--buttons color-- \n     item   name= colorAccent @color/pink /item \n     !--title and message color-- \n     item   name= android:textColorPrimary @android:color/white /item \n     !--dialog background-- \n     item   name= android:windowBackground @drawable/background_dialog /item  /style   III. \u628a\u4e0a\u9762\u5b9a\u4e49\u7684  style  \u6837\u5f0f\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165  AlertDialog.Builder  \u6765\u521b\u5efa dialog \u3002  AlertDialog . Builder   builder   =   new   AlertDialog . Builder ( this ,   R . style . MyDialogTheme );  ...  AlertDialog   dialog   =   builder . create ();  // display dialog  dialog . show ();    \u4f60\u540c\u6837\u53ef\u4ee5\u5728\u4f60\u7684 activity theme \u91cc\u901a\u8fc7  alertDialogTheme  \u5c5e\u6027\u8bbe\u7f6e dialog \u7684\u6837\u5f0f\u3002  \u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63  \u539f\u6587\u4f5c\u8005 Volodymyr Yatsykiv \u539f\u6587\u94fe\u63a5  Alerts", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f"
        }, 
        {
            "location": "/components/dialogs/#confirmation-dialogs", 
            "text": "\u6458\u81ea Google material design  \u6587\u6863  \u786e\u8ba4 dialogs \u9700\u8981\u7528\u6237\u5728\u63d0\u4ea4\u4e4b\u524d\u660e\u786e\u7684\u786e\u8ba4\u4ed6\u4eec\u9009\u62e9\u7684\u9009\u9879\u3002\u4f8b\u5982\uff0c\u7528\u6237\u53ef\u4ee5\u8bd5\u542c\u591a\u4e2a\u94c3\u58f0\uff0c\u4f46\u662f\u53ea\u6709\u70b9\u51fb \u201c\u786e\u5b9a\u201d \u624d\u662f\u6700\u7ec8\u9009\u62e9\u3002  \u5728\u786e\u8ba4 dialogs \u4e2d\u70b9\u51fb \u201c\u53d6\u6d88\u201d \u6216\u8005\u6309\u4e0b\u8fd4\u56de\u952e\u4f1a\u53d6\u6d88\u4e00\u4e2a\u52a8\u4f5c\uff0c\u4e22\u5f03\u4efb\u4f55\u6539\u52a8\u548c\u5173\u95ed dialogs \u3002", 
            "title": "Confirmation Dialogs"
        }, 
        {
            "location": "/components/dialogs/#_3", 
            "text": "I. \u5728\u4f60\u7684  build.grade  \u6587\u4ef6\u91cc\u6dfb\u52a0\u6700\u65b0\u7248\u672c\u7684  appcompat  \u5e93\u3002  dependencies   { \n     compile   com.android.support:appcompat-v7:X.X.X   // where X.X.X version  }   II.\u4f7f\u4f60\u7684 activity \u7ee7\u627f\u81ea  android.support.v7.app.AppCompatActivity .  public   class   MainActivity   extends   AppCompatActivity   { \n     ...  }   III. \u4f7f\u7528  android.support.v7.app.AlertDialog.Builder  \u521b\u5efa dialogs \u3002", 
            "title": "\u5982\u4f55\u6dfb\u52a0?"
        }, 
        {
            "location": "/components/dialogs/#dialogs_1", 
            "text": "\u5728\u4f60\u7684  builder  \u5bf9\u8c61\u4e0a\u4f7f\u7528  setSingleChoiceItems  \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u5355\u9009\u5217\u8868 dialogs \u3002  public   void   showDialog ()   { \n     AlertDialog . Builder   builder   =   new   AlertDialog . Builder ( MainActivity . this ); \n     builder . setTitle ( R . string . dialog_title ); \n\n     //list of items \n     String []   items   =   getResources (). getStringArray ( R . array . ringtone_list ); \n     builder . setSingleChoiceItems ( items ,   0 , \n             new   DialogInterface . OnClickListener ()   { \n         @Override \n         public   void   onClick ( DialogInterface   dialog ,   int   which )   { \n             // item selected logic \n         } \n     }); \n\n     String   positiveText   =   getString ( android . R . string . ok ); \n     builder . setPositiveButton ( positiveText , \n             new   DialogInterface . OnClickListener ()   { \n         @Override \n         public   void   onClick ( DialogInterface   dialog ,   int   which )   { \n             // positive button logic \n         } \n     }); \n\n     String   negativeText   =   getString ( android . R . string . cancel ); \n     builder . setNegativeButton ( negativeText , \n             new   DialogInterface . OnClickListener ()   { \n         @Override \n         public   void   onClick ( DialogInterface   dialog ,   int   which )   { \n             // negative button logic \n         } \n     }); \n\n     AlertDialog   dialog   =   builder . create (); \n     // display dialog \n     dialog . show ();  }", 
            "title": "\u5355\u9009 dialogs"
        }, 
        {
            "location": "/components/dialogs/#dialogs_2", 
            "text": "\u5728\u4f60\u7684  builder  \u5bf9\u8c61\u4e0a\u4f7f\u7528  setMultiChoiceItems  \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u591a\u9009\u5217\u8868 dialogs \u3002  builder . setMultiChoiceItems ( items ,   selectedItemsArray , \n         new   DialogInterface . OnMultiChoiceClickListener ()   { \n     @Override \n     public   void   onClick ( DialogInterface   dialog ,   int   which ,   boolean   isChecked )   { \n         //item checked logic \n     }  });", 
            "title": "\u591a\u9009 dialogs"
        }, 
        {
            "location": "/components/dialogs/#_4", 
            "text": "I. \u58f0\u660e\u81ea\u5b9a\u4e49\u7684 dialogs \u80cc\u666f  drawable.xml  ?xml version= 1.0  encoding= utf-8 ?  !-- From: support/v7/appcompat/res/drawable/abc_dialog_material_background_light.xml --  inset   xmlns:android= http://schemas.android.com/apk/res/android \n     android:insetLeft= 16dp \n     android:insetTop= 16dp \n     android:insetRight= 16dp \n     android:insetBottom= 16dp \n\n     shape   android:shape= rectangle \n         corners   android:radius= 2dp   / \n         solid   android:color= @color/indigo   / \n     /shape  /inset   II. \u5728\u4f60\u7684  styles.xml  \u6587\u4ef6\u91cc\u58f0\u660e\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002  style   name= MyDialogTheme   parent= Theme.AppCompat.Light.Dialog.Alert \n     !--item RadioButton or CheckBox color-- \n     item   name= colorControlNormal @android:color/white /item \n     item   name= colorControlActivated @color/pink /item \n     !--item text color-- \n     item   name= textColorAlertDialogListItem @android:color/white /item \n     !--buttons color-- \n     item   name= colorAccent @color/pink /item \n     !--title and message color-- \n     item   name= android:textColorPrimary @android:color/white /item \n     !--dialog background-- \n     item   name= android:windowBackground @drawable/background_dialog /item  /style   III. \u4f7f\u7528\u6837\u5f0f\u4f5c\u4e3a  AlertDialog.Builder  \u7684\u53c2\u6570\u6765\u521b\u5efa\u4f60\u7684 dialogs \u3002  AlertDialog . Builder   builder   = \n         new   AlertDialog . Builder ( this ,   R . style . MyDialogTheme );  ...  AlertDialog   dialog   =   builder . create ();  // display dialog  dialog . show ();    \u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63  \u539f\u6587\u4f5c\u8005\uff1aVolodymyr Yatsykiv \u539f\u6587\u5730\u5740\uff1a Confirmation Dialog", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f\uff1f"
        }, 
        {
            "location": "/components/menus/", 
            "text": "Menus\n\n\n\n\n\n\nFrom the google material design \ndocumentation\n\n\nMenus allow users to take an action by selecting from a list of choices revealed upon opening a temporary, new sheet of material.\n\n\n\n\nHow to add?\n\n\nI. In your \nbuild.gradle\n add latest \nappcompat\n library.\n\n\ndependencies {\n    compile \ncom.android.support:appcompat-v7:X.X.X\n\n    // where X.X.X version\n}\n\n\n\n\n\nII. Make your activity extend \nandroid.support.v7.app.AppCompatActivity\n.\n\n\npublic\n \nclass\n \nMyActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n   \n...\n\n\n}\n\n\n\n\n\n\nIII. Create a menu file inside the \nres/menu\n folder with some items on it.\n\n\nmenu\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n      \nxmlns:app=\nhttp://schemas.android.com/apk/res-auto\n\n      \nxmlns:tools=\nhttp://schemas.android.com/tools\n\n      \ntools:context=\ncom.example.saulmm.myapplication.MainActivity\n\n\n    \nitem\n\n        \nandroid:id=\n@+id/action_refresh\n\n        \nandroid:title=\n@string/action_refresh\n\n        \napp:showAsAction=\nnever\n/\n\n\n    \nitem\n\n        \nandroid:id=\n@+id/action_feedback\n\n        \nandroid:title=\n@string/action_feedback\n\n        \napp:showAsAction=\nnever\n/\n\n\n    \nitem\n\n        \nandroid:id=\n@+id/action_settings\n\n        \nandroid:title=\n@string/action_settings\n\n        \napp:showAsAction=\nnever\n/\n\n\n    \nitem\n\n        \nandroid:id=\n@+id/action_leave\n\n        \nandroid:title=\n@string/action_leave\n\n        \napp:showAsAction=\nnever\n/\n\n\n/menu\n\n\n\n\n\n\nIV. Override activity \nonCreateOptionsMenu\n method and inflate menu resource.\n\n\n@Override\n\n\npublic\n \nboolean\n \nonCreateOptionsMenu\n(\nMenu\n \nmenu\n)\n \n{\n\n    \ngetMenuInflater\n().\ninflate\n(\nR\n.\nmenu\n.\nmenu_main\n,\n \nmenu\n);\n\n    \nreturn\n \ntrue\n;\n\n\n}\n\n\n\n\n\n\nHow to style?\n\n\n\n\nI. Declare a custom style extending the \nThemeOverlay.AppCompat.Dark\n theme in your \nstyle.xml\n file.\n\n\nstyle\n \nname=\nMyPopupTheme\n \nparent=\nThemeOverlay.AppCompat.Dark\n\n    \nitem\n \nname=\nandroid:colorControlActivated\n@color/red \n/item\n\n    \nitem\n \nname=\nandroid:colorControlHighlight\n@color/red\n/item\n\n    \nitem\n \nname=\nandroid:colorControlNormal\n@color/yellow\n/item\n\n    \nitem\n \nname=\nandroid:textColorPrimary\n@color/yellow\n/item\n\n\n/style\n\n\n\n\n\n\nII. Apply this style to your \nToolbar\n via \napp:popupTheme\n.\n\n\nandroid.support.v7.widget.Toolbar\n\n    \nandroid:id=\n@+id/toolbar\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\n?attr/actionBarSize\n\n    \napp:popupTheme=\n@style/MyPopupTheme\n \n/", 
            "title": "Menus"
        }, 
        {
            "location": "/components/menus/#menus", 
            "text": "From the google material design  documentation  Menus allow users to take an action by selecting from a list of choices revealed upon opening a temporary, new sheet of material.", 
            "title": "Menus"
        }, 
        {
            "location": "/components/menus/#how-to-add", 
            "text": "I. In your  build.gradle  add latest  appcompat  library.  dependencies {\n    compile  com.android.support:appcompat-v7:X.X.X \n    // where X.X.X version\n}  II. Make your activity extend  android.support.v7.app.AppCompatActivity .  public   class   MyActivity   extends   AppCompatActivity   { \n    ...  }   III. Create a menu file inside the  res/menu  folder with some items on it.  menu   xmlns:android= http://schemas.android.com/apk/res/android \n       xmlns:app= http://schemas.android.com/apk/res-auto \n       xmlns:tools= http://schemas.android.com/tools \n       tools:context= com.example.saulmm.myapplication.MainActivity \n\n     item \n         android:id= @+id/action_refresh \n         android:title= @string/action_refresh \n         app:showAsAction= never / \n\n     item \n         android:id= @+id/action_feedback \n         android:title= @string/action_feedback \n         app:showAsAction= never / \n\n     item \n         android:id= @+id/action_settings \n         android:title= @string/action_settings \n         app:showAsAction= never / \n\n     item \n         android:id= @+id/action_leave \n         android:title= @string/action_leave \n         app:showAsAction= never /  /menu   IV. Override activity  onCreateOptionsMenu  method and inflate menu resource.  @Override  public   boolean   onCreateOptionsMenu ( Menu   menu )   { \n     getMenuInflater (). inflate ( R . menu . menu_main ,   menu ); \n     return   true ;  }", 
            "title": "How to add?"
        }, 
        {
            "location": "/components/menus/#how-to-style", 
            "text": "I. Declare a custom style extending the  ThemeOverlay.AppCompat.Dark  theme in your  style.xml  file.  style   name= MyPopupTheme   parent= ThemeOverlay.AppCompat.Dark \n     item   name= android:colorControlActivated @color/red  /item \n     item   name= android:colorControlHighlight @color/red /item \n     item   name= android:colorControlNormal @color/yellow /item \n     item   name= android:textColorPrimary @color/yellow /item  /style   II. Apply this style to your  Toolbar  via  app:popupTheme .  android.support.v7.widget.Toolbar \n     android:id= @+id/toolbar \n     android:layout_width= match_parent \n     android:layout_height= ?attr/actionBarSize \n     app:popupTheme= @style/MyPopupTheme   /", 
            "title": "How to style?"
        }, 
        {
            "location": "/components/pickers/", 
            "text": "Pickers\n\n\nDate Picker\n\n\n\n\n\n\n\u6458\u81ea Google Material Design \n\u6587\u6863\n\n\n\u5bf9\u8bdd\u6846\u9009\u62e9\u5668\u7528\u6765\u5728\u624b\u673a\u4e0a\u9009\u62e9\u65e5\u671f\u3002\n\n\n\u88ab\u9009\u4e2d\u7684\u4e00\u5929\uff0c\u7528\u4e0e\u5176\u4ed6\u65e5\u671f\u4e0d\u540c\u7684\u989c\u8272\u548c\u7740\u91cd\u7c7b\u578b\u7684\u5b9e\u5fc3\u5706\u6765\u8868\u793a\u3002\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0\uff1f\n\n\nI. \u5728 \nbuild.gradle\n \u91cc\u6dfb\u52a0\u6700\u65b0\u7684 \nappcompat\n \u5e93\u3002\n\n\ndependencies\n \n{\n\n    \ncompile\n \ncom.android.support:appcompat-v7:X.X.X\n \n// where X.X.X version\n\n\n}\n\n\n\n\n\n\nII. \u8ba9\u4f60\u7684 Activity \u7ee7\u627f\u81ea \nandroid.support.v7.app.AppCompatActivity\n \u5e76\u5b9e\u73b0 \nDatePickerDialog.OnDateSetListener\n \u63a5\u53e3\u3002\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n\n    \nimplements\n \nDatePickerDialog\n.\nOnDateSetListener\n \n{\n\n\n\n\n\n\nIII. \u521b\u5efa\u4f60\u7684 \nDatePickerDialog\n \uff0c\u5e76\u4f20\u5165 context, listener, startYear, starthMonth, startDay \u7b49\u53c2\u6570\u3002\n\n\nDatePickerDialog\n \ndatePickerDialog\n \n=\n \nnew\n \nDatePickerDialog\n(\n\n    \ncontext\n,\n \nlistener\n,\n \nstartYear\n,\n \nstarthMonth\n,\n \nstartDay\n);\n\n\n\n\n\n\nIV. \u4f7f\u7528 \nDatePickerDialog\n \u7684 \nshow\n \u65b9\u6cd5\u5c55\u793a\u5bf9\u8bdd\u6846\u3002\n\n\ndatePickerDialog\n.\nshow\n();\n\n\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f\uff1f\n\n\n\n\nI. \u4e3a\u5bf9\u8bdd\u6846\u80cc\u666f\u58f0\u660e\u81ea\u5b9a\u4e49 \ndrawable.xml\n \u3002\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\n!-- From: support/v7/appcompat/res/drawable/abc_dialog_material_background_light.xml --\n\n\ninset\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \nandroid:insetLeft=\n16dp\n\n    \nandroid:insetTop=\n16dp\n\n    \nandroid:insetRight=\n16dp\n\n    \nandroid:insetBottom=\n16dp\n\n\n    \nshape\n \nandroid:shape=\nrectangle\n\n        \ncorners\n \nandroid:radius=\n2dp\n \n/\n\n        \nsolid\n \nandroid:color=\n@color/indigo\n \n/\n\n    \n/shape\n\n\n\n/inset\n\n\n\n\n\n\nII. \u5728 \nstyles.xml\n \u58f0\u660e\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002\n\n\nstyle\n \nname=\nMyDialogTheme\n \nparent=\nTheme.AppCompat.Light.Dialog.Alert\n\n    \nitem\n \nname=\ncolorControlNormal\n@android:color/white\n/item\n\n    \nitem\n \nname=\ncolorControlActivated\n@color/pink\n/item\n\n    \nitem\n \nname=\ntextColorAlertDialogListItem\n@android:color/white\n/item\n\n    \nitem\n \nname=\ncolorAccent\n@color/pink\n/item\n\n    \nitem\n \nname=\nandroid:textColorPrimary\n@android:color/white\n/item\n\n    \nitem\n \nname=\nandroid:windowBackground\n@drawable/background_dialog\n/item\n\n\n/style\n\n\n\n\n\n\nIII. \u8bbe\u7f6e\u4f60\u7684\u81ea\u5b9a\u4e49\u6837\u5f0f\u4e3a \nDatePickerDialog\n \u7684\u4e00\u4e2a\u53c2\u6570\u3002\n\n\nDatePickerDialog\n \ndatePickerDialog\n \n=\n \nnew\n \nDatePickerDialog\n(\n\n    \nthis\n,\n \nR\n.\nstyle\n.\nMyDialogTheme\n,\n \nlistener\n,\n \n2016\n,\n \n21\n,\n \n3\n);\n\n\n\n\n\n\nIV. \u4f7f\u7528 \nshow\n \u65b9\u6cd5\u5c55\u793a\u4f60\u7684 \nDatePickerDialog\n \u3002\n\n\ndatePickerDialog\n.\nshow\n();\n\n\n\n\n\n\n\n\nWarning\n\n\n\u539f\u6587\u4f5c\u8005\uff1aSa\u00fal Molinero \u539f\u6587\u5730\u5740\uff1a\nDate Pickers\n\n\u8bd1\u8005\uff1a\nAilurus\n\n\n\n\nTime Picker\n\n\n\n\n\n\n\u6458\u81ea Google Material Design \n\u6587\u6863\n\n\n\u4e00\u4e2a\u65f6\u95f4\u9009\u62e9\u5668\u6839\u636e\u7528\u6237\u7684\u9996\u9009\u65f6\u95f4\u8bbe\u7f6e\uff08\u537312\u5c0f\u65f6\u621624\u5c0f\u65f6\u683c\u5f0f\uff09\u8fdb\u884c\u8c03\u6574\u3002\n\n\n\u5bf9\u8bdd\u6846\u9009\u62e9\u5668\u7528\u4e8e\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a\u9009\u62e9\u4e00\u6b21\uff08\u5c0f\u65f6\uff1a\u5206\u949f\uff09\u3002\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0?\n\n\nI. \u5728\u4f60\u7684 \nbuild.gradle\n \u6587\u4ef6\u91cc\u6dfb\u52a0\u6700\u65b0\u7248\u672c\u7684 \nappcompat\n \u5e93\u3002\n\n\ndependencies {\n    compile \ncom.android.support:appcompat-v7:X.X.X\n // where X.X.X version\n}\n\n\n\n\n\nII. \u8ba9\u4f60\u7684 activity \u7ee7\u627f\u81ea \nandroid.support.v7.app.AppCompatActivity\n \u5e76\u4e14\u5b9e\u73b0  \nTimePickerDialog.OnTimeSetListener\n \u63a5\u53e3\u3002\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n\n    \nimplements\n \nTimePickerDialog\n.\nOnTimeSetListener\n \n{\n\n      \n...\n\n    \n}\n\n\n\n\n\n\nIII. \u521b\u5efa\u4f60\u7684 \nTimePickerDialog\n \u5e76\u8bbe\u7f6e context\uff0c\u76d1\u542c\u5668\u7684\u5b9e\u73b0\uff0c\u4e00\u5929\u7684\u5f00\u59cb\u65f6\u95f4\uff0c\u5206\u949f\u548c\u4e00\u4e2a \nboolean\n \u503c\uff0c\u6307\u793a\u5bf9\u8bdd\u6846\u662f\u5426\u663e\u793a\u4e3a 24 \u5c0f\u65f6\u683c\u5f0f\u3002\n\n\nTimePickerDialog\n \ntimePickerDialog\n \n=\n\n    \nnew\n \nTimePickerDialog\n(\ncontext\n,\n \nlistener\n,\n \nstartHour\n,\n \nstartMinute\n,\n \nis24HourFormat\n);\n\n\n\n\n\n\nIV. \u901a\u8fc7 \nTimePickerDialog\n \u7684 \nshow\n \u65b9\u6cd5\u663e\u793a\u4f60\u7684\u5bf9\u8bdd\u6846\u3002\n\n\ntimePickerDialog\n.\nshow\n();\n\n\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?\n\n\n\n\nI. \u521b\u5efa\u5bf9\u8bdd\u6846\u81ea\u5b9a\u4e49\u80cc\u666f\u6587\u4ef6 \ndrawable.xml\n\u3002\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\n!-- From: support/v7/appcompat/res/drawable/abc_dialog_material_background_light.xml --\n\n\ninset\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \nandroid:insetLeft=\n16dp\n\n    \nandroid:insetTop=\n16dp\n\n    \nandroid:insetRight=\n16dp\n\n    \nandroid:insetBottom=\n16dp\n\n\n    \nshape\n \nandroid:shape=\nrectangle\n\n        \ncorners\n \nandroid:radius=\n2dp\n \n/\n\n        \nsolid\n \nandroid:color=\n@color/indigo\n \n/\n\n    \n/shape\n\n\n\n/inset\n\n\n\n\n\n\nII. \u5728\nstyles.xml\n \u6587\u4ef6\u5185\u6dfb\u52a0\u4f60\u7684\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002\n\n\n    \nstyle\n \nname=\nMyDialogTheme\n \nparent=\nTheme.AppCompat.Light.Dialog.Alert\n\n        \nitem\n \nname=\ncolorControlNormal\n@color/indigo\n/item\n\n        \nitem\n \nname=\ncolorControlActivated\n@color/pink\n/item\n\n        \nitem\n \nname=\ntextColorAlertDialogListItem\n@color/indigo\n/item\n\n        \nitem\n \nname=\ncolorAccent\n@color/pink\n/item\n\n        \nitem\n \nname=\nandroid:textColorPrimary\n@color/indigo\n/item\n\n        \nitem\n \nname=\nandroid:windowBackground\n@drawable/background_dialog\n/item\n\n    \n/style\n\n\n\n\n\n\nIII. \u5c06\u4f60\u7684\u81ea\u5b9a\u4e49\u4f5c\u4e3a\u521b\u5efa \nDatePickerDialog\n \u65f6\u7684\u4e00\u4e2a\u53c2\u6570\u3002\n\n\nTimePickerDialog\n \ntimePickerDialog\n \n=\n \nnew\n \nTimePickerDialog\n(\n\n    \ncontext\n,\n \nR\n.\nstyle\n.\nMyDialogTheme\n,\n \nlistener\n,\n\n    \nstartHour\n,\n \nstartMinute\n,\n \nis24HourFormat\n);\n\n\n\n\n\n\nIV. \u901a\u8fc7 \nshow\n \u65b9\u6cd5\u6765\u663e\u793a\u4f60\u7684 \nTimePickerDialog\n\u3002\n\n\ntimePickerDialog\n.\nshow\n();\n\n\n\n\n\n\nDark theme\n\n\n\n\nI. \u4f7f\u7528 \nR.style.Theme_AppCompat_Dialog_Alert\n \u4e3b\u9898\u4f5c\u4e3a\nTimePickerDialog\n \u6784\u9020\u51fd\u6570\u7684\u6837\u5f0f\u53c2\u6570\u3002\n\n\nTimePickerDialog\n \ndialog\n \n=\n \nnew\n \nTimePickerDialog\n(\n\n    \ncontext\n,\n \nR\n.\nstyle\n.\nTheme_AppCompat_Dialog_Alert\n,\n\n    \nlistener\n,\n \nstartingHour\n,\n \nstartingMinute\n,\n \nis24HourFormat\n);\n\n\n\n\n\n\n\n\n\u5907\u6ce8\n\n\n\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7ee7\u627f\u81ea \nTheme.AppCompat.Light.Dialog.Alert\n \u7684\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002\n\n\n\n\nColor Picker\n\n\n\n\n\n\n\u6458\u81ea Google material design \n\u6587\u6863\n.\n\n\nPickers \u63d0\u4f9b\u4e86\u4e00\u79cd\u4ece\u9884\u5148\u786e\u5b9a\u7684\u96c6\u5408\u4e2d\u9009\u62e9\u5355\u4e2a\u503c\u7684\u7b80\u5355\u65b9\u6cd5\u3002\n\n\n\n\n\u5982\u4f55\u63d0\u6dfb\u52a0?\n\n\nI. \u4ece \nGoogle open source repository\n \u514b\u9686 color picker \u9879\u76ee\u3002\n\n\ngit clone https://android.googlesource.com/platform/frameworks/opt/colorpicker\n\n\n\n\n\nII. \u9009\u62e9\u5df2\u7ecf\u514b\u9686\u7684\u9879\u76ee\u5e76\u4f5c\u4e3a\u4e00\u4e2a\u65b0\u6a21\u5757\u901a\u8fc7 \nNew/Import module\n \u83dc\u5355\u5bfc\u5165\u5230 Android Studio\u3002\n\n\nIII. \u5c06\u65b0\u6a21\u5757\u7f16\u8bd1\u4e3a\u4f60\u9879\u76ee\u7684\u4e00\u4e2a\u4f9d\u8d56\u3002\n\n\ndependencies {\n    compile project(\n:colorpicker\n)\n}\n\n\n\n\n\nIV. \u5728 \ncolors.xml\n \u8d44\u6e90\u6587\u4ef6\u4e2d\u58f0\u660e\u4e00\u4e9b\u989c\u8272\u3002\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nresources\n\n    \ncolor\n \nname=\nred\n#F6402C\n/color\n\n    \ncolor\n \nname=\npink\n#EB1460\n/color\n\n    \ncolor\n \nname=\npurple\n#9C1AB1\n/color\n\n    \ncolor\n \nname=\ndeep_purple\n#6633B9\n/color\n\n    \ncolor\n \nname=\nindigo\n#3D4DB7\n/color\n\n    \ncolor\n \nname=\nblue\n#1093F5\n/color\n\n    \ncolor\n \nname=\nlight_blue\n#00A6F6\n/color\n\n    \ncolor\n \nname=\ncyan\n#00BBD5\n/color\n\n    \ncolor\n \nname=\nteal\n#009687\n/color\n\n    \ncolor\n \nname=\ngreen\n#46AF4A\n/color\n\n    \ncolor\n \nname=\nlight_green\n#88C440\n/color\n\n    \ncolor\n \nname=\nlime\n#CCDD1E\n/color\n\n    \ncolor\n \nname=\nyellow\n#FFEC16\n/color\n\n    \ncolor\n \nname=\namber\n#FFC100\n/color\n\n    \ncolor\n \nname=\norange\n#FF9800\n/color\n\n    \ncolor\n \nname=\ndeep_orange\n#FF5505\n/color\n\n    \ncolor\n \nname=\nbrown\n#7A5547\n/color\n\n    \ncolor\n \nname=\ngrey\n#9D9D9D\n/color\n\n    \ncolor\n \nname=\nblue_grey\n#5E7C8B\n/color\n\n\n/resources\n\n\n\n\n\n\nV. \u4f7f\u7528\u6807\u9898\u3001\u989c\u8272\u6570\u7ec4\u3001\u9ed8\u8ba4\u9009\u62e9\u7684\u989c\u8272\u3001\u5217\u6570\u548c\u663e\u793a\u989c\u8272\u7684\u5927\u5c0f\u6765\u521d\u59cb\u5316 \nColorPickerDialog\n\u3002\n\n\nColorPickerDialog\n \ncolorPickerDialog\n \n=\n \nnew\n \nColorPickerDialog\n();\n\n\ncolorPickerDialog\n.\ninitialize\n(\n\n    \nR\n.\nstring\n.\ntitle\n,\n \ncolors\n,\n \nselectedColor\n,\n \nnumColumns\n,\n \ncolors\n.\nlength\n);\n\n\n\n\n\n\nVI. \u7531\u4e8e \nColorPickerDialog\n \u7ee7\u627f\u81ea \nDialogFragment\n \uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7 \u4e00\u4e2a \nFragmentManager\n \u548c \u4e00\u4e2a\u6807\u7b7e\u663e\u793a\u5b83\u3002\n\n\ncolorPickerDialog\n.\nshow\n(\ngetFragmentManager\n(),\n \ntag\n);\n\n\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?\n\n\n\n\nI. \u521b\u5efa\u4e00\u4e2a\u5305\u542b \nColorPickerPalette\n \u7684\u5e03\u5c40\u6587\u4ef6\u3002\n\n\ncom.android.colorpicker.ColorPickerPalette\n\n    \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \nandroid:id=\n@+id/palette\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nmatch_parent\n\n    \nandroid:layout_gravity=\ncenter\n\n    \nandroid:gravity=\ncenter\n\n    \nandroid:padding=\n16dp\n\n    \n/\n\n\n\n\n\n\n\n\n\u5907\u6ce8\n\n\nColorPickerPalette\n \u7ee7\u627f\u81ea \nTableLayout\n \u7c7b\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u4f7f\u7528  \nTableLayout\n \u7684\u6240\u6709\u89c6\u56fe\u5c5e\u6027\u6765\u8bbe\u7f6e\u81ea\u5df1\u7684\u6837\u5f0f\u3002\n\n\n\n\nII. \u4e3a\u5305\u542b \nColorPickerPalette\n \u7684\u5bf9\u8bdd\u6846\u5b9a\u4e49\u4e00\u4e2a\u6697\u8272\u6837\u5f0f\u3002\n\n\nstyle\n \nname=\nMyDialogTheme\n \nparent=\nTheme.AppCompat.Dialog.Alert\n\n    \nitem\n \nname=\ncolorAccent\n@color/teal_light\n/item\n\n    \nitem\n \nname=\nandroid:textColorPrimary\n@android:color/white\n/item\n\n\n/style\n\n\n\n\n\n\nIII. Inflate your \nColorPickerPalette\n in a view object.\n\n\nLayoutInflater\n \nlayoutInflater\n \n=\n \nLayoutInflater\n.\nfrom\n(\ncontext\n);\n\n\nColorPickerPalette\n \ncolorPickerPalette\n \n=\n\n    \n(\nColorPickerPalette\n)\n \nlayoutInflater\n.\ninflate\n(\nR\n.\nlayout\n.\ncustom_picker\n,\n \nnull\n);\n\n\n\n\n\n\nIV. \u7528\u4e00\u4e9b\u989c\u8272\u548c\u4e00\u4e2a\u76d1\u542c\u5668\u8bbe\u7f6e\u4f60\u7684 \nColorPickerPalette\n\u3002\n\n\ncolorPickerPalette\n.\ninit\n(\ncolors\n.\nlength\n,\n \ncolumns\n,\n \nmOnColorSelectedListener\n);\n\n\n\n\n\n\nV. \u4f7f\u7528\u4e00\u4e2a\u989c\u8272\u6570\u7ec4\u548c\u9ed8\u8ba4\u7684\u9009\u4e2d\u989c\u8272\u4f5c\u4e3a\u53c2\u6570\u8c03\u7528 \nColorPickerPalette\n \u7684 \ncolorPickerPalette\n \u65b9\u6cd5\u3002\n\n\ncolorPickerPalette\n.\ndrawPalette\n(\ncolors\n,\n \nselectedColor\n);\n\n\n\n\n\n\nVI. \u7528\u4f60\u7684\u6697\u8272\u4e3b\u9898\u548c\u89c6\u56fe\u901a\u8fc7 \nAlertDialog.Builder\n \u521b\u5efa\u5bf9\u8bdd\u6846\u3002\n\n\nAlertDialog\n \nalert\n \n=\n \nnew\n \nAlertDialog\n.\nBuilder\n(\nthis\n,\n \nR\n.\nstyle\n.\nMyDialogTheme\n)\n\n    \n.\nsetTitle\n(\nR\n.\nstring\n.\ntitle_color_picker\n)\n\n    \n.\nsetPositiveButton\n(\nandroid\n.\nR\n.\nstring\n.\nok\n,\n \nmOnClickListener\n)\n\n    \n.\nsetNegativeButton\n(\nandroid\n.\nR\n.\nstring\n.\nno\n,\n \nmOnClickListener\n)\n\n    \n.\nsetView\n(\ncolorPickerPalette\n)\n\n    \n.\ncreate\n();\n\n\n\n\n\n\nVII. \u663e\u793a\u4f60\u7684\u5bf9\u8bdd\u6846\n\n\nalert\n.\nshow\n();\n\n\n\n\n\n\n\n\nWarning\n\n\n\u539f\u6587\u5730\u5740\uff1a\nColor Pickers\n\n\u8bd1\u8005\uff1a\n\u8109\u8109\u4e0d\u5f97\u8bed", 
            "title": "Pickers"
        }, 
        {
            "location": "/components/pickers/#pickers", 
            "text": "", 
            "title": "Pickers"
        }, 
        {
            "location": "/components/pickers/#date-picker", 
            "text": "\u6458\u81ea Google Material Design  \u6587\u6863  \u5bf9\u8bdd\u6846\u9009\u62e9\u5668\u7528\u6765\u5728\u624b\u673a\u4e0a\u9009\u62e9\u65e5\u671f\u3002  \u88ab\u9009\u4e2d\u7684\u4e00\u5929\uff0c\u7528\u4e0e\u5176\u4ed6\u65e5\u671f\u4e0d\u540c\u7684\u989c\u8272\u548c\u7740\u91cd\u7c7b\u578b\u7684\u5b9e\u5fc3\u5706\u6765\u8868\u793a\u3002", 
            "title": "Date Picker"
        }, 
        {
            "location": "/components/pickers/#_1", 
            "text": "I. \u5728  build.gradle  \u91cc\u6dfb\u52a0\u6700\u65b0\u7684  appcompat  \u5e93\u3002  dependencies   { \n     compile   com.android.support:appcompat-v7:X.X.X   // where X.X.X version  }   II. \u8ba9\u4f60\u7684 Activity \u7ee7\u627f\u81ea  android.support.v7.app.AppCompatActivity  \u5e76\u5b9e\u73b0  DatePickerDialog.OnDateSetListener  \u63a5\u53e3\u3002  public   class   MainActivity   extends   AppCompatActivity \n     implements   DatePickerDialog . OnDateSetListener   {   III. \u521b\u5efa\u4f60\u7684  DatePickerDialog  \uff0c\u5e76\u4f20\u5165 context, listener, startYear, starthMonth, startDay \u7b49\u53c2\u6570\u3002  DatePickerDialog   datePickerDialog   =   new   DatePickerDialog ( \n     context ,   listener ,   startYear ,   starthMonth ,   startDay );   IV. \u4f7f\u7528  DatePickerDialog  \u7684  show  \u65b9\u6cd5\u5c55\u793a\u5bf9\u8bdd\u6846\u3002  datePickerDialog . show ();", 
            "title": "\u5982\u4f55\u6dfb\u52a0\uff1f"
        }, 
        {
            "location": "/components/pickers/#_2", 
            "text": "I. \u4e3a\u5bf9\u8bdd\u6846\u80cc\u666f\u58f0\u660e\u81ea\u5b9a\u4e49  drawable.xml  \u3002  ?xml version= 1.0  encoding= utf-8 ?  !-- From: support/v7/appcompat/res/drawable/abc_dialog_material_background_light.xml --  inset   xmlns:android= http://schemas.android.com/apk/res/android \n     android:insetLeft= 16dp \n     android:insetTop= 16dp \n     android:insetRight= 16dp \n     android:insetBottom= 16dp \n\n     shape   android:shape= rectangle \n         corners   android:radius= 2dp   / \n         solid   android:color= @color/indigo   / \n     /shape  /inset   II. \u5728  styles.xml  \u58f0\u660e\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002  style   name= MyDialogTheme   parent= Theme.AppCompat.Light.Dialog.Alert \n     item   name= colorControlNormal @android:color/white /item \n     item   name= colorControlActivated @color/pink /item \n     item   name= textColorAlertDialogListItem @android:color/white /item \n     item   name= colorAccent @color/pink /item \n     item   name= android:textColorPrimary @android:color/white /item \n     item   name= android:windowBackground @drawable/background_dialog /item  /style   III. \u8bbe\u7f6e\u4f60\u7684\u81ea\u5b9a\u4e49\u6837\u5f0f\u4e3a  DatePickerDialog  \u7684\u4e00\u4e2a\u53c2\u6570\u3002  DatePickerDialog   datePickerDialog   =   new   DatePickerDialog ( \n     this ,   R . style . MyDialogTheme ,   listener ,   2016 ,   21 ,   3 );   IV. \u4f7f\u7528  show  \u65b9\u6cd5\u5c55\u793a\u4f60\u7684  DatePickerDialog  \u3002  datePickerDialog . show ();    Warning  \u539f\u6587\u4f5c\u8005\uff1aSa\u00fal Molinero \u539f\u6587\u5730\u5740\uff1a Date Pickers \n\u8bd1\u8005\uff1a Ailurus", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f\uff1f"
        }, 
        {
            "location": "/components/pickers/#time-picker", 
            "text": "\u6458\u81ea Google Material Design  \u6587\u6863  \u4e00\u4e2a\u65f6\u95f4\u9009\u62e9\u5668\u6839\u636e\u7528\u6237\u7684\u9996\u9009\u65f6\u95f4\u8bbe\u7f6e\uff08\u537312\u5c0f\u65f6\u621624\u5c0f\u65f6\u683c\u5f0f\uff09\u8fdb\u884c\u8c03\u6574\u3002  \u5bf9\u8bdd\u6846\u9009\u62e9\u5668\u7528\u4e8e\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a\u9009\u62e9\u4e00\u6b21\uff08\u5c0f\u65f6\uff1a\u5206\u949f\uff09\u3002", 
            "title": "Time Picker"
        }, 
        {
            "location": "/components/pickers/#_3", 
            "text": "I. \u5728\u4f60\u7684  build.gradle  \u6587\u4ef6\u91cc\u6dfb\u52a0\u6700\u65b0\u7248\u672c\u7684  appcompat  \u5e93\u3002  dependencies {\n    compile  com.android.support:appcompat-v7:X.X.X  // where X.X.X version\n}  II. \u8ba9\u4f60\u7684 activity \u7ee7\u627f\u81ea  android.support.v7.app.AppCompatActivity  \u5e76\u4e14\u5b9e\u73b0   TimePickerDialog.OnTimeSetListener  \u63a5\u53e3\u3002  public   class   MainActivity   extends   AppCompatActivity \n     implements   TimePickerDialog . OnTimeSetListener   { \n       ... \n     }   III. \u521b\u5efa\u4f60\u7684  TimePickerDialog  \u5e76\u8bbe\u7f6e context\uff0c\u76d1\u542c\u5668\u7684\u5b9e\u73b0\uff0c\u4e00\u5929\u7684\u5f00\u59cb\u65f6\u95f4\uff0c\u5206\u949f\u548c\u4e00\u4e2a  boolean  \u503c\uff0c\u6307\u793a\u5bf9\u8bdd\u6846\u662f\u5426\u663e\u793a\u4e3a 24 \u5c0f\u65f6\u683c\u5f0f\u3002  TimePickerDialog   timePickerDialog   = \n     new   TimePickerDialog ( context ,   listener ,   startHour ,   startMinute ,   is24HourFormat );   IV. \u901a\u8fc7  TimePickerDialog  \u7684  show  \u65b9\u6cd5\u663e\u793a\u4f60\u7684\u5bf9\u8bdd\u6846\u3002  timePickerDialog . show ();", 
            "title": "\u5982\u4f55\u6dfb\u52a0?"
        }, 
        {
            "location": "/components/pickers/#_4", 
            "text": "I. \u521b\u5efa\u5bf9\u8bdd\u6846\u81ea\u5b9a\u4e49\u80cc\u666f\u6587\u4ef6  drawable.xml \u3002  ?xml version= 1.0  encoding= utf-8 ?  !-- From: support/v7/appcompat/res/drawable/abc_dialog_material_background_light.xml --  inset   xmlns:android= http://schemas.android.com/apk/res/android \n     android:insetLeft= 16dp \n     android:insetTop= 16dp \n     android:insetRight= 16dp \n     android:insetBottom= 16dp \n\n     shape   android:shape= rectangle \n         corners   android:radius= 2dp   / \n         solid   android:color= @color/indigo   / \n     /shape  /inset   II. \u5728 styles.xml  \u6587\u4ef6\u5185\u6dfb\u52a0\u4f60\u7684\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002       style   name= MyDialogTheme   parent= Theme.AppCompat.Light.Dialog.Alert \n         item   name= colorControlNormal @color/indigo /item \n         item   name= colorControlActivated @color/pink /item \n         item   name= textColorAlertDialogListItem @color/indigo /item \n         item   name= colorAccent @color/pink /item \n         item   name= android:textColorPrimary @color/indigo /item \n         item   name= android:windowBackground @drawable/background_dialog /item \n     /style   III. \u5c06\u4f60\u7684\u81ea\u5b9a\u4e49\u4f5c\u4e3a\u521b\u5efa  DatePickerDialog  \u65f6\u7684\u4e00\u4e2a\u53c2\u6570\u3002  TimePickerDialog   timePickerDialog   =   new   TimePickerDialog ( \n     context ,   R . style . MyDialogTheme ,   listener , \n     startHour ,   startMinute ,   is24HourFormat );   IV. \u901a\u8fc7  show  \u65b9\u6cd5\u6765\u663e\u793a\u4f60\u7684  TimePickerDialog \u3002  timePickerDialog . show ();", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?"
        }, 
        {
            "location": "/components/pickers/#dark-theme", 
            "text": "I. \u4f7f\u7528  R.style.Theme_AppCompat_Dialog_Alert  \u4e3b\u9898\u4f5c\u4e3a TimePickerDialog  \u6784\u9020\u51fd\u6570\u7684\u6837\u5f0f\u53c2\u6570\u3002  TimePickerDialog   dialog   =   new   TimePickerDialog ( \n     context ,   R . style . Theme_AppCompat_Dialog_Alert , \n     listener ,   startingHour ,   startingMinute ,   is24HourFormat );    \u5907\u6ce8  \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7ee7\u627f\u81ea  Theme.AppCompat.Light.Dialog.Alert  \u7684\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002", 
            "title": "Dark theme"
        }, 
        {
            "location": "/components/pickers/#color-picker", 
            "text": "\u6458\u81ea Google material design  \u6587\u6863 .  Pickers \u63d0\u4f9b\u4e86\u4e00\u79cd\u4ece\u9884\u5148\u786e\u5b9a\u7684\u96c6\u5408\u4e2d\u9009\u62e9\u5355\u4e2a\u503c\u7684\u7b80\u5355\u65b9\u6cd5\u3002", 
            "title": "Color Picker"
        }, 
        {
            "location": "/components/pickers/#_5", 
            "text": "I. \u4ece  Google open source repository  \u514b\u9686 color picker \u9879\u76ee\u3002  git clone https://android.googlesource.com/platform/frameworks/opt/colorpicker  II. \u9009\u62e9\u5df2\u7ecf\u514b\u9686\u7684\u9879\u76ee\u5e76\u4f5c\u4e3a\u4e00\u4e2a\u65b0\u6a21\u5757\u901a\u8fc7  New/Import module  \u83dc\u5355\u5bfc\u5165\u5230 Android Studio\u3002  III. \u5c06\u65b0\u6a21\u5757\u7f16\u8bd1\u4e3a\u4f60\u9879\u76ee\u7684\u4e00\u4e2a\u4f9d\u8d56\u3002  dependencies {\n    compile project( :colorpicker )\n}  IV. \u5728  colors.xml  \u8d44\u6e90\u6587\u4ef6\u4e2d\u58f0\u660e\u4e00\u4e9b\u989c\u8272\u3002  ?xml version= 1.0  encoding= utf-8 ?  resources \n     color   name= red #F6402C /color \n     color   name= pink #EB1460 /color \n     color   name= purple #9C1AB1 /color \n     color   name= deep_purple #6633B9 /color \n     color   name= indigo #3D4DB7 /color \n     color   name= blue #1093F5 /color \n     color   name= light_blue #00A6F6 /color \n     color   name= cyan #00BBD5 /color \n     color   name= teal #009687 /color \n     color   name= green #46AF4A /color \n     color   name= light_green #88C440 /color \n     color   name= lime #CCDD1E /color \n     color   name= yellow #FFEC16 /color \n     color   name= amber #FFC100 /color \n     color   name= orange #FF9800 /color \n     color   name= deep_orange #FF5505 /color \n     color   name= brown #7A5547 /color \n     color   name= grey #9D9D9D /color \n     color   name= blue_grey #5E7C8B /color  /resources   V. \u4f7f\u7528\u6807\u9898\u3001\u989c\u8272\u6570\u7ec4\u3001\u9ed8\u8ba4\u9009\u62e9\u7684\u989c\u8272\u3001\u5217\u6570\u548c\u663e\u793a\u989c\u8272\u7684\u5927\u5c0f\u6765\u521d\u59cb\u5316  ColorPickerDialog \u3002  ColorPickerDialog   colorPickerDialog   =   new   ColorPickerDialog ();  colorPickerDialog . initialize ( \n     R . string . title ,   colors ,   selectedColor ,   numColumns ,   colors . length );   VI. \u7531\u4e8e  ColorPickerDialog  \u7ee7\u627f\u81ea  DialogFragment  \uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7 \u4e00\u4e2a  FragmentManager  \u548c \u4e00\u4e2a\u6807\u7b7e\u663e\u793a\u5b83\u3002  colorPickerDialog . show ( getFragmentManager (),   tag );", 
            "title": "\u5982\u4f55\u63d0\u6dfb\u52a0?"
        }, 
        {
            "location": "/components/pickers/#_6", 
            "text": "I. \u521b\u5efa\u4e00\u4e2a\u5305\u542b  ColorPickerPalette  \u7684\u5e03\u5c40\u6587\u4ef6\u3002  com.android.colorpicker.ColorPickerPalette \n     xmlns:android= http://schemas.android.com/apk/res/android \n     android:id= @+id/palette \n     android:layout_width= match_parent \n     android:layout_height= match_parent \n     android:layout_gravity= center \n     android:gravity= center \n     android:padding= 16dp \n     /    \u5907\u6ce8  ColorPickerPalette  \u7ee7\u627f\u81ea  TableLayout  \u7c7b\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u4f7f\u7528   TableLayout  \u7684\u6240\u6709\u89c6\u56fe\u5c5e\u6027\u6765\u8bbe\u7f6e\u81ea\u5df1\u7684\u6837\u5f0f\u3002   II. \u4e3a\u5305\u542b  ColorPickerPalette  \u7684\u5bf9\u8bdd\u6846\u5b9a\u4e49\u4e00\u4e2a\u6697\u8272\u6837\u5f0f\u3002  style   name= MyDialogTheme   parent= Theme.AppCompat.Dialog.Alert \n     item   name= colorAccent @color/teal_light /item \n     item   name= android:textColorPrimary @android:color/white /item  /style   III. Inflate your  ColorPickerPalette  in a view object.  LayoutInflater   layoutInflater   =   LayoutInflater . from ( context );  ColorPickerPalette   colorPickerPalette   = \n     ( ColorPickerPalette )   layoutInflater . inflate ( R . layout . custom_picker ,   null );   IV. \u7528\u4e00\u4e9b\u989c\u8272\u548c\u4e00\u4e2a\u76d1\u542c\u5668\u8bbe\u7f6e\u4f60\u7684  ColorPickerPalette \u3002  colorPickerPalette . init ( colors . length ,   columns ,   mOnColorSelectedListener );   V. \u4f7f\u7528\u4e00\u4e2a\u989c\u8272\u6570\u7ec4\u548c\u9ed8\u8ba4\u7684\u9009\u4e2d\u989c\u8272\u4f5c\u4e3a\u53c2\u6570\u8c03\u7528  ColorPickerPalette  \u7684  colorPickerPalette  \u65b9\u6cd5\u3002  colorPickerPalette . drawPalette ( colors ,   selectedColor );   VI. \u7528\u4f60\u7684\u6697\u8272\u4e3b\u9898\u548c\u89c6\u56fe\u901a\u8fc7  AlertDialog.Builder  \u521b\u5efa\u5bf9\u8bdd\u6846\u3002  AlertDialog   alert   =   new   AlertDialog . Builder ( this ,   R . style . MyDialogTheme ) \n     . setTitle ( R . string . title_color_picker ) \n     . setPositiveButton ( android . R . string . ok ,   mOnClickListener ) \n     . setNegativeButton ( android . R . string . no ,   mOnClickListener ) \n     . setView ( colorPickerPalette ) \n     . create ();   VII. \u663e\u793a\u4f60\u7684\u5bf9\u8bdd\u6846  alert . show ();    Warning  \u539f\u6587\u5730\u5740\uff1a Color Pickers \n\u8bd1\u8005\uff1a \u8109\u8109\u4e0d\u5f97\u8bed", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?"
        }, 
        {
            "location": "/components/progress/", 
            "text": "Progress \n activity\n\n\nCircular\n\n\n\n\n\n\n\u6458\u81ea google material design \n\u6587\u6863\n.\n\n\nMinimize visual changes that occur while your app loads content by representing each operation with a single activity indicator. \u4f8b\u5982\uff0c\u4e00\u4e2a\u5237\u65b0\u64cd\u4f5c\u5e94\u8be5\u663e\u793a\u4e00\u4e2a refresh bar \u6216\u8005 activity circle \u7684\u4efb\u4f55\u4e00\u4e2a\uff0c\u4f46\u662f\u4e0d\u80fd\u540c\u65f6\u663e\u793a\u3002\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0?\n\n\nI. \u5728\u4f60\u7684 \nbuild.grade\n \u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0 \nappcompat\n \u5e93\u3002\n\n\ndependencies\n \n{\n\n    \ncompile\n \ncom.android.support:appcompat-v7:X.X.X\n \n// where X.X.X version\n\n\n}\n\n\n\n\n\n\nII. \u521b\u5efa\u4f60\u7684 activity \u5e76\u7ee7\u627f\u81ea android.support.v7.app.AppCompatActivity\u3002\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n    \n...\n\n\n}\n\n\n\n\n\n\nIII. \u5728 \nlayout.xml\n \u5185\u7684\u4efb\u610f\u4f4d\u7f6e\u58f0\u660e\u4f60\u7684 \nProgressBar\n\u3002\n\n\nProgressBar\n\n    \nstyle=\n@style/Widget.AppCompat.ProgressBar\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n/\n\n\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?\n\n\n\n\nI. \u5728\u4f60\u7684 \nstyles.xml\n \u5185\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002\n\n\nstyle\n \nname=\nCircularProgress\n \nparent=\nTheme.AppCompat.Light\n\n    \nitem\n \nname=\ncolorAccent\n@color/indigo\n/item\n\n\n/style\n\n\n\n\n\n\nII. \u901a\u8fc7 \nandroid:theme\n \u5c5e\u6027\u5e94\u7528\u8fd9\u4e2a\u6837\u5f0f\u5230\u4f60\u7684 \nProgressBar\n \u3002\n\n\nProgressBar\n\n    \nandroid:theme=\n@style/CircularProgress\n\n    \nstyle=\n@style/Widget.AppCompat.ProgressBar\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n/\n\n\n\n\n\n\n\n\n\u539f\u6587\u4f5c\u8005\uff1aYakiv Mospan \u539f\u6587\u94fe\u63a5\uff1a\nCircular Progress\n\n\n\n\nLinear\n\n\n\n\n\n\n\u6458\u81ea google material design \n\u6587\u6863\n.\n\n\n\u4e00\u4e2a linear progress \u6307\u793a\u5668\u5e94\u8be5\u603b\u662f\u4ece 0% \u586b\u5145\u5230 100%\uff0c\u7edd\u5bf9\u4e0d\u80fd\u53cd\u7740\u586b\u5145\u3002 It should be represented by bars on the edge of a header or sheet that appear and disappear.\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0?\n\n\nI. \u5728\u4f60\u7684 \nbuild.grade\n \u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0 \nappcompat\n \u5e93\u3002\n\n\ndependencies\n \n{\n\n    \ncompile\n \ncom.android.support:appcompat-v7:X.X.X\n \n// where X.X.X version\n\n\n}\n\n\n\n\n\n\nII. \u521b\u5efa\u4f60\u7684 activity \u5e76\u7ee7\u627f\u81ea \nandroid.support.v7.app.AppCompatActivity\n\u3002\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n    \n...\n\n\n}\n\n\n\n\n\n\nIII. \u5728 \nlayout.xml\n \u5185\u7684\u4efb\u610f\u4f4d\u7f6e\u58f0\u660e\u4f60\u7684 \nProgressBar\n\u3002\n\n\nProgressBar\n\n    \nstyle=\n@style/Widget.AppCompat.ProgressBar.Horizontal\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n/\n\n\n\n\n\n\n\u4e0d\u786e\u5b9a\u7684\n\n\n\u521b\u5efa\u4e0d\u786e\u5b9a\u7684 \nProgressBar\n \u8bbe\u7f6e \nandroid:indeterminate\n \u5c5e\u6027\u7684\u503c\u4e3a true\u3002\n\n\nProgressBar\n\n    \nstyle=\n@style/Widget.AppCompat.ProgressBar.Horizontal\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:indeterminate=\ntrue\n/\n\n\n\n\n\n\n\u786e\u5b9a\u7684\n\n\nI. \u521b\u5efa\u786e\u5b9a\u7684 \nProgressBar\n \u8bbe\u7f6e \nandroid:indeterminate\n \u5c5e\u6027\u7684\u503c\u4e3a false\u3002\n\n\nProgressBar\n\n    \nandroid:id=\n@+id/progressBar\n\n    \nstyle=\n@style/Widget.AppCompat.ProgressBar.Horizontal\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:indeterminate=\nfalse\n\n    \nandroid:max=\n100\n\n    \nandroid:progress=\n20\n/\n\n\n\n\n\n\n\u4f7f\u7528 \nandroid:max\n \u5c5e\u6027\u53bb\u6307\u5b9a\u6700\u5927\u8fdb\u5ea6\u6570\u3002\u5b83\u9ed8\u8ba4\u7b49\u4e8e100\u3002\n\n\n\u4f7f\u7528 \nandroid:progress\n \u5c5e\u6027\u8bbe\u7f6e\u8fdb\u5ea6\u9ed8\u8ba4\u4f4d\u7f6e\u3002\n\n\nII. \u4ece UI \u7ebf\u7a0b\u4f7f\u7528 \nsetProgress(int progress)\n \u65b9\u6cd5\u53bb\u66f4\u65b0\u8fdb\u5ea6\u4f4d\u7f6e\u3002\n\n\nProgressBar\n \nprogressBar\n \n=\n \n(\nProgressBar\n)\n \nfindViewById\n(\nR\n.\nid\n.\nprogressBar\n);\n\n\nprogressBar\n.\nsetProgress\n(\n50\n);\n\n\n\n\n\n\n\u7f13\u51b2\u7684\n\n\nI. \u521b\u5efa\u7f13\u51b2\u7684 \nProgressBar\n \u8bbe\u7f6e \nandroid:indeterminate\n \u5c5e\u6027\u7684\u503c\u4e3a false\u3002\n\n\nProgressBar\n\n    \nandroid:id=\n@+id/progressBar\n\n    \nstyle=\n@style/Widget.AppCompat.ProgressBar.Horizontal\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:indeterminate=\nfalse\n\n    \nandroid:max=\n100\n\n    \nandroid:progress=\n10\n\n    \nandroid:secondaryProgress=\n50\n/\n\n\n\n\n\n\n\u4f7f\u7528 \nandroid:secondaryProgress\n \u5c5e\u6027\u8bbe\u7f6e\u9ed8\u8ba4\u7684\u7f13\u51b2\u503c\u3002\n\n\nII. \u4f7f\u7528 \nsetSecondaryProgress(int progress)\n \u65b9\u6cd5\u53bb\u66f4\u65b0\u7f13\u51b2\u8fdb\u5ea6\u4f4d\u7f6e\u3002\n\n\nProgressBar\n \nprogressBar\n \n=\n \n(\nProgressBar\n)\n \nfindViewById\n(\nR\n.\nid\n.\nprogressBar\n);\n\n\n\n// set current progress\n\n\nprogressBar\n.\nsetProgress\n(\n20\n);\n\n\n\n// set buffered progress\n\n\nprogressBar\n.\nsetSecondaryProgress\n(\n50\n);\n\n\n\n\n\n\n\u4e0d\u786e\u5b9a\u7684\u548c\u786e\u5b9a\u7684\n\n\n\u521b\u5efa\u4e0d\u786e\u5b9a\u7684 \nProgressBar\n \u8bbe\u7f6e \nandroid:indeterminate\n \u5c5e\u6027\u7684\u503c\u4e3a true\u3002\n\n\nProgressBar\n\n    \nandroid:id=\n@+id/progressBar\n\n    \nstyle=\n@style/Widget.AppCompat.ProgressBar.Horizontal\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:indeterminate=\ntrue\n/\n\n\n\n\n\n\n\u6bcf\u5f53\u4f60\u9700\u8981\u4ece\u4e0d\u786e\u5b9a\u7684\u5207\u6362\u5230\u786e\u5b9a\u7684\u8fdb\u5ea6\uff0c\u53ef\u4ee5\u4f7f\u7528 \nsetIndeterminate(boolean indeterminate)\n \u65b9\u6cd5\u3002\n\n\nProgressBar\n \nprogressBar\n \n=\n \n(\nProgressBar\n)\n \nfindViewById\n(\nR\n.\nid\n.\nprogressBar\n);\n\n\nprogressBar\n.\nsetIndeterminate\n(\nfalse\n);\n\n\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?\n\n\n\n\nI. \u5728\u4f60\u7684 \nvalues-v21/styles.xml\n \u5185\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002\n\n\nstyle\n \nname=\nLinearProgress\n \nparent=\nTheme.AppCompat.Light\n\n    \nitem\n \nname=\ncolorAccent\n@color/indigo\n/item\n\n    \nitem\n \nname=\nandroid:progressBackgroundTint\n@color/pink\n/item\n\n\n/style\n\n\n\n\n\n\nII. \u901a\u8fc7 \nandroid:theme\n \u5c5e\u6027\u5e94\u7528\u8fd9\u4e2a\u6837\u5f0f\u5230\u4f60\u7684 \nProgressBar\n\u3002\n\n\nProgressBar\n\n    \nandroid:theme=\n@style/LinearProgress\n\n    \nstyle=\n@style/Widget.AppCompat.ProgressBar.Horizontal\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n/\n\n\n\n\n\n\n\n\n\u5907\u6ce8: \nandroid:progressBackgroundTint\n \u5c5e\u6027\u53ea\u5de5\u4f5c\u5728\u786e\u5b9a\u7684 \nProgressBar\n\u3002\n\n\n\u539f\u6587\u4f5c\u8005\uff1aYakiv Mospan  \u539f\u6587\u94fe\u63a5\uff1a\nLinear Progress", 
            "title": "Progress & activity"
        }, 
        {
            "location": "/components/progress/#progress-activity", 
            "text": "", 
            "title": "Progress &amp; activity"
        }, 
        {
            "location": "/components/progress/#circular", 
            "text": "\u6458\u81ea google material design  \u6587\u6863 .  Minimize visual changes that occur while your app loads content by representing each operation with a single activity indicator. \u4f8b\u5982\uff0c\u4e00\u4e2a\u5237\u65b0\u64cd\u4f5c\u5e94\u8be5\u663e\u793a\u4e00\u4e2a refresh bar \u6216\u8005 activity circle \u7684\u4efb\u4f55\u4e00\u4e2a\uff0c\u4f46\u662f\u4e0d\u80fd\u540c\u65f6\u663e\u793a\u3002", 
            "title": "Circular"
        }, 
        {
            "location": "/components/progress/#_1", 
            "text": "I. \u5728\u4f60\u7684  build.grade  \u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0  appcompat  \u5e93\u3002  dependencies   { \n     compile   com.android.support:appcompat-v7:X.X.X   // where X.X.X version  }   II. \u521b\u5efa\u4f60\u7684 activity \u5e76\u7ee7\u627f\u81ea android.support.v7.app.AppCompatActivity\u3002  public   class   MainActivity   extends   AppCompatActivity   { \n     ...  }   III. \u5728  layout.xml  \u5185\u7684\u4efb\u610f\u4f4d\u7f6e\u58f0\u660e\u4f60\u7684  ProgressBar \u3002  ProgressBar \n     style= @style/Widget.AppCompat.ProgressBar \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content /", 
            "title": "\u5982\u4f55\u6dfb\u52a0?"
        }, 
        {
            "location": "/components/progress/#_2", 
            "text": "I. \u5728\u4f60\u7684  styles.xml  \u5185\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002  style   name= CircularProgress   parent= Theme.AppCompat.Light \n     item   name= colorAccent @color/indigo /item  /style   II. \u901a\u8fc7  android:theme  \u5c5e\u6027\u5e94\u7528\u8fd9\u4e2a\u6837\u5f0f\u5230\u4f60\u7684  ProgressBar  \u3002  ProgressBar \n     android:theme= @style/CircularProgress \n     style= @style/Widget.AppCompat.ProgressBar \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content /    \u539f\u6587\u4f5c\u8005\uff1aYakiv Mospan \u539f\u6587\u94fe\u63a5\uff1a Circular Progress", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?"
        }, 
        {
            "location": "/components/progress/#linear", 
            "text": "\u6458\u81ea google material design  \u6587\u6863 .  \u4e00\u4e2a linear progress \u6307\u793a\u5668\u5e94\u8be5\u603b\u662f\u4ece 0% \u586b\u5145\u5230 100%\uff0c\u7edd\u5bf9\u4e0d\u80fd\u53cd\u7740\u586b\u5145\u3002 It should be represented by bars on the edge of a header or sheet that appear and disappear.", 
            "title": "Linear"
        }, 
        {
            "location": "/components/progress/#_3", 
            "text": "I. \u5728\u4f60\u7684  build.grade  \u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0  appcompat  \u5e93\u3002  dependencies   { \n     compile   com.android.support:appcompat-v7:X.X.X   // where X.X.X version  }   II. \u521b\u5efa\u4f60\u7684 activity \u5e76\u7ee7\u627f\u81ea  android.support.v7.app.AppCompatActivity \u3002  public   class   MainActivity   extends   AppCompatActivity   { \n     ...  }   III. \u5728  layout.xml  \u5185\u7684\u4efb\u610f\u4f4d\u7f6e\u58f0\u660e\u4f60\u7684  ProgressBar \u3002  ProgressBar \n     style= @style/Widget.AppCompat.ProgressBar.Horizontal \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content /", 
            "title": "\u5982\u4f55\u6dfb\u52a0?"
        }, 
        {
            "location": "/components/progress/#_4", 
            "text": "\u521b\u5efa\u4e0d\u786e\u5b9a\u7684  ProgressBar  \u8bbe\u7f6e  android:indeterminate  \u5c5e\u6027\u7684\u503c\u4e3a true\u3002  ProgressBar \n     style= @style/Widget.AppCompat.ProgressBar.Horizontal \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:indeterminate= true /", 
            "title": "\u4e0d\u786e\u5b9a\u7684"
        }, 
        {
            "location": "/components/progress/#_5", 
            "text": "I. \u521b\u5efa\u786e\u5b9a\u7684  ProgressBar  \u8bbe\u7f6e  android:indeterminate  \u5c5e\u6027\u7684\u503c\u4e3a false\u3002  ProgressBar \n     android:id= @+id/progressBar \n     style= @style/Widget.AppCompat.ProgressBar.Horizontal \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:indeterminate= false \n     android:max= 100 \n     android:progress= 20 /   \u4f7f\u7528  android:max  \u5c5e\u6027\u53bb\u6307\u5b9a\u6700\u5927\u8fdb\u5ea6\u6570\u3002\u5b83\u9ed8\u8ba4\u7b49\u4e8e100\u3002  \u4f7f\u7528  android:progress  \u5c5e\u6027\u8bbe\u7f6e\u8fdb\u5ea6\u9ed8\u8ba4\u4f4d\u7f6e\u3002  II. \u4ece UI \u7ebf\u7a0b\u4f7f\u7528  setProgress(int progress)  \u65b9\u6cd5\u53bb\u66f4\u65b0\u8fdb\u5ea6\u4f4d\u7f6e\u3002  ProgressBar   progressBar   =   ( ProgressBar )   findViewById ( R . id . progressBar );  progressBar . setProgress ( 50 );", 
            "title": "\u786e\u5b9a\u7684"
        }, 
        {
            "location": "/components/progress/#_6", 
            "text": "I. \u521b\u5efa\u7f13\u51b2\u7684  ProgressBar  \u8bbe\u7f6e  android:indeterminate  \u5c5e\u6027\u7684\u503c\u4e3a false\u3002  ProgressBar \n     android:id= @+id/progressBar \n     style= @style/Widget.AppCompat.ProgressBar.Horizontal \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:indeterminate= false \n     android:max= 100 \n     android:progress= 10 \n     android:secondaryProgress= 50 /   \u4f7f\u7528  android:secondaryProgress  \u5c5e\u6027\u8bbe\u7f6e\u9ed8\u8ba4\u7684\u7f13\u51b2\u503c\u3002  II. \u4f7f\u7528  setSecondaryProgress(int progress)  \u65b9\u6cd5\u53bb\u66f4\u65b0\u7f13\u51b2\u8fdb\u5ea6\u4f4d\u7f6e\u3002  ProgressBar   progressBar   =   ( ProgressBar )   findViewById ( R . id . progressBar );  // set current progress  progressBar . setProgress ( 20 );  // set buffered progress  progressBar . setSecondaryProgress ( 50 );", 
            "title": "\u7f13\u51b2\u7684"
        }, 
        {
            "location": "/components/progress/#_7", 
            "text": "\u521b\u5efa\u4e0d\u786e\u5b9a\u7684  ProgressBar  \u8bbe\u7f6e  android:indeterminate  \u5c5e\u6027\u7684\u503c\u4e3a true\u3002  ProgressBar \n     android:id= @+id/progressBar \n     style= @style/Widget.AppCompat.ProgressBar.Horizontal \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:indeterminate= true /   \u6bcf\u5f53\u4f60\u9700\u8981\u4ece\u4e0d\u786e\u5b9a\u7684\u5207\u6362\u5230\u786e\u5b9a\u7684\u8fdb\u5ea6\uff0c\u53ef\u4ee5\u4f7f\u7528  setIndeterminate(boolean indeterminate)  \u65b9\u6cd5\u3002  ProgressBar   progressBar   =   ( ProgressBar )   findViewById ( R . id . progressBar );  progressBar . setIndeterminate ( false );", 
            "title": "\u4e0d\u786e\u5b9a\u7684\u548c\u786e\u5b9a\u7684"
        }, 
        {
            "location": "/components/progress/#_8", 
            "text": "I. \u5728\u4f60\u7684  values-v21/styles.xml  \u5185\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002  style   name= LinearProgress   parent= Theme.AppCompat.Light \n     item   name= colorAccent @color/indigo /item \n     item   name= android:progressBackgroundTint @color/pink /item  /style   II. \u901a\u8fc7  android:theme  \u5c5e\u6027\u5e94\u7528\u8fd9\u4e2a\u6837\u5f0f\u5230\u4f60\u7684  ProgressBar \u3002  ProgressBar \n     android:theme= @style/LinearProgress \n     style= @style/Widget.AppCompat.ProgressBar.Horizontal \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content /    \u5907\u6ce8:  android:progressBackgroundTint  \u5c5e\u6027\u53ea\u5de5\u4f5c\u5728\u786e\u5b9a\u7684  ProgressBar \u3002  \u539f\u6587\u4f5c\u8005\uff1aYakiv Mospan  \u539f\u6587\u94fe\u63a5\uff1a Linear Progress", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?"
        }, 
        {
            "location": "/components/rating-bar/", 
            "text": "Rating Bar\n\n\n\n\n\n\n\u6458\u81ea Google \u7684\n\u6587\u6863\n\n\nRatingBar \u662f SeekBar \u548c ProgressBar \u7684\u4e00\u4e2a\u6269\u5c55\u7ec4\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528\u661f\u661f\u6765\u4f5c\u4e3a\u8bc4\u5206\u5c55\u793a\u3002\u5f53\u4f7f\u7528\u9ed8\u8ba4\u5c3a\u5bf8\u7684 RatingBar \u7684\u65f6\u5019\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u89e6\u6478/\u62d6\u62fd\u64cd\u4f5c\u6216\u8005\u65b9\u5411\u952e\u8bbe\u7f6e\u8bc4\u5206\u3002\nratingBarStyleSmall\n \u548c \nratingBarStyleIndicator\n \u4e0d\u652f\u6301\u4e0e\u7528\u6237\u4ea4\u4e92\uff0c\u53ea\u80fd\u88ab\u4f5c\u4e3a\u6307\u793a\u5668\u6765\u4f7f\u7528\u3002\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0\uff1f\n\n\nI. \u5728\u4f60\u7684 \nbuild.gradle\n \u91cc\u6dfb\u52a0\u6700\u65b0\u7248\u672c\u7684 \nappcompat\n \u5e93\u3002\n\n\ndependencies\n \n{\n\n    \ncompile\n \ncom.android.support:appcompat-v7:X.X.X\n \n// where X.X.X version\n\n\n}\n\n\n\n\n\n\nII. \u8ba9\u4f60\u7684 Activity \u7ee7\u627f\u81ea \nandroid.support.v7.app.AppCompatActivity\n \u3002\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n    \n...\n\n\n}\n\n\n\n\n\n\nIII. \u5728\u4efb\u610f\u7684 \nlayout.xml\n \u58f0\u660e \nRatingBar\n \u3002\n\n\nRatingBar\n\n    \nandroid:rating=\n3.5\n\n    \nandroid:stepSize=\n0.5\n\n    \nandroid:numStars=\n5\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n \n/\n\n\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f\uff1f\n\n\n\n\nI. \u5728 \nstyles.xml\n \u91cc\u58f0\u660e\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002\n\n\nstyle\n \nname=\nRatingBar\n \nparent=\nTheme.AppCompat\n\n    \nitem\n \nname=\ncolorControlNormal\n@color/indigo\n/item\n\n    \nitem\n \nname=\ncolorControlActivated\n@color/pink\n/item\n\n\n/style\n\n\n\n\n\n\nII. \u8bbe\u7f6e \nRatingBar\n \u7684 \nandroid:theme\n \u5c5e\u6027\u503c\u4e3a\u4e0a\u9762\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002\n\n\nRatingBar\n\n    \nandroid:theme=\n@style/RatingBar\n\n    \nandroid:rating=\n3\n\n    \nandroid:stepSize=\n0.5\n\n    \nandroid:numStars=\n5\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n \n/\n\n\n\n\n\n\n\n\n\u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\n\n\n\u539f\u6587\u4f5c\u8005 Yakiv Mospan \u539f\u6587\u94fe\u63a5 \nRating Bar", 
            "title": "Rating Bar"
        }, 
        {
            "location": "/components/rating-bar/#rating-bar", 
            "text": "\u6458\u81ea Google \u7684 \u6587\u6863  RatingBar \u662f SeekBar \u548c ProgressBar \u7684\u4e00\u4e2a\u6269\u5c55\u7ec4\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528\u661f\u661f\u6765\u4f5c\u4e3a\u8bc4\u5206\u5c55\u793a\u3002\u5f53\u4f7f\u7528\u9ed8\u8ba4\u5c3a\u5bf8\u7684 RatingBar \u7684\u65f6\u5019\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u89e6\u6478/\u62d6\u62fd\u64cd\u4f5c\u6216\u8005\u65b9\u5411\u952e\u8bbe\u7f6e\u8bc4\u5206\u3002 ratingBarStyleSmall  \u548c  ratingBarStyleIndicator  \u4e0d\u652f\u6301\u4e0e\u7528\u6237\u4ea4\u4e92\uff0c\u53ea\u80fd\u88ab\u4f5c\u4e3a\u6307\u793a\u5668\u6765\u4f7f\u7528\u3002", 
            "title": "Rating Bar"
        }, 
        {
            "location": "/components/rating-bar/#_1", 
            "text": "I. \u5728\u4f60\u7684  build.gradle  \u91cc\u6dfb\u52a0\u6700\u65b0\u7248\u672c\u7684  appcompat  \u5e93\u3002  dependencies   { \n     compile   com.android.support:appcompat-v7:X.X.X   // where X.X.X version  }   II. \u8ba9\u4f60\u7684 Activity \u7ee7\u627f\u81ea  android.support.v7.app.AppCompatActivity  \u3002  public   class   MainActivity   extends   AppCompatActivity   { \n     ...  }   III. \u5728\u4efb\u610f\u7684  layout.xml  \u58f0\u660e  RatingBar  \u3002  RatingBar \n     android:rating= 3.5 \n     android:stepSize= 0.5 \n     android:numStars= 5 \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content   /", 
            "title": "\u5982\u4f55\u6dfb\u52a0\uff1f"
        }, 
        {
            "location": "/components/rating-bar/#_2", 
            "text": "I. \u5728  styles.xml  \u91cc\u58f0\u660e\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002  style   name= RatingBar   parent= Theme.AppCompat \n     item   name= colorControlNormal @color/indigo /item \n     item   name= colorControlActivated @color/pink /item  /style   II. \u8bbe\u7f6e  RatingBar  \u7684  android:theme  \u5c5e\u6027\u503c\u4e3a\u4e0a\u9762\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002  RatingBar \n     android:theme= @style/RatingBar \n     android:rating= 3 \n     android:stepSize= 0.5 \n     android:numStars= 5 \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content   /    \u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63  \u539f\u6587\u4f5c\u8005 Yakiv Mospan \u539f\u6587\u94fe\u63a5  Rating Bar", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f\uff1f"
        }, 
        {
            "location": "/components/selection-controls/", 
            "text": "Selection Controls\n\n\nCheck Box\n\n\n\n\n\n\n\u6458\u81ea google material design \n\u6587\u6863\n.\n\n\nCheckboxes\u5141\u8bb8\u7528\u6237\u4ece\u4e00\u7ec4\u9009\u9879\u4e2d\u9009\u62e9\u591a\u4e2a\u9009\u9879\u3002\n\n\n\u5982\u679c\u4f60\u6709\u591a\u4e2a\u9009\u9879\u51fa\u73b0\u5728\u5217\u8868\u4e2d,\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 Checkboxes \u4ee3\u66ff on/off Switches \u6765\u8282\u7701\u7a7a\u95f4\u3002\n\n\n\u5982\u679c\u4f60\u53ea\u6709\u4e00\u4e2a\u9009\u9879\uff0c\u907f\u514d\u4f7f\u7528\u4e00\u4e2a Checkbox\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a on/off switch\u3002\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0?\n\n\nI. \u5728\u4f60\u7684 \nbuild.grade\n \u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0 \nappcompat\n \u5e93\u3002\n\n\ndependencies\n \n{\n\n    \ncompile\n \ncom.android.support:appcompat-v7:X.X.X\n \n// where X.X.X version\n\n\n}\n\n\n\n\n\n\nII. \u8ba9\u4f60\u7684 Activity \u7ee7\u627f\u81ea \nandroid.support.v7.app.AppCompatActivity\n\u3002\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n    \n...\n\n\n}\n\n\n\n\n\n\nIII. \u5728 \nlayout.xml\n \u6587\u4ef6\u5185\u4efb\u4e00\u4f4d\u7f6e\u58f0\u660e\u4f60\u7684 \nCheckBox\n\n\nCheckBox\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:checked=\ntrue\n\n    \nandroid:text=\nCheck Box\n/\n\n\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?\n\n\n\n\nI. \u5728 \nstyles.xml\n \u6587\u4ef6\u5185\u58f0\u660e\u4f60\u7684\u81ea\u5b9a\u4e49\u6837\u5f0f.\n\n\nstyle\n \nname=\nMyCheckBox\n \nparent=\nTheme.AppCompat.Light\n\n    \nitem\n \nname=\ncolorControlNormal\n@color/indigo\n/item\n\n    \nitem\n \nname=\ncolorControlActivated\n@color/pink\n/item\n\n\n/style\n\n\n\n\n\n\nII. \u5c06\u8fd9\u4e2a\u6837\u5f0f\u901a\u8fc7 \nandroid:theme\n \u5c5e\u6027\u5e94\u7528\u5230\u4f60\u7684 \nCheckBox\n.\n\n\nCheckBox\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:checked=\ntrue\n\n    \nandroid:text=\nCheck Box\n\n    \nandroid:theme=\n@style/MyCheckBox\n/\n\n\n\n\n\n\n\n\n\u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\n\u539f\u6587\u4f5c\u8005\uff1a\nDmytro Danylyk\n\n\u539f\u6587\u94fe\u63a5\uff1a\nhttp://www.materialdoc.com/check-box/\n\n\n\n\nRadio Button\n\n\n\n\n\n\n\u6458\u81ea google material design \n\u6587\u6863\n.\n\n\nRadio buttons \u5141\u8bb8\u7528\u6237\u4ece\u4e00\u7ec4\u9009\u9879\u4e2d\u9009\u62e9\u4e00\u4e2a\u9009\u9879\u3002\u5982\u679c\u4f60\u89c9\u5f97\u7528\u6237\u9700\u8981\u5e76\u6392\u770b\u5230\u6240\u6709\u53ef\u9009\u9879\uff0c\u5e76\u7528 radio buttons \u4ece\u4e2d\u9009\u62e9\u552f\u4e00\u7684\u4e00\u4e2a\u9009\u9879\u3002\n\n\n\u90a3\u4e48\uff0c\u53ef\u4ee5\u8003\u8651\u7528\u4e00\u4e2a\u4e0b\u62c9\u83dc\u5355\uff0c\u76f8\u5bf9\u4e8e\u663e\u793a\u6240\u6709\u9009\u9879\u4f1a\u5360\u7528\u66f4\u5c11\u7684\u7a7a\u95f4\u3002\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0?\n\n\nI. \u5728\u4f60\u7684 \nbuild.grade\n \u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0 \nappcompat\n\u5e93.\n\n\ndependencies\n \n{\n\n    \ncompile\n \ncom.android.support:appcompat-v7:X.X.X\n \n// where X.X.X version\n\n\n}\n\n\n\n\n\n\nII. \u8ba9\u4f60\u7684 activity \u7ee7\u627f\u81ea \nandroid.support.v7.app.AppCompatActivity\n.\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n    \n...\n\n\n}\n\n\n\n\n\n\nIII. \u5728 \nlayout.xml\n \u6587\u4ef6\u5185\u4efb\u610f\u4f4d\u7f6e\u58f0\u660e\u4f60\u7684 \nRadioButton\n\n\nRadioButton\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:checked=\ntrue\n\n    \nandroid:text=\nRadio Button\n/\n\n\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?\n\n\n\n\nI. \u5728 \nstyles.xml\n \u6587\u4ef6\u5185\u58f0\u660e\u4f60\u7684\u81ea\u5b9a\u4e49\u6837\u5f0f.\n\n\nstyle\n \nname=\nMyRadioButton\n \nparent=\nTheme.AppCompat.Light\n\n    \nitem\n \nname=\ncolorControlNormal\n@color/indigo\n/item\n\n    \nitem\n \nname=\ncolorControlActivated\n@color/pink\n/item\n\n\n/style\n\n\n\n\n\n\nII. \u901a\u8fc7 \nandroid:theme\n \u5c5e\u6027\u5c06\u8fd9\u4e2a\u6837\u5f0f\u5e94\u7528\u5230\u4f60\u7684 \nRadioButton\n .\n\n\nRadioButton\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:checked=\ntrue\n\n    \nandroid:text=\nRadio Button\n\n    \nandroid:theme=\n@style/MyRadioButton\n/\n\n\n\n\n\n\n\n\n\u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\n\u539f\u6587\u4f5c\u8005\uff1aDmytro Danylyk \u539f\u6587\u94fe\u63a5\uff1a\nhttp://www.materialdoc.com/radio-button/\n\n\n\n\nSwitch\n\n\n\n\n\n\n\u6458\u81ea google material design \n\u6587\u6863\n.\n\n\nOn/off Switches \u5207\u6362\u53ef\u4ee5\u8bbe\u7f6e\u5355\u9009\u72b6\u6001\u3002\u5f00\u5173\u63a7\u5236\u7684\u9009\u9879\uff0c\u4ee5\u53ca\u5b83\u6240\u5904\u7684\u72b6\u6001\uff0c\u5e94\u8be5\u901a\u8fc7\u4e0e\u5b83\u5bf9\u5e94\u4e00\u81f4\u7684\u5185\u90e8\u6807\u7b7e\u660e\u786e\u5730\u5c55\u793a\u51fa\u6765\uff0c\u4ee5\u8fbe\u5230\u4e0e radio button\uff08\u5355\u9009\u6309\u94ae\uff09\u76f8\u540c\u7684\u89c6\u89c9\u6548\u679c\u3002\n\n\non/off \u6ed1\u52a8\u5f00\u5173\u7528\u6587\u5b57\u6807\u793a \u201con\u201d \u548c \u201coff\u201d \u7684\u505a\u6cd5\u5df2\u88ab\u5f03\u7528\u3002\u8bf7\u7528\u6587\u9996\u6240\u793a\u56fe\u4f8b\u6765\u4ee3\u66ff\u3002\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0?\n\n\nI. \u5728\u4f60\u7684 \nbuild.grade\n \u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0 \nappcompat\n \u5e93\u3002\n\n\ndependencies\n \n{\n\n    \ncompile\n \ncom.android.support:appcompat-v7:X.X.X\n \n// where X.X.X version\n\n\n}\n\n\n\n\n\n\nII. \u8ba9\u4f60\u7684 \nactivity\n \u7ee7\u627f\u81ea \nandroid.support.v7.app.AppCompatActivity\n\u3002\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n    \n...\n\n\n}\n\n\n\n\n\n\nIII. \u5728\u4efb\u610f\u7684 \nlayout.xml\n \u6587\u4ef6\u5185\u58f0\u660e\u4f60\u7684 \nSwitchCompat\n \u3002\n\n\nandroid.support.v7.widget.SwitchCompat\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:checked=\ntrue\n \n/\n\n\n\n\n\n\n\n\nSwitchCompat \u662f Switch \u63a7\u4ef6\u7684\u5411\u4e0b\u517c\u5bb9\u7248\u672c\u3002\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?\n\n\n\n\nI. \u5728\u4f60\u7684 \nstyles.xml\n \u6587\u4ef6\u5185\u58f0\u660e\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002\n\n\nstyle\n \nname=\nMySwitch\n \nparent=\nTheme.AppCompat.Light\n\n    \n!-- active thumb \n track color (30% transparency) --\n\n    \nitem\n \nname=\ncolorControlActivated\n@color/indigo\n/item\n\n\n    \n!-- inactive thumb color --\n\n    \nitem\n \nname=\ncolorSwitchThumbNormal\n@color/pink\n/item\n\n\n    \n!-- inactive track color (30% transparency) --\n\n    \nitem\n \nname=\nandroid:colorForeground\n@color/grey\n/item\n\n\n/style\n\n\n\n\n\n\nII. \u5728\u4f60\u7684 \nSwitchCompat\n \u58f0\u660e\u91cc\u8bbe\u7f6e \nandroid:theme\n \u7684\u5c5e\u6027\u503c\u4e3a\u4f60\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002\n\n\nandroid.support.v7.widget.SwitchCompat\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:checked=\ntrue\n\n    \nandroid:theme=\n@style/MySwitch\n \n/\n\n\n\n\n\n\n\n\nAndroid \u4f1a\u81ea\u52a8\u7ed9 \nSwitchCompat\n \u7684 \ncolorControlActivated\n \u548c \nandroid:colorForeground\n \u589e\u52a0 30% \u7684\u900f\u660e\u5ea6\u3002\n\n\n\u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\n\n\n\u539f\u6587\u4f5c\u8005\uff1a\nDmytro Danylyk\n\n\u539f\u6587\u94fe\u63a5\uff1a\nSwitch", 
            "title": "Selection controls"
        }, 
        {
            "location": "/components/selection-controls/#selection-controls", 
            "text": "", 
            "title": "Selection Controls"
        }, 
        {
            "location": "/components/selection-controls/#check-box", 
            "text": "\u6458\u81ea google material design  \u6587\u6863 .  Checkboxes\u5141\u8bb8\u7528\u6237\u4ece\u4e00\u7ec4\u9009\u9879\u4e2d\u9009\u62e9\u591a\u4e2a\u9009\u9879\u3002  \u5982\u679c\u4f60\u6709\u591a\u4e2a\u9009\u9879\u51fa\u73b0\u5728\u5217\u8868\u4e2d,\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 Checkboxes \u4ee3\u66ff on/off Switches \u6765\u8282\u7701\u7a7a\u95f4\u3002  \u5982\u679c\u4f60\u53ea\u6709\u4e00\u4e2a\u9009\u9879\uff0c\u907f\u514d\u4f7f\u7528\u4e00\u4e2a Checkbox\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a on/off switch\u3002", 
            "title": "Check Box"
        }, 
        {
            "location": "/components/selection-controls/#_1", 
            "text": "I. \u5728\u4f60\u7684  build.grade  \u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0  appcompat  \u5e93\u3002  dependencies   { \n     compile   com.android.support:appcompat-v7:X.X.X   // where X.X.X version  }   II. \u8ba9\u4f60\u7684 Activity \u7ee7\u627f\u81ea  android.support.v7.app.AppCompatActivity \u3002  public   class   MainActivity   extends   AppCompatActivity   { \n     ...  }   III. \u5728  layout.xml  \u6587\u4ef6\u5185\u4efb\u4e00\u4f4d\u7f6e\u58f0\u660e\u4f60\u7684  CheckBox  CheckBox \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:checked= true \n     android:text= Check Box /", 
            "title": "\u5982\u4f55\u6dfb\u52a0?"
        }, 
        {
            "location": "/components/selection-controls/#_2", 
            "text": "I. \u5728  styles.xml  \u6587\u4ef6\u5185\u58f0\u660e\u4f60\u7684\u81ea\u5b9a\u4e49\u6837\u5f0f.  style   name= MyCheckBox   parent= Theme.AppCompat.Light \n     item   name= colorControlNormal @color/indigo /item \n     item   name= colorControlActivated @color/pink /item  /style   II. \u5c06\u8fd9\u4e2a\u6837\u5f0f\u901a\u8fc7  android:theme  \u5c5e\u6027\u5e94\u7528\u5230\u4f60\u7684  CheckBox .  CheckBox \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:checked= true \n     android:text= Check Box \n     android:theme= @style/MyCheckBox /    \u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\n\u539f\u6587\u4f5c\u8005\uff1a Dmytro Danylyk \n\u539f\u6587\u94fe\u63a5\uff1a http://www.materialdoc.com/check-box/", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?"
        }, 
        {
            "location": "/components/selection-controls/#radio-button", 
            "text": "\u6458\u81ea google material design  \u6587\u6863 .  Radio buttons \u5141\u8bb8\u7528\u6237\u4ece\u4e00\u7ec4\u9009\u9879\u4e2d\u9009\u62e9\u4e00\u4e2a\u9009\u9879\u3002\u5982\u679c\u4f60\u89c9\u5f97\u7528\u6237\u9700\u8981\u5e76\u6392\u770b\u5230\u6240\u6709\u53ef\u9009\u9879\uff0c\u5e76\u7528 radio buttons \u4ece\u4e2d\u9009\u62e9\u552f\u4e00\u7684\u4e00\u4e2a\u9009\u9879\u3002  \u90a3\u4e48\uff0c\u53ef\u4ee5\u8003\u8651\u7528\u4e00\u4e2a\u4e0b\u62c9\u83dc\u5355\uff0c\u76f8\u5bf9\u4e8e\u663e\u793a\u6240\u6709\u9009\u9879\u4f1a\u5360\u7528\u66f4\u5c11\u7684\u7a7a\u95f4\u3002", 
            "title": "Radio Button"
        }, 
        {
            "location": "/components/selection-controls/#_3", 
            "text": "I. \u5728\u4f60\u7684  build.grade  \u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0  appcompat \u5e93.  dependencies   { \n     compile   com.android.support:appcompat-v7:X.X.X   // where X.X.X version  }   II. \u8ba9\u4f60\u7684 activity \u7ee7\u627f\u81ea  android.support.v7.app.AppCompatActivity .  public   class   MainActivity   extends   AppCompatActivity   { \n     ...  }   III. \u5728  layout.xml  \u6587\u4ef6\u5185\u4efb\u610f\u4f4d\u7f6e\u58f0\u660e\u4f60\u7684  RadioButton  RadioButton \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:checked= true \n     android:text= Radio Button /", 
            "title": "\u5982\u4f55\u6dfb\u52a0?"
        }, 
        {
            "location": "/components/selection-controls/#_4", 
            "text": "I. \u5728  styles.xml  \u6587\u4ef6\u5185\u58f0\u660e\u4f60\u7684\u81ea\u5b9a\u4e49\u6837\u5f0f.  style   name= MyRadioButton   parent= Theme.AppCompat.Light \n     item   name= colorControlNormal @color/indigo /item \n     item   name= colorControlActivated @color/pink /item  /style   II. \u901a\u8fc7  android:theme  \u5c5e\u6027\u5c06\u8fd9\u4e2a\u6837\u5f0f\u5e94\u7528\u5230\u4f60\u7684  RadioButton  .  RadioButton \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:checked= true \n     android:text= Radio Button \n     android:theme= @style/MyRadioButton /    \u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\n\u539f\u6587\u4f5c\u8005\uff1aDmytro Danylyk \u539f\u6587\u94fe\u63a5\uff1a http://www.materialdoc.com/radio-button/", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?"
        }, 
        {
            "location": "/components/selection-controls/#switch", 
            "text": "\u6458\u81ea google material design  \u6587\u6863 .  On/off Switches \u5207\u6362\u53ef\u4ee5\u8bbe\u7f6e\u5355\u9009\u72b6\u6001\u3002\u5f00\u5173\u63a7\u5236\u7684\u9009\u9879\uff0c\u4ee5\u53ca\u5b83\u6240\u5904\u7684\u72b6\u6001\uff0c\u5e94\u8be5\u901a\u8fc7\u4e0e\u5b83\u5bf9\u5e94\u4e00\u81f4\u7684\u5185\u90e8\u6807\u7b7e\u660e\u786e\u5730\u5c55\u793a\u51fa\u6765\uff0c\u4ee5\u8fbe\u5230\u4e0e radio button\uff08\u5355\u9009\u6309\u94ae\uff09\u76f8\u540c\u7684\u89c6\u89c9\u6548\u679c\u3002  on/off \u6ed1\u52a8\u5f00\u5173\u7528\u6587\u5b57\u6807\u793a \u201con\u201d \u548c \u201coff\u201d \u7684\u505a\u6cd5\u5df2\u88ab\u5f03\u7528\u3002\u8bf7\u7528\u6587\u9996\u6240\u793a\u56fe\u4f8b\u6765\u4ee3\u66ff\u3002", 
            "title": "Switch"
        }, 
        {
            "location": "/components/selection-controls/#_5", 
            "text": "I. \u5728\u4f60\u7684  build.grade  \u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0  appcompat  \u5e93\u3002  dependencies   { \n     compile   com.android.support:appcompat-v7:X.X.X   // where X.X.X version  }   II. \u8ba9\u4f60\u7684  activity  \u7ee7\u627f\u81ea  android.support.v7.app.AppCompatActivity \u3002  public   class   MainActivity   extends   AppCompatActivity   { \n     ...  }   III. \u5728\u4efb\u610f\u7684  layout.xml  \u6587\u4ef6\u5185\u58f0\u660e\u4f60\u7684  SwitchCompat  \u3002  android.support.v7.widget.SwitchCompat \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:checked= true   /    SwitchCompat \u662f Switch \u63a7\u4ef6\u7684\u5411\u4e0b\u517c\u5bb9\u7248\u672c\u3002", 
            "title": "\u5982\u4f55\u6dfb\u52a0?"
        }, 
        {
            "location": "/components/selection-controls/#_6", 
            "text": "I. \u5728\u4f60\u7684  styles.xml  \u6587\u4ef6\u5185\u58f0\u660e\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002  style   name= MySwitch   parent= Theme.AppCompat.Light \n     !-- active thumb   track color (30% transparency) -- \n     item   name= colorControlActivated @color/indigo /item \n\n     !-- inactive thumb color -- \n     item   name= colorSwitchThumbNormal @color/pink /item \n\n     !-- inactive track color (30% transparency) -- \n     item   name= android:colorForeground @color/grey /item  /style   II. \u5728\u4f60\u7684  SwitchCompat  \u58f0\u660e\u91cc\u8bbe\u7f6e  android:theme  \u7684\u5c5e\u6027\u503c\u4e3a\u4f60\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002  android.support.v7.widget.SwitchCompat \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:checked= true \n     android:theme= @style/MySwitch   /    Android \u4f1a\u81ea\u52a8\u7ed9  SwitchCompat  \u7684  colorControlActivated  \u548c  android:colorForeground  \u589e\u52a0 30% \u7684\u900f\u660e\u5ea6\u3002  \u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63  \u539f\u6587\u4f5c\u8005\uff1a Dmytro Danylyk \n\u539f\u6587\u94fe\u63a5\uff1a Switch", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?"
        }, 
        {
            "location": "/components/snackbars-and-toasts/", 
            "text": "Snackbars \n Toasts\n\n\nSnack Bar\n\n\n\n\n\n\n\u6458\u81ea google material design \n\u6587\u6863\n.\n\n\nSnackbars \u901a\u8fc7\u5728\u5c4f\u5e55\u5e95\u90e8\u663e\u793a\u4e00\u4e2a\u7b80\u77ed\u7684\u4fe1\u606f\uff0c\u63d0\u4f9b\u4e86\u5173\u4e8e\u4e00\u4e2a\u64cd\u4f5c\u7684\u8f7b\u91cf\u53cd\u9988\u3002\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0?\n\n\nI. \u5728\u4f60\u7684 \nbuild.grade\n \u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0\u6700\u65b0\u7684 \ndesign\n \u5e93\u3002\n\n\ndependencies\n \n{\n\n    \n// optionally, Snackbar can be used in pair\n\n    \n// with CoordinatorLayout\n\n    \n// compile \ncom.android.support:appcompat-v7:X.X.X\n\n\n    \ncompile\n \ncom.android.support:design:X.X.X\n \n// where X.X.X version\n\n\n}\n\n\n\n\n\n\nII. \u7528 \nmake()\n \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a \nSnackbar\n \u5b9e\u4f8b\uff0c\u7136\u540e\u8c03\u7528 \nshow()\n \u65b9\u6cd5\u3002\n\n\nSnackbar\n\n    \n.\nmake\n(\nview\n,\n \nNo network connection.\n,\nSnackbar\n.\nLENGTH_SHORT\n)\n\n    \n.\nshow\n();\n\n\n\n\n\n\n\u53c2\u6570 \nview\n \u88ab\u7528\u6765\u67e5\u627e\u7236\u89c6\u56fe\u3002Snackbar \u5c06\u88ab\u663e\u793a\u5728\u5b83\u7684\u4e0a\u9762\u3002\n\n\n\n\nSnackbar \u5c06\u5c1d\u8bd5\u5e76\u627e\u5230\u4e00\u4e2a\u7236\u89c6\u56fe\u53bb\u63a7\u5236 Snackbar's \u89c6\u56fe\u3002Snackbar \u5c06\u6cbf\u7740\u89c6\u56fe\u6811\u53bb\u5c1d\u8bd5\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684\u7236\u89c6\u56fe\uff0c\u5b83\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a \nCoordinatorLayout\n \u6216\u8005\u7a97\u53e3\u7684 decor's \u5185\u5bb9\u89c6\u56fe\uff0c\u4ee5\u5148\u627e\u5230\u7684\u4e3a\u51c6\u3002\n\n\n\n\nDuration\n\n\n\u6307\u5b9a \nSnackbar\n \u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u591a\u957f\u65f6\u95f4\u4f7f\u7528 \nsetDuration\n \u65b9\u6cd5\u3002\n\n\n// \u9884\u5b9a\u4e49\u7684\u6301\u7eed\u65f6\u95f4\u5e38\u91cf\n\n\nSnackbar\n.\nLENGTH_SHORT\n \n// 1500 millis\n\n\nSnackbar\n.\nLENGTH_LONG\n \n// 2750 millis\n\n\nSnackbar\n.\nLENGTH_INDEFINITE\n\n\n\n// \u4f60\u53ef\u8bbe\u7f6e\u81ea\u5df1\u5b9a\u4e49\u7684\u6301\u7eed\u65f6\u95f4\n\n\nsnackbar\n.\nsetDuration\n(\nTimeUnit\n.\nMINUTES\n.\ntoMillis\n(\n1\n));\n\n\n\n\n\n\nDismiss\n\n\n\u4f7f\u7528 \ndismiss()\n \u65b9\u6cd5\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019 dismiss \u6389 \nSnackbar\n \u3002\n\n\nSnackbar\n \nsnackBar\n \n=\n \nSnackbar\n.\nmake\n(\nview\n,\n \ntext\n,\n \nduration\n);\n\n\nsnackBar\n.\ndismiss\n();\n \n//hide snackbar\n\n\n\n\n\n\nEvents\n\n\n\u6bcf\u5f53 \nSnackbar\n \u88ab\u663e\u793a\u6216\u8005\u9690\u85cf\u7684\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528 \nsetCallback\n \u65b9\u6cd5\u6765\u8ffd\u8e2a\u3002\n\n\nSnackbar\n\n  \n.\nmake\n(...)\n\n  \n.\nsetCallback\n(\nnew\n \nSnackbar\n.\nCallback\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonDismissed\n(\nSnackbar\n \nsnackbar\n,\n \nint\n \nevent\n)\n \n{\n\n      \n// do some action on dismiss\n\n    \n}\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonShown\n(\nSnackbar\n \nsnackbar\n)\n \n{\n\n      \n// do some action when snackbar is showed\n\n    \n}\n\n  \n})\n\n\n\n\n\n\n\u53c2\u6570 \nevent\n \u6765\u81ea\u4e8e \nonDismissed()\n\uff0c\u662f \nSnackbar.Callback\n \u5185\u9884\u5b9a\u4e49\u7684\u5e38\u91cf\u4e4b\u4e00\u3002\n\n\nActions\n\n\n\n\nSnackbar \u53ef\u4ee5\u5305\u542b\u4e00\u4e2a action \u3002\u901a\u8fc7\u8c03\u7528 \nsetAction()\n \u65b9\u6cd5\u6dfb\u52a0\u5b83\u3002\n\n\nSnackbar\n\n \n.\nmake\n(...)\n\n \n.\nsetAction\n(\nRetry\n,\n \nnew\n \nView\n.\nOnClickListener\n()\n \n{\n\n             \n@Override\n\n             \npublic\n \nvoid\n \nonClick\n(\nView\n \nv\n)\n \n{\n\n               \n// retry to send email here\n\n             \n}\n\n           \n})\n\n\n\n\n\n\n\u8981\u5f00\u542f\u6ed1\u52a8 dismiss \u548c\u81ea\u52a8\u7684\u79fb\u52a8\u50cf \nFloatingActionButton\n \u8fd9\u6837\u7684\u7ec4\u4ef6\u9700\u8981\u4f7f\u7528 \nCoordinatorLayout\n \u4f5c\u4e3a\u6839\u5e03\u5c40\u3002\n\n\nandroid\n.\nsupport\n.\ndesign\n.\nwidget\n.\nCoordinatorLayout\n\n        \nxmlns\n:\nandroid\n=\nhttp://schemas.android.com/apk/res/android\n\n        \nxmlns\n:\ntools\n=\nhttp://schemas.android.com/tools\n\n        \nandroid\n:\nlayout_width\n=\nmatch_parent\n\n        \nandroid\n:\nlayout_height\n=\nmatch_parent\n\n\n    \nandroid\n.\nsupport\n.\ndesign\n.\nwidget\n.\nFloatingActionButton\n\n            \nandroid\n:\nlayout_width\n=\nwrap_content\n\n            \nandroid\n:\nlayout_height\n=\nwrap_content\n\n            \nandroid\n:\nlayout_gravity\n=\nend|bottom\n\n            \nandroid\n:\nsrc\n=\n@android:drawable/ic_menu_call\n/\n\n\n/\nandroid\n.\nsupport\n.\ndesign\n.\nwidget\n.\nCoordinatorLayout\n\n\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?\n\n\n\n\n\u901a\u8fc7\u4e3b\u9898\n\n\nI. \u5728\u4f60\u7684 \nvalues/styles.xml\n \u6587\u4ef6\u5185\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002\n\n\nstyle\n \nname=\nSnackbarTheme\n \nparent=\nTheme.AppCompat.Light\n\n    \nitem\n \nname=\ncolorAccent\n@color/indigo\n/item\n\n    \nitem\n \nname=\nandroid:textColor\n@color/pink\n/item\n\n\n/style\n\n\n\n\n\n\nII. \u5728 \nAndroidManifest.xml\n \u4e2d\u901a\u8fc7\nandroid:theme\n \u5c5e\u6027\u5e94\u7528\u8fd9\u4e2a\u6837\u5f0f\u5230\u4f60\u7684 \nActivity\n\u3002\n\n\nactivity\n\n    \nandroid\n:\nname\n=\n.SnackbarActivity\n\n    \nandroid\n:\ntheme\n=\n@style/AppTheme\n\n\n/\nactivity\n\n\n\n\n\n\n\n\n\u5907\u6ce8: \u5e94\u7528\u4e3b\u9898\u5230 \nActivity\n \u5c06\u4f1a\u5e94\u7528 \ncolorAccent\n \u548c \nandroid:textColor\n \u5230\u5b83\u5185\u90e8\u7684\u6240\u6709 view\u3002\n\n\n\n\n\u901a\u8fc7\u4ee3\u7801\n\n\n\u4f7f\u7528 \ngetView()\n \u65b9\u6cd5\u83b7\u53d6 \nSnackbar\n \u89c6\u56fe\u5e76\u6539\u53d8\u5b83\u7684\u5c5e\u6027\u3002\n\n\n// \u521b\u5efa\u5b9e\u4f8b\n\n\nSnackbar\n \nsnackbar\n \n=\n \nSnackbar\n.\nmake\n(\nview\n,\n \ntext\n,\n \nduration\n);\n\n\n\n// \u8bbe\u7f6e\u52a8\u4f5c\u6309\u94ae\u989c\u8272\n\n\nsnackbar\n.\nsetActionTextColor\n(\ngetResources\n().\ngetColor\n(\nR\n.\ncolor\n.\nindigo\n));\n\n\n\n// \u83b7\u53d6 snackbar \u89c6\u56fe\n\n\nView\n \nsnackbarView\n \n=\n \nsnackbar\n.\ngetView\n();\n\n\n\n// \u6539\u53d8 snackbar \u6587\u672c\u989c\u8272\n\n\nint\n \nsnackbarTextId\n \n=\n \nandroid\n.\nsupport\n.\ndesign\n.\nR\n.\nid\n.\nsnackbar_text\n;\n\n\nTextView\n \ntextView\n \n=\n \n(\nTextView\n)\nsnackbarView\n.\nfindViewById\n(\nsnackbarTextId\n);\n\n\ntextView\n.\nsetTextColor\n(\ngetResources\n().\ngetColor\n(\nR\n.\ncolor\n.\nindigo\n));\n\n\n\n// \u6539\u53d8 snackbar \u80cc\u666f\n\n\nsnackbarView\n.\nsetBackgroundColor\n(\nColor\n.\nMAGENTA\n);\n\n\n\n\n\n\n\u901a\u8fc7\u81ea\u5b9a\u4e49 view\n\n\n\n\nI. \u5728\u4f60\u7684 values/layout \u6587\u4ef6\u5939\u91cc\u6dfb\u52a0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5e03\u5c40\u3002\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nLinearLayout\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n              \nandroid:orientation=\nhorizontal\n\n              \nandroid:layout_width=\nmatch_parent\n\n              \nandroid:layout_height=\nwrap_content\n\n\n    \nButton\n\n        \nandroid:id=\n@+id/snackbar_action\n\n        \nandroid:layout_width=\nwrap_content\n\n        \nandroid:layout_height=\nwrap_content\n\n        \nandroid:layout_marginLeft=\n@dimen/design_snackbar_extra_spacing_horizontal\n\n        \nandroid:layout_marginStart=\n@dimen/design_snackbar_extra_spacing_horizontal\n\n        \nandroid:layout_gravity=\ncenter_vertical|right|end\n\n        \nandroid:paddingTop=\n@dimen/design_snackbar_padding_vertical\n\n        \nandroid:paddingBottom=\n@dimen/design_snackbar_padding_vertical\n\n        \nandroid:paddingLeft=\n@dimen/design_snackbar_padding_horizontal\n\n        \nandroid:paddingRight=\n@dimen/design_snackbar_padding_horizontal\n\n        \nandroid:visibility=\ngone\n\n        \nandroid:textColor=\n?attr/colorAccent\n\n        \nstyle=\n?attr/borderlessButtonStyle\n/\n\n\n    \nTextView\n\n        \nandroid:gravity=\ncenter_vertical|right\n\n        \nandroid:id=\n@+id/snackbar_text\n\n        \nandroid:layout_width=\nwrap_content\n\n        \nandroid:layout_height=\nwrap_content\n\n        \nandroid:layout_weight=\n1\n\n        \nandroid:paddingTop=\n@dimen/design_snackbar_padding_vertical\n\n        \nandroid:paddingBottom=\n@dimen/design_snackbar_padding_vertical\n\n        \nandroid:paddingLeft=\n@dimen/design_snackbar_padding_horizontal\n\n        \nandroid:paddingRight=\n@dimen/design_snackbar_padding_horizontal\n\n        \nandroid:textAppearance=\n@style/TextAppearance.Design.Snackbar.Message\n\n        \nandroid:maxLines=\n@integer/design_snackbar_text_max_lines\n\n        \nandroid:layout_gravity=\ncenter_vertical|left|start\n\n        \nandroid:ellipsize=\nend\n/\n\n\n\n/LinearLayout\n\n\n\n\n\n\n\n\n\u5907\u6ce8\n\n\nUse `@dimen/design_snackbar` values to match material design guidelines.\n\nUse `?attr/colorAccent` to apply your Application Theme changes to `Snackbar`.\n\n\n\n\n\n\n\nII. \u7ee7\u627f\u81ea \nBaseTransientBottomBar\n \u7c7b.\n\n\npublic\n \nclass\n \nCustomSnackbar\n \nextends\n \nBaseTransientBottomBar\nCustomSnackbar\n \n{\n\n\n    \n/**\n\n\n     * Constructor for the transient bottom bar.\n\n\n     *\n\n\n     * @param parent The parent for this transient bottom bar.\n\n\n     * @param content The content view for this transient bottom bar.\n\n\n     * @param contentViewCallback The content view callback for this transient bottom bar.\n\n\n     */\n\n    \nprivate\n \nCustomSnackbar\n(\nViewGroup\n \nparent\n,\n \nView\n \ncontent\n,\n\n                \nContentViewCallback\n \ncontentViewCallback\n)\n \n{\n\n        \nsuper\n(\nparent\n,\n \ncontent\n,\n \ncontentViewCallback\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\nIII. \u6dfb\u52a0 \nBaseTransientBottomBar.ContentViewCallback\n\n\npublic\n \nclass\n \nCustomSnackbar\n \n...\n \n{\n\n\n  \n...\n\n\n  \nprivate\n \nstatic\n \nclass\n \nContentViewCallback\n \nimplements\n\n                       \nBaseTransientBottomBar\n.\nContentViewCallback\n \n{\n\n\n      \n// view inflated from custom layout\n\n      \nprivate\n \nView\n \ncontent\n;\n\n\n      \npublic\n \nContentViewCallback\n(\nView\n \ncontent\n)\n \n{\n\n          \nthis\n.\ncontent\n \n=\n \ncontent\n;\n\n      \n}\n\n\n      \n@Override\n\n      \npublic\n \nvoid\n \nanimateContentIn\n(\nint\n \ndelay\n,\n \nint\n \nduration\n)\n \n{\n\n          \n// add custom *in animations for your views\n\n          \n// e.g. original snackbar uses alpha animation, from 0 to 1\n\n          \nViewCompat\n.\nsetScaleY\n(\ncontent\n,\n \n0f\n);\n\n          \nViewCompat\n.\nanimate\n(\ncontent\n)\n\n                    \n.\nscaleY\n(\n1f\n).\nsetDuration\n(\nduration\n)\n\n                    \n.\nsetStartDelay\n(\ndelay\n);\n\n      \n}\n\n\n      \n@Override\n\n      \npublic\n \nvoid\n \nanimateContentOut\n(\nint\n \ndelay\n,\n \nint\n \nduration\n)\n \n{\n\n          \n// add custom *out animations for your views\n\n          \n// e.g. original snackbar uses alpha animation, from 1 to 0\n\n          \nViewCompat\n.\nsetScaleY\n(\ncontent\n,\n \n1f\n);\n\n          \nViewCompat\n.\nanimate\n(\ncontent\n)\n\n                    \n.\nscaleY\n(\n0f\n)\n\n                    \n.\nsetDuration\n(\nduration\n)\n\n                    \n.\nsetStartDelay\n(\ndelay\n);\n\n      \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\nIV. \u901a\u8fc7\u81ea\u5b9a\u4e49\u5e03\u5c40\u548c\u65b9\u6cd5\u6765\u521b\u5efa \nSnackbar\n\n\npublic\n \nclass\n \nfinal\n \nCustomSnackbar\n \n...{\n\n\n \n...\n\n\n\npublic\n \nstatic\n \nCustomSnackbar\n \nmake\n(\nViewGroup\n \nparent\n,\n \n@Duration\n \nint\n \nduration\n)\n \n{\n\n     \n// inflate custom layout\n\n     \nLayoutInflater\n \ninflater\n \n=\n \nLayoutInflater\n.\nfrom\n(\nparent\n.\ngetContext\n());\n\n     \nView\n \ncontent\n \n=\n \ninflater\n.\ninflate\n(\nR\n.\nlayout\n.\nsnackbar_view\n,\n \nparent\n,\n \nfalse\n);\n\n\n     \n// create snackbar with custom view\n\n     \nContentViewCallback\n \ncallback\n=\n \nnew\n \nContentViewCallback\n(\ncontent\n);\n\n     \nCustomSnackbar\n \ncustomSnackbar\n \n=\n \nnew\n \nCustomSnackbar\n(\nparent\n,\n \ncontent\n,\n \ncallback\n);\n\n\n     \n// set snackbar duration\n\n     \ncustomSnackbar\n.\nsetDuration\n(\nduration\n);\n\n     \nreturn\n \ncustomSnackbar\n;\n\n \n}\n\n\n \n// set text in custom layout\n\n \npublic\n \nCustomSnackbar\n \nsetText\n(\nCharSequence\n \ntext\n)\n \n{\n\n     \nTextView\n \ntextView\n \n=\n \n(\nTextView\n)\n \ngetView\n().\nfindViewById\n(\nR\n.\nid\n.\nsnackbar_text\n);\n\n     \ntextView\n.\nsetText\n(\ntext\n);\n\n     \nreturn\n \nthis\n;\n\n \n}\n\n\n \n// set action in custom layout\n\n \npublic\n \nCustomSnackbar\n \nsetAction\n(\nCharSequence\n \ntext\n,\n \nfinal\n \nOnClickListener\n \nlistener\n)\n \n{\n\n     \nButton\n \nactionView\n \n=\n \n(\nButton\n)\n \ngetView\n().\nfindViewById\n(\nR\n.\nid\n.\nsnackbar_action\n);\n\n     \nactionView\n.\nsetText\n(\ntext\n);\n\n     \nactionView\n.\nsetVisibility\n(\nView\n.\nVISIBLE\n);\n\n     \nactionView\n.\nsetOnClickListener\n(\nnew\n \nView\n.\nOnClickListener\n()\n \n{\n\n         \n@Override\n\n         \npublic\n \nvoid\n \nonClick\n(\nView\n \nview\n)\n \n{\n\n             \nlistener\n.\nonClick\n(\nview\n);\n\n             \n// Now dismiss the Snackbar\n\n             \ndismiss\n();\n\n         \n}\n\n     \n});\n\n     \nreturn\n \nthis\n;\n\n \n}\n\n\n}\n\n\n\n\n\n\nV. \u521b\u5efa \nCustomSnackbar\n \u5b9e\u4f8b\u5bf9\u8c61\u5e76\u8c03\u7528 \nshow()\n \u65b9\u6cd5\u3002\n\n\nCustomSnackbar\n \ncustomSnackbar\n \n=\n \nCustomSnackbar\n.\nmake\n(\nrooView\n,\n \nCustomSnackbar\n.\nLENGTH_INDEFINITE\n);\n\n\ncustomSnackbar\n.\nsetText\n(\nNo network connection!\n);\n\n\ncustomSnackbar\n.\nsetAction\n(\nRetry\n,\n \nnew\n \nView\n.\nOnClickListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonClick\n(\nView\n \nv\n)\n \n{\n\n        \n// handle click here\n\n    \n}\n\n\n});\n\n\ncustomSnackbar\n.\nshow\n();\n\n\n\n\n\n\n\n\n\u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\n\n\n\u539f\u6587\u4f5c\u8005\uff1aYakiv Mospan \u539f\u6587\u5730\u5740\uff1a\nSnackbar\n\n\n\n\nToast\n\n\n\n\n\n\n\u6458\u81ea google material design \n\u6587\u6863\n.\n\n\nAndroid \u53e6\u5916\u63d0\u4f9b\u4e86\u4e00\u4e2a toast\uff0c\u4e3b\u8981\u7528\u4e8e\u7cfb\u7edf\u6d88\u606f\u3002Toasts \u8ddf snackers \u7c7b\u4f3c\uff0c\u4f46\u662f\u4e0d\u80fd\u5305\u542b actions \u548c \u4e0d\u80fd\u61c2\u5c4f\u5e55\u6ed1\u52a8\u5173\u95ed\u6389\u3002\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0?\n\n\n\u7528 make() \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a \nToast\n \u5b9e\u4f8b\uff0c\u7136\u540e\u8c03\u7528 show() \u65b9\u6cd5\u3002\n\n\nToast\n.\nmakeText\n(\ncontext\n,\n \nNo network connection.\n,\n \nduration\n).\nshow\n();\n\n\n\n\n\n\nDuration\n\n\n\u4f7f\u7528 \nmakeText()\n \u65b9\u6cd5\u7684 \nduration\n \u53c2\u6570 \u6216\u8005 \nsetDuration\n  \u65b9\u6cd5\u6307\u5b9a Snackbar \u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u591a\u957f\u65f6\u95f4\u3002\n\n\n// you can use only those 2 predefined constants\n\n\nduration\n \n=\n \nToast\n.\nLENGTH_SHORT\n;\n \n// 2000 millis\n\n\nduration\n \n=\n \nToast\n.\nLENGTH_LONG\n;\n \n// 3500 millis\n\n\n\ntoast\n.\nsetDuration\n(\nduration\n);\n\n\n\n\n\n\nCancel\n\n\n\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u4f7f\u7528 \ncancel()\n \u65b9\u6cd5\u624b\u52a8\u7684\u53bb\u9690\u85cf \nToast\n  \u3002\n\n\nToast\n \ntoast\n=\n \nToast\n.\nmake\n(\nview\n,\n \ntext\n,\n \nduration\n).\nshow\n();\n\n\ntoast\n.\ncancel\n();\n \n//hide toast\n\n\n\n\n\n\n\n\n\u5982\u679c\u5728\u5b83\u663e\u793a\u7684\u65f6\u5019\u5173\u95ed\u5b83\u6216\u8005\u5728\u4e0d\u60f3\u663e\u793a\u7684\u65f6\u5019\u5b83\u4ecd\u7136\u663e\u793a\uff0c\u901a\u5e38\u4f60\u4e0d\u9700\u8981\u53bb\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u3002\u5b83\u4f1a\u5728\u6301\u7eed\u9002\u5f53\u7684\u65f6\u95f4\u4e4b\u540e\u81ea\u5df1\u6d88\u5931\u3002\n\n\n\n\nPositioning\n\n\n\u7528 \nsetGravity()\n \u53ef\u4ee5\u6539\u53d8 \nToast\n \u7684\u663e\u793a\u4f4d\u7f6e\u3002\n\n\nint\n \ngravity\n \n=\n \nGravity\n.\nCENTER\n;\n \n// the position of toast\n\n\nint\n \nxOffset\n \n=\n \n0\n;\n \n// horizontal offset from current gravity\n\n\nint\n \nyOffset\n \n=\n \n0\n;\n \n// vertical offset from current gravity\n\n\n\nToast\n \ntoast\n=\n \nToast\n.\nmake\n(\nview\n,\n \ntext\n,\n \nduration\n);\n\n\ntoast\n.\nsetGravity\n(\ngravity\n,\n \nxOffset\n,\n \nyOffset\n);\n\n\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?\n\n\n\n\n\u7528\u4ee3\u7801\n\n\n// \u521b\u5efa Toast \u5b9e\u4f8b\n\n\nToast\n \ntoast\n \n=\n \nToast\n.\nmakeText\n(\ncontext\n,\n \ntext\n,\n \nduration\n);\n\n\n\n// \u8bbe\u7f6e\u6d88\u606f\u989c\u8272\n\n\nTextView\n \ntextView\n=\n \n(\nTextView\n)\n \ntoast\n.\ngetView\n().\nfindViewById\n(\nandroid\n.\nR\n.\nid\n.\nmessage\n);\n\n\ntextView\n.\nsetTextColor\n(\nColor\n.\nYELLOW\n);\n\n\n\n// \u8bbe\u7f6e\u80cc\u666f\u989c\u8272\n\n\ntoast\n.\ngetView\n().\nsetBackgroundColor\n(\ngetResources\n().\ngetColor\n(\nR\n.\ncolor\n.\nindigo\n));\n\n\n\n\n\n\n\u7528\u81ea\u5b9a\u4e49 View\n\n\nI. \u5728 \nlayout.xml\n \u6587\u4ef6\u5185\u7684\u4efb\u610f\u4f4d\u7f6e\u58f0\u660e\u4f60\u7684\u81ea\u5b9a\u4e49 View\u3002\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nTextView\n\n        \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n        \nandroid:id=\n@+id/txtMessage\n\n        \nandroid:layout_width=\nwrap_content\n\n        \nandroid:layout_height=\nwrap_content\n\n        \nandroid:drawableStart=\n@drawable/ic_report_problem\n\n        \nandroid:drawablePadding=\n8dp\n\n        \nandroid:paddingTop=\n8dp\n\n        \nandroid:paddingBottom=\n8dp\n\n        \nandroid:paddingLeft=\n16dp\n\n        \nandroid:paddingRight=\n16dp\n\n        \nandroid:gravity=\ncenter\n\n        \nandroid:textColor=\n@android:color/white\n\n        \nandroid:textSize=\n16dp\n\n        \nandroid:text=\nNo connection.\n\n        \nandroid:background=\n@color/indigo\n/\n\n\n\n\n\n\nII. \u901a\u8fc7  \nsetView()\n \u65b9\u6cd5\u8bbe\u7f6e\u4f60\u7684\u81ea\u5b9a\u4e49 View \u5230 \nToast\n \u3002\n\n\n// \u521b\u5efa Toast \u5b9e\u4f8b\n\n\nToast\n \ntoast\n \n=\n \nnew\n \nToast\n(\ngetApplicationContext\n());\n\n\n\n// \u521b\u5efa\u81ea\u5b9a\u4e49 view\n\n\nView\n \nview\n \n=\n \ngetLayoutInflater\n().\ninflate\n(\nR\n.\nlayout\n.\ntoast_view\n,\n \nnull\n);\n\n\n\n// \u8bbe\u7f6e\u81ea\u5b9a\u4e49 view\n\n\ntoast\n.\nsetView\n(\nview\n);\n\n\n\n// \u8bbe\u7f6e\u663e\u793a\u6301\u7eed\u65f6\u95f4\n\n\ntoast\n.\nsetDuration\n(\nToast\n.\nLENGTH_LONG\n);\n\n\n\n// \u8bbe\u7f6e\u4f4d\u7f6e\n\n\nint\n \nmargin\n \n=\n \ngetResources\n().\ngetDimensionPixelSize\n(\nR\n.\ndimen\n.\ntoast_vertical_margin\n);\n\n\ntoast\n.\nsetGravity\n(\nGravity\n.\nBOTTOM\n \n|\n \nGravity\n.\nCENTER_VERTICAL\n,\n \n0\n,\n \nmargin\n);\n\n\n\n// \u663e\u793a Toast\n\n\ntoast\n.\nshow\n();\n\n\n\n\n\n\n\n\n\u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\n\n\n\u539f\u6587\u4f5c\u8005\uff1aYakiv Mospan \u539f\u6587\u5730\u5740\uff1a\nToast", 
            "title": "Snackbars & Toasts"
        }, 
        {
            "location": "/components/snackbars-and-toasts/#snackbars-toasts", 
            "text": "", 
            "title": "Snackbars &amp; Toasts"
        }, 
        {
            "location": "/components/snackbars-and-toasts/#snack-bar", 
            "text": "\u6458\u81ea google material design  \u6587\u6863 .  Snackbars \u901a\u8fc7\u5728\u5c4f\u5e55\u5e95\u90e8\u663e\u793a\u4e00\u4e2a\u7b80\u77ed\u7684\u4fe1\u606f\uff0c\u63d0\u4f9b\u4e86\u5173\u4e8e\u4e00\u4e2a\u64cd\u4f5c\u7684\u8f7b\u91cf\u53cd\u9988\u3002", 
            "title": "Snack Bar"
        }, 
        {
            "location": "/components/snackbars-and-toasts/#_1", 
            "text": "I. \u5728\u4f60\u7684  build.grade  \u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0\u6700\u65b0\u7684  design  \u5e93\u3002  dependencies   { \n     // optionally, Snackbar can be used in pair \n     // with CoordinatorLayout \n     // compile  com.android.support:appcompat-v7:X.X.X \n\n     compile   com.android.support:design:X.X.X   // where X.X.X version  }   II. \u7528  make()  \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a  Snackbar  \u5b9e\u4f8b\uff0c\u7136\u540e\u8c03\u7528  show()  \u65b9\u6cd5\u3002  Snackbar \n     . make ( view ,   No network connection. , Snackbar . LENGTH_SHORT ) \n     . show ();   \u53c2\u6570  view  \u88ab\u7528\u6765\u67e5\u627e\u7236\u89c6\u56fe\u3002Snackbar \u5c06\u88ab\u663e\u793a\u5728\u5b83\u7684\u4e0a\u9762\u3002   Snackbar \u5c06\u5c1d\u8bd5\u5e76\u627e\u5230\u4e00\u4e2a\u7236\u89c6\u56fe\u53bb\u63a7\u5236 Snackbar's \u89c6\u56fe\u3002Snackbar \u5c06\u6cbf\u7740\u89c6\u56fe\u6811\u53bb\u5c1d\u8bd5\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684\u7236\u89c6\u56fe\uff0c\u5b83\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a  CoordinatorLayout  \u6216\u8005\u7a97\u53e3\u7684 decor's \u5185\u5bb9\u89c6\u56fe\uff0c\u4ee5\u5148\u627e\u5230\u7684\u4e3a\u51c6\u3002", 
            "title": "\u5982\u4f55\u6dfb\u52a0?"
        }, 
        {
            "location": "/components/snackbars-and-toasts/#duration", 
            "text": "\u6307\u5b9a  Snackbar  \u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u591a\u957f\u65f6\u95f4\u4f7f\u7528  setDuration  \u65b9\u6cd5\u3002  // \u9884\u5b9a\u4e49\u7684\u6301\u7eed\u65f6\u95f4\u5e38\u91cf  Snackbar . LENGTH_SHORT   // 1500 millis  Snackbar . LENGTH_LONG   // 2750 millis  Snackbar . LENGTH_INDEFINITE  // \u4f60\u53ef\u8bbe\u7f6e\u81ea\u5df1\u5b9a\u4e49\u7684\u6301\u7eed\u65f6\u95f4  snackbar . setDuration ( TimeUnit . MINUTES . toMillis ( 1 ));", 
            "title": "Duration"
        }, 
        {
            "location": "/components/snackbars-and-toasts/#dismiss", 
            "text": "\u4f7f\u7528  dismiss()  \u65b9\u6cd5\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019 dismiss \u6389  Snackbar  \u3002  Snackbar   snackBar   =   Snackbar . make ( view ,   text ,   duration );  snackBar . dismiss ();   //hide snackbar", 
            "title": "Dismiss"
        }, 
        {
            "location": "/components/snackbars-and-toasts/#events", 
            "text": "\u6bcf\u5f53  Snackbar  \u88ab\u663e\u793a\u6216\u8005\u9690\u85cf\u7684\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528  setCallback  \u65b9\u6cd5\u6765\u8ffd\u8e2a\u3002  Snackbar \n   . make (...) \n   . setCallback ( new   Snackbar . Callback ()   { \n     @Override \n     public   void   onDismissed ( Snackbar   snackbar ,   int   event )   { \n       // do some action on dismiss \n     } \n     @Override \n     public   void   onShown ( Snackbar   snackbar )   { \n       // do some action when snackbar is showed \n     } \n   })   \u53c2\u6570  event  \u6765\u81ea\u4e8e  onDismissed() \uff0c\u662f  Snackbar.Callback  \u5185\u9884\u5b9a\u4e49\u7684\u5e38\u91cf\u4e4b\u4e00\u3002", 
            "title": "Events"
        }, 
        {
            "location": "/components/snackbars-and-toasts/#actions", 
            "text": "Snackbar \u53ef\u4ee5\u5305\u542b\u4e00\u4e2a action \u3002\u901a\u8fc7\u8c03\u7528  setAction()  \u65b9\u6cd5\u6dfb\u52a0\u5b83\u3002  Snackbar \n  . make (...) \n  . setAction ( Retry ,   new   View . OnClickListener ()   { \n              @Override \n              public   void   onClick ( View   v )   { \n                // retry to send email here \n              } \n            })   \u8981\u5f00\u542f\u6ed1\u52a8 dismiss \u548c\u81ea\u52a8\u7684\u79fb\u52a8\u50cf  FloatingActionButton  \u8fd9\u6837\u7684\u7ec4\u4ef6\u9700\u8981\u4f7f\u7528  CoordinatorLayout  \u4f5c\u4e3a\u6839\u5e03\u5c40\u3002  android . support . design . widget . CoordinatorLayout \n         xmlns : android = http://schemas.android.com/apk/res/android \n         xmlns : tools = http://schemas.android.com/tools \n         android : layout_width = match_parent \n         android : layout_height = match_parent \n\n     android . support . design . widget . FloatingActionButton \n             android : layout_width = wrap_content \n             android : layout_height = wrap_content \n             android : layout_gravity = end|bottom \n             android : src = @android:drawable/ic_menu_call /  / android . support . design . widget . CoordinatorLayout", 
            "title": "Actions"
        }, 
        {
            "location": "/components/snackbars-and-toasts/#_2", 
            "text": "", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?"
        }, 
        {
            "location": "/components/snackbars-and-toasts/#_3", 
            "text": "I. \u5728\u4f60\u7684  values/styles.xml  \u6587\u4ef6\u5185\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002  style   name= SnackbarTheme   parent= Theme.AppCompat.Light \n     item   name= colorAccent @color/indigo /item \n     item   name= android:textColor @color/pink /item  /style   II. \u5728  AndroidManifest.xml  \u4e2d\u901a\u8fc7 android:theme  \u5c5e\u6027\u5e94\u7528\u8fd9\u4e2a\u6837\u5f0f\u5230\u4f60\u7684  Activity \u3002  activity \n     android : name = .SnackbarActivity \n     android : theme = @style/AppTheme  / activity    \u5907\u6ce8: \u5e94\u7528\u4e3b\u9898\u5230  Activity  \u5c06\u4f1a\u5e94\u7528  colorAccent  \u548c  android:textColor  \u5230\u5b83\u5185\u90e8\u7684\u6240\u6709 view\u3002", 
            "title": "\u901a\u8fc7\u4e3b\u9898"
        }, 
        {
            "location": "/components/snackbars-and-toasts/#_4", 
            "text": "\u4f7f\u7528  getView()  \u65b9\u6cd5\u83b7\u53d6  Snackbar  \u89c6\u56fe\u5e76\u6539\u53d8\u5b83\u7684\u5c5e\u6027\u3002  // \u521b\u5efa\u5b9e\u4f8b  Snackbar   snackbar   =   Snackbar . make ( view ,   text ,   duration );  // \u8bbe\u7f6e\u52a8\u4f5c\u6309\u94ae\u989c\u8272  snackbar . setActionTextColor ( getResources (). getColor ( R . color . indigo ));  // \u83b7\u53d6 snackbar \u89c6\u56fe  View   snackbarView   =   snackbar . getView ();  // \u6539\u53d8 snackbar \u6587\u672c\u989c\u8272  int   snackbarTextId   =   android . support . design . R . id . snackbar_text ;  TextView   textView   =   ( TextView ) snackbarView . findViewById ( snackbarTextId );  textView . setTextColor ( getResources (). getColor ( R . color . indigo ));  // \u6539\u53d8 snackbar \u80cc\u666f  snackbarView . setBackgroundColor ( Color . MAGENTA );", 
            "title": "\u901a\u8fc7\u4ee3\u7801"
        }, 
        {
            "location": "/components/snackbars-and-toasts/#view", 
            "text": "I. \u5728\u4f60\u7684 values/layout \u6587\u4ef6\u5939\u91cc\u6dfb\u52a0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5e03\u5c40\u3002  ?xml version= 1.0  encoding= utf-8 ?  LinearLayout   xmlns:android= http://schemas.android.com/apk/res/android \n               android:orientation= horizontal \n               android:layout_width= match_parent \n               android:layout_height= wrap_content \n\n     Button \n         android:id= @+id/snackbar_action \n         android:layout_width= wrap_content \n         android:layout_height= wrap_content \n         android:layout_marginLeft= @dimen/design_snackbar_extra_spacing_horizontal \n         android:layout_marginStart= @dimen/design_snackbar_extra_spacing_horizontal \n         android:layout_gravity= center_vertical|right|end \n         android:paddingTop= @dimen/design_snackbar_padding_vertical \n         android:paddingBottom= @dimen/design_snackbar_padding_vertical \n         android:paddingLeft= @dimen/design_snackbar_padding_horizontal \n         android:paddingRight= @dimen/design_snackbar_padding_horizontal \n         android:visibility= gone \n         android:textColor= ?attr/colorAccent \n         style= ?attr/borderlessButtonStyle / \n\n     TextView \n         android:gravity= center_vertical|right \n         android:id= @+id/snackbar_text \n         android:layout_width= wrap_content \n         android:layout_height= wrap_content \n         android:layout_weight= 1 \n         android:paddingTop= @dimen/design_snackbar_padding_vertical \n         android:paddingBottom= @dimen/design_snackbar_padding_vertical \n         android:paddingLeft= @dimen/design_snackbar_padding_horizontal \n         android:paddingRight= @dimen/design_snackbar_padding_horizontal \n         android:textAppearance= @style/TextAppearance.Design.Snackbar.Message \n         android:maxLines= @integer/design_snackbar_text_max_lines \n         android:layout_gravity= center_vertical|left|start \n         android:ellipsize= end /  /LinearLayout    \u5907\u6ce8  Use `@dimen/design_snackbar` values to match material design guidelines.\n\nUse `?attr/colorAccent` to apply your Application Theme changes to `Snackbar`.   II. \u7ee7\u627f\u81ea  BaseTransientBottomBar  \u7c7b.  public   class   CustomSnackbar   extends   BaseTransientBottomBar CustomSnackbar   { \n\n     /**       * Constructor for the transient bottom bar.       *       * @param parent The parent for this transient bottom bar.       * @param content The content view for this transient bottom bar.       * @param contentViewCallback The content view callback for this transient bottom bar.       */ \n     private   CustomSnackbar ( ViewGroup   parent ,   View   content , \n                 ContentViewCallback   contentViewCallback )   { \n         super ( parent ,   content ,   contentViewCallback ); \n     }  }   III. \u6dfb\u52a0  BaseTransientBottomBar.ContentViewCallback  public   class   CustomSnackbar   ...   { \n\n   ... \n\n   private   static   class   ContentViewCallback   implements \n                        BaseTransientBottomBar . ContentViewCallback   { \n\n       // view inflated from custom layout \n       private   View   content ; \n\n       public   ContentViewCallback ( View   content )   { \n           this . content   =   content ; \n       } \n\n       @Override \n       public   void   animateContentIn ( int   delay ,   int   duration )   { \n           // add custom *in animations for your views \n           // e.g. original snackbar uses alpha animation, from 0 to 1 \n           ViewCompat . setScaleY ( content ,   0f ); \n           ViewCompat . animate ( content ) \n                     . scaleY ( 1f ). setDuration ( duration ) \n                     . setStartDelay ( delay ); \n       } \n\n       @Override \n       public   void   animateContentOut ( int   delay ,   int   duration )   { \n           // add custom *out animations for your views \n           // e.g. original snackbar uses alpha animation, from 1 to 0 \n           ViewCompat . setScaleY ( content ,   1f ); \n           ViewCompat . animate ( content ) \n                     . scaleY ( 0f ) \n                     . setDuration ( duration ) \n                     . setStartDelay ( delay ); \n       } \n   }  }   IV. \u901a\u8fc7\u81ea\u5b9a\u4e49\u5e03\u5c40\u548c\u65b9\u6cd5\u6765\u521b\u5efa  Snackbar  public   class   final   CustomSnackbar   ...{ \n\n  ...  public   static   CustomSnackbar   make ( ViewGroup   parent ,   @Duration   int   duration )   { \n      // inflate custom layout \n      LayoutInflater   inflater   =   LayoutInflater . from ( parent . getContext ()); \n      View   content   =   inflater . inflate ( R . layout . snackbar_view ,   parent ,   false ); \n\n      // create snackbar with custom view \n      ContentViewCallback   callback =   new   ContentViewCallback ( content ); \n      CustomSnackbar   customSnackbar   =   new   CustomSnackbar ( parent ,   content ,   callback ); \n\n      // set snackbar duration \n      customSnackbar . setDuration ( duration ); \n      return   customSnackbar ; \n  } \n\n  // set text in custom layout \n  public   CustomSnackbar   setText ( CharSequence   text )   { \n      TextView   textView   =   ( TextView )   getView (). findViewById ( R . id . snackbar_text ); \n      textView . setText ( text ); \n      return   this ; \n  } \n\n  // set action in custom layout \n  public   CustomSnackbar   setAction ( CharSequence   text ,   final   OnClickListener   listener )   { \n      Button   actionView   =   ( Button )   getView (). findViewById ( R . id . snackbar_action ); \n      actionView . setText ( text ); \n      actionView . setVisibility ( View . VISIBLE ); \n      actionView . setOnClickListener ( new   View . OnClickListener ()   { \n          @Override \n          public   void   onClick ( View   view )   { \n              listener . onClick ( view ); \n              // Now dismiss the Snackbar \n              dismiss (); \n          } \n      }); \n      return   this ; \n  }  }   V. \u521b\u5efa  CustomSnackbar  \u5b9e\u4f8b\u5bf9\u8c61\u5e76\u8c03\u7528  show()  \u65b9\u6cd5\u3002  CustomSnackbar   customSnackbar   =   CustomSnackbar . make ( rooView ,   CustomSnackbar . LENGTH_INDEFINITE );  customSnackbar . setText ( No network connection! );  customSnackbar . setAction ( Retry ,   new   View . OnClickListener ()   { \n     @Override \n     public   void   onClick ( View   v )   { \n         // handle click here \n     }  });  customSnackbar . show ();    \u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63  \u539f\u6587\u4f5c\u8005\uff1aYakiv Mospan \u539f\u6587\u5730\u5740\uff1a Snackbar", 
            "title": "\u901a\u8fc7\u81ea\u5b9a\u4e49 view"
        }, 
        {
            "location": "/components/snackbars-and-toasts/#toast", 
            "text": "\u6458\u81ea google material design  \u6587\u6863 .  Android \u53e6\u5916\u63d0\u4f9b\u4e86\u4e00\u4e2a toast\uff0c\u4e3b\u8981\u7528\u4e8e\u7cfb\u7edf\u6d88\u606f\u3002Toasts \u8ddf snackers \u7c7b\u4f3c\uff0c\u4f46\u662f\u4e0d\u80fd\u5305\u542b actions \u548c \u4e0d\u80fd\u61c2\u5c4f\u5e55\u6ed1\u52a8\u5173\u95ed\u6389\u3002", 
            "title": "Toast"
        }, 
        {
            "location": "/components/snackbars-and-toasts/#_5", 
            "text": "\u7528 make() \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a  Toast  \u5b9e\u4f8b\uff0c\u7136\u540e\u8c03\u7528 show() \u65b9\u6cd5\u3002  Toast . makeText ( context ,   No network connection. ,   duration ). show ();", 
            "title": "\u5982\u4f55\u6dfb\u52a0?"
        }, 
        {
            "location": "/components/snackbars-and-toasts/#duration_1", 
            "text": "\u4f7f\u7528  makeText()  \u65b9\u6cd5\u7684  duration  \u53c2\u6570 \u6216\u8005  setDuration   \u65b9\u6cd5\u6307\u5b9a Snackbar \u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u591a\u957f\u65f6\u95f4\u3002  // you can use only those 2 predefined constants  duration   =   Toast . LENGTH_SHORT ;   // 2000 millis  duration   =   Toast . LENGTH_LONG ;   // 3500 millis  toast . setDuration ( duration );", 
            "title": "Duration"
        }, 
        {
            "location": "/components/snackbars-and-toasts/#cancel", 
            "text": "\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u4f7f\u7528  cancel()  \u65b9\u6cd5\u624b\u52a8\u7684\u53bb\u9690\u85cf  Toast   \u3002  Toast   toast =   Toast . make ( view ,   text ,   duration ). show ();  toast . cancel ();   //hide toast    \u5982\u679c\u5728\u5b83\u663e\u793a\u7684\u65f6\u5019\u5173\u95ed\u5b83\u6216\u8005\u5728\u4e0d\u60f3\u663e\u793a\u7684\u65f6\u5019\u5b83\u4ecd\u7136\u663e\u793a\uff0c\u901a\u5e38\u4f60\u4e0d\u9700\u8981\u53bb\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u3002\u5b83\u4f1a\u5728\u6301\u7eed\u9002\u5f53\u7684\u65f6\u95f4\u4e4b\u540e\u81ea\u5df1\u6d88\u5931\u3002", 
            "title": "Cancel"
        }, 
        {
            "location": "/components/snackbars-and-toasts/#positioning", 
            "text": "\u7528  setGravity()  \u53ef\u4ee5\u6539\u53d8  Toast  \u7684\u663e\u793a\u4f4d\u7f6e\u3002  int   gravity   =   Gravity . CENTER ;   // the position of toast  int   xOffset   =   0 ;   // horizontal offset from current gravity  int   yOffset   =   0 ;   // vertical offset from current gravity  Toast   toast =   Toast . make ( view ,   text ,   duration );  toast . setGravity ( gravity ,   xOffset ,   yOffset );", 
            "title": "Positioning"
        }, 
        {
            "location": "/components/snackbars-and-toasts/#_6", 
            "text": "", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?"
        }, 
        {
            "location": "/components/snackbars-and-toasts/#_7", 
            "text": "// \u521b\u5efa Toast \u5b9e\u4f8b  Toast   toast   =   Toast . makeText ( context ,   text ,   duration );  // \u8bbe\u7f6e\u6d88\u606f\u989c\u8272  TextView   textView =   ( TextView )   toast . getView (). findViewById ( android . R . id . message );  textView . setTextColor ( Color . YELLOW );  // \u8bbe\u7f6e\u80cc\u666f\u989c\u8272  toast . getView (). setBackgroundColor ( getResources (). getColor ( R . color . indigo ));", 
            "title": "\u7528\u4ee3\u7801"
        }, 
        {
            "location": "/components/snackbars-and-toasts/#view_1", 
            "text": "I. \u5728  layout.xml  \u6587\u4ef6\u5185\u7684\u4efb\u610f\u4f4d\u7f6e\u58f0\u660e\u4f60\u7684\u81ea\u5b9a\u4e49 View\u3002  ?xml version= 1.0  encoding= utf-8 ?  TextView \n         xmlns:android= http://schemas.android.com/apk/res/android \n         android:id= @+id/txtMessage \n         android:layout_width= wrap_content \n         android:layout_height= wrap_content \n         android:drawableStart= @drawable/ic_report_problem \n         android:drawablePadding= 8dp \n         android:paddingTop= 8dp \n         android:paddingBottom= 8dp \n         android:paddingLeft= 16dp \n         android:paddingRight= 16dp \n         android:gravity= center \n         android:textColor= @android:color/white \n         android:textSize= 16dp \n         android:text= No connection. \n         android:background= @color/indigo /   II. \u901a\u8fc7   setView()  \u65b9\u6cd5\u8bbe\u7f6e\u4f60\u7684\u81ea\u5b9a\u4e49 View \u5230  Toast  \u3002  // \u521b\u5efa Toast \u5b9e\u4f8b  Toast   toast   =   new   Toast ( getApplicationContext ());  // \u521b\u5efa\u81ea\u5b9a\u4e49 view  View   view   =   getLayoutInflater (). inflate ( R . layout . toast_view ,   null );  // \u8bbe\u7f6e\u81ea\u5b9a\u4e49 view  toast . setView ( view );  // \u8bbe\u7f6e\u663e\u793a\u6301\u7eed\u65f6\u95f4  toast . setDuration ( Toast . LENGTH_LONG );  // \u8bbe\u7f6e\u4f4d\u7f6e  int   margin   =   getResources (). getDimensionPixelSize ( R . dimen . toast_vertical_margin );  toast . setGravity ( Gravity . BOTTOM   |   Gravity . CENTER_VERTICAL ,   0 ,   margin );  // \u663e\u793a Toast  toast . show ();    \u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63  \u539f\u6587\u4f5c\u8005\uff1aYakiv Mospan \u539f\u6587\u5730\u5740\uff1a Toast", 
            "title": "\u7528\u81ea\u5b9a\u4e49 View"
        }, 
        {
            "location": "/components/tabs/", 
            "text": "Tabs\n\n\n\n\n\n\n\u6458\u81ea google material design \n\u6587\u6863\n\n\nTabs \u8ba9\u4e0d\u540c\u89c6\u56fe\u6216\u529f\u80fd\u4e4b\u95f4\u7684\u6d4f\u89c8\u5207\u6362\u548c\u6d4f\u89c8\u5206\u7c7b\u6570\u636e\u96c6\u5408\u53d8\u5f97\u5f88\u5bb9\u6613\u3002\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0\uff1f\n\n\nI. \u5728\u4f60\u7684 \nbuild.gradle\n \u91cc\u6dfb\u52a0\u6700\u65b0\u7248\u672c\u7684 \ndesign\n \u548c \nappcompat\n \u5e93\u3002\n\n\ndependencies\n \n{\n\n    \ncompile\n \ncom.android.support:appcompat-v7:X.X.X\n\n    \ncompile\n \ncom.android.support:design:X.X.X\n\n    \ncompile\n \ncom.android.support:support-v13:X.X.X\n\n    \n// where X.X.X version\n\n\n    \n// if you want to support android sdk \n 13\n\n    \n// you need to add support library v4 instead of v13\n\n\n}\n\n\n\n\n\n\nII. \u8ba9\u4f60\u7684 Activity \u7ee7\u627f\u81ea \nandroid.support.v7.app.AppCompatActivity\n \u3002\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n \n...\n\n\n}\n\n\n\n\n\n\nIII. \u5728\u4f60\u7684 \nlayout.xml\n \u6587\u4ef6\u91cc\u58f0\u660e \nTabLayout\n \u548c \nViewPager\n \u3002\n\n\nLinearLayout\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nmatch_parent\n\n    \nandroid:orientation=\nvertical\n\n\n    \nandroid.support.design.widget.TabLayout\n\n        \nandroid:id=\n@+id/tabLayout\n\n        \nandroid:layout_width=\nmatch_parent\n\n        \nandroid:layout_height=\nwrap_content\n\n        \nandroid:background=\n?attr/colorPrimary\n \n/\n\n\n    \nandroid.support.v4.view.ViewPager\n\n        \nandroid:id=\n@+id/viewPager\n\n        \nandroid:layout_width=\nmatch_parent\n\n        \nandroid:layout_height=\nmatch_parent\n \n/\n\n\n\n/LinearLayout\n\n\n\n\n\n\nIV. \u5c06 \nTabLayout\n \u548c \nViewPager\n \u7ec4\u5408\u8d77\u6765\u3002\n\n\nViewPager\n \nviewPager\n \n=\n \n(\nViewPager\n)\n \nfindViewById\n(\nR\n.\nid\n.\nviewPager\n);\n\n\n\n//set adapter to your ViewPager\n\n\nviewPager\n.\nsetAdapter\n(\nnew\n \nTabPagerAdapter\n(\ngetFragmentManager\n()));\n\n\n\nTabLayout\n \ntabLayout\n \n=\n \n(\nTabLayout\n)\n \nfindViewById\n(\nR\n.\nid\n.\ntabLayout\n);\n\n\ntabLayout\n.\nsetupWithViewPager\n(\nviewPager\n);\n\n\n\n\n\n\nV. \u5728 ViewPager \u7684 adapter \u91cc\u91cd\u5199 \ngetPageTitle\n \u65b9\u6cd5\uff0c\u5e76\u8fd4\u56de tab \u6807\u9898\u3002\n\n\n@Override\n\n\npublic\n \nCharSequence\n \ngetPageTitle\n(\nint\n \nposition\n)\n \n{\n\n     \nswitch\n \n(\nposition\n)\n \n{\n\n          \ncase\n \nITEM_ONE\n:\n\n               \nreturn\n \nItem One\n;\n\n          \n...\n\n     \n}\n\n\n}\n\n\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?\n\n\n\n\nI. \u5728\u4f60\u7684 \nstyles.xml\n \u91cc\u58f0\u660e\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002\n\n\nstyle\n \nname=\nTabLayoutStyle\n \nparent=\nWidget.Design.TabLayout\n\n    \nitem\n \nname=\ntabMaxWidth\n@dimen/tab_max_width\n/item\n\n    \nitem\n \nname=\ntabIndicatorColor\n@color/pink\n/item\n\n    \nitem\n \nname=\ntabIndicatorHeight\n2dp\n/item\n\n    \nitem\n \nname=\ntabPaddingStart\n8dp\n/item\n\n    \nitem\n \nname=\ntabPaddingEnd\n8dp\n/item\n\n    \nitem\n \nname=\ntabBackground\n?attr/selectableItemBackground\n/item\n\n    \nitem\n \nname=\ntabTextAppearance\n@style/TabTextAppearance\n/item\n\n    \nitem\n \nname=\ntabSelectedTextColor\n@android:color/white\n/item\n\n\n/style\n\n\n\nstyle\n \nname=\nTabTextAppearance\n \nparent=\nTextAppearance.Design.Tab\n\n    \nitem\n \nname=\nandroid:textSize\n14sp\n/item\n\n    \nitem\n \nname=\nandroid:textColor\n@color/color_white_semitransparent\n/item\n\n    \nitem\n \nname=\ntextAllCaps\ntrue\n/item\n\n\n/style\n\n\n\n\n\n\nII. \u8bbe\u7f6e\u4f60\u7684 \nTabLayout\n \u7684 \nstyle\n \u5c5e\u6027\u4e3a\u4e0a\u9762\u58f0\u660e\u7684\u6837\u5f0f\u3002\n\n\nandroid.support.design.widget.TabLayout\n\n        \nstyle=\n@style/TabLayoutStyle\n\n        \nandroid:id=\n@+id/tabLayout\n\n        \nandroid:layout_width=\nmatch_parent\n\n        \nandroid:layout_height=\nwrap_content\n/\n\n\n\n\n\n\nTabs with icons and text\n\n\n\n\nI. \u5728 ViewPager \u7684 adapter \u91cc\u91cd\u5199 \ngetPageTitle\n \u65b9\u6cd5\uff0c\u5e76\u8fd4\u56de tab \u6807\u9898\u3002\n\n\n@Override\n\n\npublic\n \nCharSequence\n \ngetPageTitle\n(\nint\n \nposition\n)\n \n{\n\n     \nswitch\n \n(\nposition\n)\n \n{\n\n          \ncase\n \nITEM_ONE\n:\n\n               \nreturn\n \nItem One\n;\n\n          \n...\n\n     \n}\n\n\n}\n\n\n\n\n\n\nII. \u4e3a\u6bcf\u4e00\u4e2a tab \u56fe\u6807\u521b\u5efa\u4e00\u4e2a\u9009\u62e9\u5668\u3002\n\n\nselector\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \nitem\n\n        \nandroid:state_selected=\ntrue\n\n        \nandroid:drawable=\n@drawable/ic_call_selected\n \n/\n\n    \nitem\n\n        \nandroid:state_selected=\nfalse\n\n        \nandroid:drawable=\n@drawable/ic_call_unselected\n \n/\n\n\n/selector\n\n\n\n\n\n\nIII. \u4f7f\u7528 \nTabLayout.Tab\n \u7684 \nsetIcon\n \u65b9\u6cd5\u6539\u53d8 tab \u7684\u56fe\u6807\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 \nTabLayout\n \u7684 \ngetTabAt\n \u65b9\u6cd5\uff0c\u5e76\u4f20\u5165 tab \u7684\u7d22\u5f15\uff0c\u6765\u83b7\u53d6 \nTabLayout.Tab\n \u5bf9\u8c61\u3002\n\n\n...\n\n\n//after initialization TabLayout and ViewPager\n\n\nTabLayout\n.\nTab\n \ntabCall\n \n=\n \ntabLayout\n.\ngetTabAt\n(\nITEM_CALL\n);\n\n\ntabCall\n.\nsetIcon\n(\nR\n.\ndrawable\n.\nselector_call\n);\n\n\n\n//repeat this code for all your tabs\n\n\n...\n\n\n\n\n\n\nTabs with icons only\n\n\n\n\nI. \u4e3a\u6bcf\u4e00\u4e2a tab \u56fe\u6807\u521b\u5efa\u4e00\u4e2a\u9009\u62e9\u5668\u3002\n\n\nselector\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \nitem\n\n        \nandroid:state_selected=\ntrue\n\n        \nandroid:drawable=\n@drawable/ic_call_selected\n \n/\n\n    \nitem\n\n        \nandroid:state_selected=\nfalse\n\n        \nandroid:drawable=\n@drawable/ic_call_unselected\n \n/\n\n\n/selector\n\n\n\n\n\n\nII. \u4f7f\u7528 \nTabLayout.Tab\n \u7684 \nsetIcon\n \u65b9\u6cd5\u6539\u53d8 tab \u7684\u56fe\u6807\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 \nTabLayout\n \u7684 \ngetTabAt\n \u65b9\u6cd5\uff0c\u5e76\u4f20\u5165 tab \u7684\u7d22\u5f15\uff0c\u6765\u83b7\u53d6 \nTabLayout.Tab\n \u5bf9\u8c61\u3002\n\n\n...\n\n\n//after initialization TabLayout and ViewPager\n\n\nTabLayout\n.\nTab\n \ntabCall\n \n=\n \ntabLayout\n.\ngetTabAt\n(\nITEM_CALL\n);\n\n\ntabCall\n.\nsetIcon\n(\nR\n.\ndrawable\n.\nselector_call\n);\n\n\n\n//repeat this code for all your tabs\n\n\n...\n\n\n\n\n\n\nScrollable Tabs\n\n\n\u8981\u8ba9\u4f60\u7684 \nTabLayout\n \u652f\u6301\u6eda\u52a8\uff0c\u9700\u8981\u6dfb\u52a0 \ncustom:tabMode\n \u5c5e\u6027\uff0c\u5e76\u8bbe\u7f6e\u5176\u503c\u4e3a \nscrollable\n \u3002\n\n\nandroid.support.design.widget.TabLayout\n\n        \nxmlns:custom=\nhttp://schemas.android.com/apk/res-auto\n\n        \nandroid:id=\n@+id/tabLayout\n\n        \nandroid:layout_width=\nmatch_parent\n\n        \nandroid:layout_height=\nwrap_content\n\n        \ncustom:tabMode=\nscrollable\n \n/\n\n\n\n\n\n\nCentered tabs\n\n\n\n\n\u521b\u5efa\u4f4d\u7f6e\u5c45\u4e2d\u7684 tabs \u9700\u8981\u6dfb\u52a0 \ncustom:tabGravity\n \u5c5e\u6027\uff0c\u5e76\u8bbe\u7f6e\u5176\u503c\u4e3a \ncenter\n \u3002\n\n\nandroid.support.design.widget.TabLayout\n\n        \nxmlns:custom=\nhttp://schemas.android.com/apk/res-auto\n\n        \nandroid:id=\n@+id/tabLayout\n\n        \nandroid:layout_width=\nmatch_parent\n\n        \nandroid:layout_height=\nwrap_content\n\n        \ncustom:tabGravity=\ncenter\n \n/\n\n\n\n\n\n\n\n\n\u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\n\n\n\u539f\u6587\u4f5c\u8005 Volodymyr Yatsykiv \u539f\u6587\u94fe\u63a5 \nTabs", 
            "title": "Tabs"
        }, 
        {
            "location": "/components/tabs/#tabs", 
            "text": "\u6458\u81ea google material design  \u6587\u6863  Tabs \u8ba9\u4e0d\u540c\u89c6\u56fe\u6216\u529f\u80fd\u4e4b\u95f4\u7684\u6d4f\u89c8\u5207\u6362\u548c\u6d4f\u89c8\u5206\u7c7b\u6570\u636e\u96c6\u5408\u53d8\u5f97\u5f88\u5bb9\u6613\u3002", 
            "title": "Tabs"
        }, 
        {
            "location": "/components/tabs/#_1", 
            "text": "I. \u5728\u4f60\u7684  build.gradle  \u91cc\u6dfb\u52a0\u6700\u65b0\u7248\u672c\u7684  design  \u548c  appcompat  \u5e93\u3002  dependencies   { \n     compile   com.android.support:appcompat-v7:X.X.X \n     compile   com.android.support:design:X.X.X \n     compile   com.android.support:support-v13:X.X.X \n     // where X.X.X version \n\n     // if you want to support android sdk   13 \n     // you need to add support library v4 instead of v13  }   II. \u8ba9\u4f60\u7684 Activity \u7ee7\u627f\u81ea  android.support.v7.app.AppCompatActivity  \u3002  public   class   MainActivity   extends   AppCompatActivity   { \n  ...  }   III. \u5728\u4f60\u7684  layout.xml  \u6587\u4ef6\u91cc\u58f0\u660e  TabLayout  \u548c  ViewPager  \u3002  LinearLayout   xmlns:android= http://schemas.android.com/apk/res/android \n     android:layout_width= match_parent \n     android:layout_height= match_parent \n     android:orientation= vertical \n\n     android.support.design.widget.TabLayout \n         android:id= @+id/tabLayout \n         android:layout_width= match_parent \n         android:layout_height= wrap_content \n         android:background= ?attr/colorPrimary   / \n\n     android.support.v4.view.ViewPager \n         android:id= @+id/viewPager \n         android:layout_width= match_parent \n         android:layout_height= match_parent   /  /LinearLayout   IV. \u5c06  TabLayout  \u548c  ViewPager  \u7ec4\u5408\u8d77\u6765\u3002  ViewPager   viewPager   =   ( ViewPager )   findViewById ( R . id . viewPager );  //set adapter to your ViewPager  viewPager . setAdapter ( new   TabPagerAdapter ( getFragmentManager ()));  TabLayout   tabLayout   =   ( TabLayout )   findViewById ( R . id . tabLayout );  tabLayout . setupWithViewPager ( viewPager );   V. \u5728 ViewPager \u7684 adapter \u91cc\u91cd\u5199  getPageTitle  \u65b9\u6cd5\uff0c\u5e76\u8fd4\u56de tab \u6807\u9898\u3002  @Override  public   CharSequence   getPageTitle ( int   position )   { \n      switch   ( position )   { \n           case   ITEM_ONE : \n                return   Item One ; \n           ... \n      }  }", 
            "title": "\u5982\u4f55\u6dfb\u52a0\uff1f"
        }, 
        {
            "location": "/components/tabs/#_2", 
            "text": "I. \u5728\u4f60\u7684  styles.xml  \u91cc\u58f0\u660e\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002  style   name= TabLayoutStyle   parent= Widget.Design.TabLayout \n     item   name= tabMaxWidth @dimen/tab_max_width /item \n     item   name= tabIndicatorColor @color/pink /item \n     item   name= tabIndicatorHeight 2dp /item \n     item   name= tabPaddingStart 8dp /item \n     item   name= tabPaddingEnd 8dp /item \n     item   name= tabBackground ?attr/selectableItemBackground /item \n     item   name= tabTextAppearance @style/TabTextAppearance /item \n     item   name= tabSelectedTextColor @android:color/white /item  /style  style   name= TabTextAppearance   parent= TextAppearance.Design.Tab \n     item   name= android:textSize 14sp /item \n     item   name= android:textColor @color/color_white_semitransparent /item \n     item   name= textAllCaps true /item  /style   II. \u8bbe\u7f6e\u4f60\u7684  TabLayout  \u7684  style  \u5c5e\u6027\u4e3a\u4e0a\u9762\u58f0\u660e\u7684\u6837\u5f0f\u3002  android.support.design.widget.TabLayout \n         style= @style/TabLayoutStyle \n         android:id= @+id/tabLayout \n         android:layout_width= match_parent \n         android:layout_height= wrap_content /", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?"
        }, 
        {
            "location": "/components/tabs/#tabs-with-icons-and-text", 
            "text": "I. \u5728 ViewPager \u7684 adapter \u91cc\u91cd\u5199  getPageTitle  \u65b9\u6cd5\uff0c\u5e76\u8fd4\u56de tab \u6807\u9898\u3002  @Override  public   CharSequence   getPageTitle ( int   position )   { \n      switch   ( position )   { \n           case   ITEM_ONE : \n                return   Item One ; \n           ... \n      }  }   II. \u4e3a\u6bcf\u4e00\u4e2a tab \u56fe\u6807\u521b\u5efa\u4e00\u4e2a\u9009\u62e9\u5668\u3002  selector   xmlns:android= http://schemas.android.com/apk/res/android \n     item \n         android:state_selected= true \n         android:drawable= @drawable/ic_call_selected   / \n     item \n         android:state_selected= false \n         android:drawable= @drawable/ic_call_unselected   /  /selector   III. \u4f7f\u7528  TabLayout.Tab  \u7684  setIcon  \u65b9\u6cd5\u6539\u53d8 tab \u7684\u56fe\u6807\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528  TabLayout  \u7684  getTabAt  \u65b9\u6cd5\uff0c\u5e76\u4f20\u5165 tab \u7684\u7d22\u5f15\uff0c\u6765\u83b7\u53d6  TabLayout.Tab  \u5bf9\u8c61\u3002  ...  //after initialization TabLayout and ViewPager  TabLayout . Tab   tabCall   =   tabLayout . getTabAt ( ITEM_CALL );  tabCall . setIcon ( R . drawable . selector_call );  //repeat this code for all your tabs  ...", 
            "title": "Tabs with icons and text"
        }, 
        {
            "location": "/components/tabs/#tabs-with-icons-only", 
            "text": "I. \u4e3a\u6bcf\u4e00\u4e2a tab \u56fe\u6807\u521b\u5efa\u4e00\u4e2a\u9009\u62e9\u5668\u3002  selector   xmlns:android= http://schemas.android.com/apk/res/android \n     item \n         android:state_selected= true \n         android:drawable= @drawable/ic_call_selected   / \n     item \n         android:state_selected= false \n         android:drawable= @drawable/ic_call_unselected   /  /selector   II. \u4f7f\u7528  TabLayout.Tab  \u7684  setIcon  \u65b9\u6cd5\u6539\u53d8 tab \u7684\u56fe\u6807\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528  TabLayout  \u7684  getTabAt  \u65b9\u6cd5\uff0c\u5e76\u4f20\u5165 tab \u7684\u7d22\u5f15\uff0c\u6765\u83b7\u53d6  TabLayout.Tab  \u5bf9\u8c61\u3002  ...  //after initialization TabLayout and ViewPager  TabLayout . Tab   tabCall   =   tabLayout . getTabAt ( ITEM_CALL );  tabCall . setIcon ( R . drawable . selector_call );  //repeat this code for all your tabs  ...", 
            "title": "Tabs with icons only"
        }, 
        {
            "location": "/components/tabs/#scrollable-tabs", 
            "text": "\u8981\u8ba9\u4f60\u7684  TabLayout  \u652f\u6301\u6eda\u52a8\uff0c\u9700\u8981\u6dfb\u52a0  custom:tabMode  \u5c5e\u6027\uff0c\u5e76\u8bbe\u7f6e\u5176\u503c\u4e3a  scrollable  \u3002  android.support.design.widget.TabLayout \n         xmlns:custom= http://schemas.android.com/apk/res-auto \n         android:id= @+id/tabLayout \n         android:layout_width= match_parent \n         android:layout_height= wrap_content \n         custom:tabMode= scrollable   /", 
            "title": "Scrollable Tabs"
        }, 
        {
            "location": "/components/tabs/#centered-tabs", 
            "text": "\u521b\u5efa\u4f4d\u7f6e\u5c45\u4e2d\u7684 tabs \u9700\u8981\u6dfb\u52a0  custom:tabGravity  \u5c5e\u6027\uff0c\u5e76\u8bbe\u7f6e\u5176\u503c\u4e3a  center  \u3002  android.support.design.widget.TabLayout \n         xmlns:custom= http://schemas.android.com/apk/res-auto \n         android:id= @+id/tabLayout \n         android:layout_width= match_parent \n         android:layout_height= wrap_content \n         custom:tabGravity= center   /    \u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63  \u539f\u6587\u4f5c\u8005 Volodymyr Yatsykiv \u539f\u6587\u94fe\u63a5  Tabs", 
            "title": "Centered tabs"
        }, 
        {
            "location": "/components/text-fields/", 
            "text": "Text Fields\n\n\n\n\n\n\n\u6458\u81ea google material design \n\u6587\u6863\n.\n\n\nText fields \u5141\u8bb8\u7528\u6237\u8f93\u5165\u6587\u672c\uff0c\u9009\u62e9\u6587\u672c\uff08\u526a\u5207\uff0c\u590d\u5236\uff0c\u7c98\u8d34\uff09\uff0c\u901a\u8fc7\u81ea\u52a8\u8865\u5168\u68c0\u7d22\u67e5\u8be2\u6570\u636e\u3002\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0?\n\n\nI. \u5728\u4f60\u7684 \nbuild.grade\n \u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0 \nappcompat\n \u5e93\u3002\n\n\ndependencies\n \n{\n\n    \ncompile\n \ncom.android.support:appcompat-v7:X.X.X\n \n// where X.X.X version\n\n\n}\n\n\n\n\n\n\nII. \u8ba9\u4f60\u7684 activity \u7ee7\u627f\u81ea \nandroid.support.v7.app.AppCompatActivity\n\u3002\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n    \n...\n\n\n}\n\n\n\n\n\n\nIII. \u5728\u4efb\u610f\u7684 \nlayout.xml\n \u6587\u4ef6\u5185\u58f0\u660e\u4f60\u7684 \nEditText\n \u3002\n\n\nEditText\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:hint=\nHint text\n \n/\n\n\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?\n\n\n\n\nI. \u5728\u4f60\u7684 \nstyles.xml\n \u6587\u4ef6\u5185\u58f0\u660e\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002\n\n\nstyle\n \nname=\nMyEditText\n \nparent=\nTheme.AppCompat.Light\n\n    \nitem\n \nname=\ncolorControlNormal\n@color/indigo\n/item\n\n    \nitem\n \nname=\ncolorControlActivated\n@color/pink\n/item\n\n\n/style\n\n\n\n\n\n\nII. \u5728\u4f60\u7684 \nEditText\n \u58f0\u660e\u91cc\u8bbe\u7f6e \nandroid:theme\n \u7684\u5c5e\u6027\u503c\u4e3a\u4f60\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002\n\n\nEditText\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:hint=\nHint text\n\n    \nandroid:theme=\n@style/MyEditText\n \n/\n\n\n\n\n\n\nSingle-line text field\n\n\n\n\n\u6458\u81ea google material design \n\u6587\u6863\n.\n\n\nSingle-line text fields\uff0c\u5f53\u8f93\u5165\u5149\u6807\u5230\u8fbe\u8f93\u5165\u6846\u53f3\u8fb9\u7f18\u65f6\uff0c\u6587\u672c\u6846\u7684\u5185\u5bb9\u4f1a\u81ea\u52a8\u6eda\u52a8\u5230\u5de6\u8fb9\u3002\n\n\n\n\n\u8981\u8ba9\u4f60\u7684 \nEditText\n \u4e3a\u5355\u884c\uff0c\u9700\u8981\u6dfb\u52a0 \nandroid:singleLine\n \u5c5e\u6027\uff0c\u5e76\u4e14\u8bbe\u7f6e\u5176\u503c\u4e3a \ntrue\n \u3002\n\n\nEditText\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:singleLine=\ntrue\n\n    \nandroid:hint=\nHint text\n \n/\n\n\n\n\n\n\nMulti-line text field\n\n\n\n\n\u6458\u81ea google material design \n\u6587\u6863\n.\n\n\nMulti-line text fields\uff0c\u5f53\u5149\u6807\u8fbe\u5230\u8f93\u5165\u6846\u8fb9\u7f18\u65f6\uff0c\u6587\u672c\u6846\u4f1a\u4e3a\u6ea2\u51fa\u7684\u6587\u5b57\u81ea\u52a8\u589e\u52a0\u4e00\u884c\uff0c\u4ee5\u4f7f\u6587\u672c\u53ef\u4ee5\u5782\u76f4\u6eda\u52a8\u3002\n\n\n\n\n\u8981\u8ba9\u4f60\u7684 \nEditText\n \u4e3a\u591a\u884c\uff0c\u9700\u8981\u6dfb\u52a0 \nandroid:inputType\n \u5c5e\u6027\uff0c\u5e76\u4e14\u8bbe\u7f6e\u5176\u503c\u4e3a \ntextMultiLine\n \u3002\n\n\nEditText\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:inputType=\ntextMultiLine\n\n    \nandroid:hint=\nHint text\n \n/\n\n\n\n\n\n\nFull-width text field\n\n\n\n\n\n\n\u6458\u81ea google material design \n\u6587\u6863\n.\n\n\nFull-width text fields\uff08\u548c\u7236\u5e03\u5c40\u7b49\u5bbd\uff09\u9002\u7528\u4e8e\u66f4\u6df1\u5165\u590d\u6742\u7684\u5de5\u4f5c\u3002\n\n\n\n\nI. \u5728\u4f60\u7684 \nstyles.xml\n \u4e2d\u58f0\u660e\u4f60\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002\n\n\nstyle\n \nname=\nFullWidthEditText\n \nparent=\nWidget.AppCompat.EditText\n\n    \nitem\n \nname=\nandroid:padding\n20dp\n/item\n\n    \nitem\n \nname=\nandroid:background\n@null\n/item\n\n    \nitem\n \nname=\nandroid:textSize\n@dimen/abc_text_size_subhead_material\n/item\n\n\n/style\n\n\n\n\n\n\nII. \u5728\u4f60\u7684 \nEditText\n \u58f0\u660e\u91cc\u8bbe\u7f6e \nstyle\n \u5c5e\u6027\u503c\u4e3a\u4f60\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002\n\n\nEditText\n\n    \nstyle=\n@style/FullWidthEditText\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:hint=\nSubject\n \n/\n\n\n\n\n\n\n\n\n\u539f\u6587\u4f5c\u8005\uff1aDmytro Danylyk \u539f\u6587\u94fe\u63a5\uff1a\nText field\n\n\n\n\nFloating labels\n\n\n\n\n\n\n\u6458\u81ea  google material design \n\u6587\u6863\n\n\n\u5f53\u7528\u6237\u5728\u8f93\u5165\u6846\u8f93\u5165\u5b57\u7b26\u65f6\uff0c\u884c\u5185\u7684\u6d6e\u52a8\u6807\u7b7e\u4f1a\u81ea\u52a8\u79fb\u52a8\uff0c\u6d6e\u52a8\u5728\u8f93\u5165\u6846\u7684\u4e0a\u65b9\u3002\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0\uff1f\n\n\nI. \u5728\u4f60\u7684 \nbuild.gradle\n \u6587\u4ef6\u91cc\u6dfb\u52a0\u6700\u65b0\u7248\u672c\u7684 \nappcompat\n \u548c \ndesign\n \u5e93\u3002\n\n\ndependencies\n \n{\n\n    \ncompile\n \ncom.android.support:appcompat-v7:X.X.X\n \n// where X.X.X version\n\n    \ncompile\n \ncom.android.support:design:X.X.X\n \n// where X.X.X version\n\n\n}\n\n\n\n\n\n\nII. \u8ba9\u4f60\u7684 activity \u7ee7\u627f \nandroid.support.v7.app.AppCompatActivity\n \u3002\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n    \n...\n\n\n}\n\n\n\n\n\n\nIII. \u5728\u4efb\u610f\u7684 \nlayout.xml\n \u91cc\u58f0\u660e\u4f60\u7684 \nEditText\n \uff0c\u5e76\u7528 \nTextInputLayout\n \u5305\u88f9\u3002\n\n\nandroid.support.design.widget.TextInputLayout\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nwrap_content\n\n\n    \nEditText\n\n        \nandroid:layout_width=\nmatch_parent\n\n        \nandroid:layout_height=\nwrap_content\n\n        \nandroid:hint=\n@string/Title\n \n/\n\n\n\n/android.support.design.widget.TextInputLayout\n\n\n\n\n\n\n\n\n\u63a7\u4ef6 \nTextInputLayout\n \u548c \nEditText\n \u90fd\u5177\u6709 \nandroid:hint\n \u5c5e\u6027\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u3002\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f\uff1f\n\n\n\n\nI. \u5728\u4f60\u7684 \nstyles.xml\n \u91cc\u58f0\u660e\u4f60\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002\n\n\n!--Floating label text style--\n\n\nstyle\n \nname=\nMyHintText\n \nparent=\nTextAppearance.AppCompat.Small\n\n    \nitem\n \nname=\nandroid:textColor\n@color/pink\n/item\n\n\n/style\n\n\n\n!--Input field style--\n\n\nstyle\n \nname=\nMyEditText\n \nparent=\nTheme.AppCompat.Light\n\n    \nitem\n \nname=\ncolorControlNormal\n@color/indigo\n/item\n\n    \nitem\n \nname=\ncolorControlActivated\n@color/pink\n/item\n\n\n/style\n\n\n\n\n\n\nII. \u8bbe\u7f6e\u4e0a\u9762\u5b9a\u4e49\u7684\u6837\u5f0f\u7ed9\u4f60\u7684 \nTextInputLayout\n \u7684 \napp:hintTextAppearance\n \u5c5e\u6027 \u548c \nEditText\n \u7684 \nandroid:theme\n \u5c5e\u6027\u3002\n\n\nandroid.support.design.widget.TextInputLayout\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nwrap_content\n\n    \napp:hintTextAppearance=\n@style/MyHintText\n\n\n    \nEditText\n\n        \nandroid:layout_width=\nmatch_parent\n\n        \nandroid:layout_height=\nwrap_content\n\n        \nandroid:hint=\n@string/Title\n\n        \nandroid:theme=\n@style/MyEditText\n \n/\n\n\n\n/android.support.design.widget.TextInputLayout\n\n\n\n\n\n\n\n\n\u539f\u6587\u4f5c\u8005\uff1aDmytro Danylyk \u539f\u6587\u94fe\u63a5\uff1a\nFloating labels\n\n\n\n\nUser input errors\n\n\n\n\n\n\n\u6458\u81ea google material design \n\u6587\u6863\n\n\n\uff08\u6dfb\u52a0\u4e86\u8fd9\u4e2a\u5c5e\u6027\uff09\u4e00\u65e6\u68c0\u6d4b\u5230\u8f93\u5165\u9519\u8bef\uff0c\u5c31\u4f1a\u5e2e\u52a9\u7528\u6237\u53bb\u89e3\u51b3\u5b83\u3002\u5982\u679c\u68c0\u6d4b\u5230\u8f93\u5165\u9519\u8bef\uff0c\u5c31\u7981\u6b62\u63d0\u4ea4\u8868\u5355\uff1b\uff08\u6216\u8005\uff09\u5982\u679c\u63d0\u4ea4\u8868\u5355\u4e4b\u540e\u68c0\u6d4b\u5230\u9519\u8bef\uff0c\u53ef\u4ee5\u6e05\u695a\u5730\u89e3\u91ca\u9519\u8bef\u5e76\u63d0\u793a\u5982\u4f55\u53bb\u89e3\u51b3\u3002\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0\uff1f\n\n\nI. \u5728\u4f60\u7684 \nbuild.gradle\n \u6587\u4ef6\u91cc\u6dfb\u52a0\u6700\u65b0\u7248\u672c\u7684 \nappcompat\n \u548c \ndesign\n \u5e93\u3002\n\n\ndependencies\n \n{\n\n    \ncompile\n \ncom.android.support:appcompat-v7:X.X.X\n \n// where X.X.X version\n\n    \ncompile\n \ncom.android.support:design:X.X.X\n \n// where X.X.X version\n\n\n}\n\n\n\n\n\n\nII. \u8ba9\u4f60\u7684 activity \u7ee7\u627f\u81ea \nandroid.support.v7.app.AppCompatActivity\n \u3002\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n    \n...\n\n\n}\n\n\n\n\n\n\nIII. \u5728\u4efb\u610f\u7684 \nlayout.xml\n \u58f0\u660e\u4f60\u7684 \nEditText\n \uff0c\u5e76\u7528 \nTextInputLayout\n \u5305\u88f9\u5b83\u3002\n\n\nandroid.support.design.widget.TextInputLayout\n\n    \nandroid:id=\n@+id/inputLayout\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nwrap_content\n\n    \napp:errorEnabled=\ntrue\n\n\n    \nEditText\n\n        \nandroid:layout_width=\nmatch_parent\n\n        \nandroid:layout_height=\nwrap_content\n\n        \nandroid:hint=\n@string/First_name\n \n/\n\n\n\n/android.support.design.widget.TextInputLayout\n\n\n\n\n\n\nIV. \u8981\u5c55\u793a\u6216\u8005\u9690\u85cf error \u9700\u8981\u7528\u5230 \nTextInputLayout\n \u7684 \nsetError\n \u65b9\u6cd5\u3002\n\n\nTextInputLayout\n \ninputLayout\n \n=\n \n(\nTextInputLayout\n)\n \nfindViewById\n(\nR\n.\nid\n.\ninputLayout\n);\n\n\ninputLayout\n.\nsetError\n(\nFirst name is required\n);\n \n// show error\n\n\ninputLayout\n.\nsetError\n(\nnull\n);\n \n// hide error\n\n\n\n\n\n\n\n\n\u5728 \nTextInputLayout\n \u91cc\u58f0\u660e \napp:errorEnabled=\"true\"\n \u5c5e\u6027\u9700\u8981\u5728 \nEditText\n \u4e0b\u9762\u7ed9\u9519\u8bef\u63d0\u793a\u6807\u7b7e\u9884\u7559\u7a7a\u95f4\u3002\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f\uff1f\n\n\n\n\nI. \u5728 \nstyles.xml\n \u58f0\u660e\u4f60\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002\n\n\n!--Error label text style--\n\n\nstyle\n \nname=\nMyErrorText\n \nparent=\nTextAppearance.AppCompat.Small\n\n    \nitem\n \nname=\nandroid:textColor\n@color/pink\n/item\n\n\n/style\n\n\n\n!--Input field style--\n\n\nstyle\n \nname=\nMyEditText\n \nparent=\nTheme.AppCompat.Light\n\n    \nitem\n \nname=\ncolorControlNormal\n@color/indigo\n/item\n\n    \nitem\n \nname=\ncolorControlActivated\n@color/pink\n/item\n\n\n/style\n\n\n\n\n\n\nII. \u8bbe\u7f6e\u4e0a\u9762\u5b9a\u4e49\u7684\u6837\u5f0f\u7ed9\u4f60\u7684 \nTextInputLayout\n \u7684 \napp:errorTextAppearance\n \u5c5e\u6027 \u548c \nEditText\n \u7684 \nandroid:theme\n \u5c5e\u6027\u3002\n\n\nandroid.support.design.widget.TextInputLayout\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nwrap_content\n\n    \napp:errorTextAppearance=\n@style/MyHintText\n\n    \napp:errorEnabled=\ntrue\n\n\n    \nEditText\n\n        \nandroid:layout_width=\nmatch_parent\n\n        \nandroid:layout_height=\nwrap_content\n\n        \nandroid:hint=\n@string/Title\n\n        \nandroid:theme=\n@style/MyEditText\n \n/\n\n\n\n/android.support.design.widget.TextInputLayout\n\n\n\n\n\n\n\n\n\u539f\u6587\u4f5c\u8005\uff1aDmytro Danylyk \u539f\u6587\u94fe\u63a5\uff1a\nUser input errors\n\n\n\n\nCharacter counter\n\n\n\n\n\n\nFrom google material design \ndocumentation\n.\n\n\nUse a character counter in fields where a character restriction is in place.\n\n\n\n\nHow to add?\n\n\nI. In your \nbuild.gradle\n add latest \nappcompat\n and \ndesign\n libraries.\n\n\ndependencies {\n    compile \ncom.android.support:appcompat-v7:X.X.X\n // where X.X.X version\n    compile \ncom.android.support:design:X.X.X\n // where X.X.X version\n}\n\n\n\n\n\nII. Make your activity extend \nandroid.support.v7.app.AppCompatActivity\n.\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n    \n...\n\n\n}\n\n\n\n\n\n\nIII. Declare your \nEditText\n inside any \nlayout.xml\n file and wrap it with \nTextInputLayout\n. Add \napp:counterEnabled\n attribute and set its value to \ntrue\n. To restrict maximum characters count set some integer value to \napp:counterMaxLength\n attribute.\n\n\nandroid.support.design.widget.TextInputLayout\n\n        \nandroid:id=\n@+id/inputLayout\n\n        \nandroid:layout_width=\nmatch_parent\n\n        \nandroid:layout_height=\nwrap_content\n\n        \napp:counterEnabled=\ntrue\n\n        \napp:counterMaxLength=\n140\n\n\n    \nEditText\n\n        \nandroid:layout_width=\nmatch_parent\n\n        \nandroid:layout_height=\nwrap_content\n\n        \nandroid:hint=\nhint text\n \n/\n\n\n\n/android.support.design.widget.TextInputLayout\n\n\n\n\n\n\nHow to style?\n\n\n\nTo define a custom style for the overflow.\n\n\nI. Define the text style.\n\n\n!--Overflow label text style--\n\n\nstyle\n \nname=\nMyOverflowText\n \nparent=\nTextAppearance.AppCompat.Small\n\n    \nitem\n \nname=\nandroid:textColor\n@color/deep_orange\n/item\n\n\n/style\n\n\n\n\n\n\nII. Apply this styles to your \nTextInputLayout\n via \napp:counterOverflowTextAppearance\n attribute.\n\n\napp:counterOverflowTextAppearance=\n@style/MyOverflowText\n\n\n\n\n\n\nPassword toggle\n\n\n\n\n\n\nFrom google material design \ndocumentation\n.\n\n\nWhen the visibility icon is displayed with a text field, it indicates whether or not that field\u2019s input is visible. A text field\u2019s visibility may be toggled on or off using the icon.\n\n\n\n\nHow to add?\n\n\nI. In your \nbuild.gradle\n add latest \nappcompat\n and \ndesign\n libraries.\n\n\ndependencies {\n    compile \ncom.android.support:appcompat-v7:X.X.X\n // where X.X.X version\n    compile \ncom.android.support:design:X.X.X\n // where X.X.X version\n}\n\n\n\n\n\nII. Make your activity extend \nandroid.support.v7.app.AppCompatActivity\n.\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n    \n...\n\n\n}\n\n\n\n\n\n\nIII. Declare your \nEditText\n inside any \nlayout.xml\n file and wrat it with \nTextInputLayout\n. Add \napp:passwordToggleEnabled\n and set its value to \ntrue\n.\n\n\nandroid.support.design.widget.TextInputLayout\n\n        \nandroid:id=\n@+id/inputLayout\n\n        \nandroid:layout_width=\nmatch_parent\n\n        \nandroid:layout_height=\nwrap_content\n\n        \napp:passwordToggleEnabled=\ntrue\n\n\n    \nEditText\n\n        \nandroid:layout_width=\nmatch_parent\n\n        \nandroid:layout_height=\nwrap_content\n\n        \nandroid:hint=\nPassword\n \n/\n\n\n\n/android.support.design.widget.TextInputLayout\n\n\n\n\n\n\n\n\nNote\n\n\nDeclare \napp:passwordToggleContentDescription\n attribute inside \nTextInputLayout\n for accessibility purposes.\n\n\n\n\nHow to style?\n\n\n\n\nTo change the color of the password toggle icon, use the \napp:passwordToggleTint\n attribute:\n\n\nandroid.support.design.widget.TextInputLayout\n\n        \nandroid:id=\n@+id/inputLayout\n\n        \nandroid:layout_width=\nmatch_parent\n\n        \nandroid:layout_height=\nwrap_content\n\n        \napp:passwordToggleEnabled=\ntrue\n\n        \napp:passwordToggleTint=\n@color/colorAccent\n\n\n    \nEditText\n\n        \nandroid:layout_width=\nmatch_parent\n\n        \nandroid:layout_height=\nwrap_content\n\n        \nandroid:hint=\nPassword\n \n/\n\n\n\n/android.support.design.widget.TextInputLayout\n\n\n\n\n\n\nMoreover, you can specify the blending mode with the \napp:passwordToggleTintMode\n attribute.\n\n\nIcon\n\n\n\n\nTo change the password toggle icon, use the \napp:passwordToggleDrawable\n attribute:\n\n\nandroid.support.design.widget.TextInputLayout\n\n        \nandroid:id=\n@+id/inputLayout\n\n        \nandroid:layout_width=\nmatch_parent\n\n        \nandroid:layout_height=\nwrap_content\n\n        \napp:passwordToggleEnabled=\ntrue\n\n        \napp:passwordToggleDrawable=\n@drawable/ic_lock\n\n\n    \nEditText\n\n        \nandroid:layout_width=\nmatch_parent\n\n        \nandroid:layout_height=\nwrap_content\n\n        \nandroid:hint=\nPassword\n \n/\n\n\n\n/android.support.design.widget.TextInputLayout\n\n\n\n\n\n\nUse a \nStateListDrawable\n with the \nandroid:state_checked\n attribute to use separate drawables for each toggle state. Moreover, choose an \nAnimatedStateListDrawable\n to animate the drawables between states.", 
            "title": "Text fields"
        }, 
        {
            "location": "/components/text-fields/#text-fields", 
            "text": "\u6458\u81ea google material design  \u6587\u6863 .  Text fields \u5141\u8bb8\u7528\u6237\u8f93\u5165\u6587\u672c\uff0c\u9009\u62e9\u6587\u672c\uff08\u526a\u5207\uff0c\u590d\u5236\uff0c\u7c98\u8d34\uff09\uff0c\u901a\u8fc7\u81ea\u52a8\u8865\u5168\u68c0\u7d22\u67e5\u8be2\u6570\u636e\u3002", 
            "title": "Text Fields"
        }, 
        {
            "location": "/components/text-fields/#_1", 
            "text": "I. \u5728\u4f60\u7684  build.grade  \u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0  appcompat  \u5e93\u3002  dependencies   { \n     compile   com.android.support:appcompat-v7:X.X.X   // where X.X.X version  }   II. \u8ba9\u4f60\u7684 activity \u7ee7\u627f\u81ea  android.support.v7.app.AppCompatActivity \u3002  public   class   MainActivity   extends   AppCompatActivity   { \n     ...  }   III. \u5728\u4efb\u610f\u7684  layout.xml  \u6587\u4ef6\u5185\u58f0\u660e\u4f60\u7684  EditText  \u3002  EditText \n     android:layout_width= match_parent \n     android:layout_height= wrap_content \n     android:hint= Hint text   /", 
            "title": "\u5982\u4f55\u6dfb\u52a0?"
        }, 
        {
            "location": "/components/text-fields/#_2", 
            "text": "I. \u5728\u4f60\u7684  styles.xml  \u6587\u4ef6\u5185\u58f0\u660e\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002  style   name= MyEditText   parent= Theme.AppCompat.Light \n     item   name= colorControlNormal @color/indigo /item \n     item   name= colorControlActivated @color/pink /item  /style   II. \u5728\u4f60\u7684  EditText  \u58f0\u660e\u91cc\u8bbe\u7f6e  android:theme  \u7684\u5c5e\u6027\u503c\u4e3a\u4f60\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002  EditText \n     android:layout_width= match_parent \n     android:layout_height= wrap_content \n     android:hint= Hint text \n     android:theme= @style/MyEditText   /", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?"
        }, 
        {
            "location": "/components/text-fields/#single-line-text-field", 
            "text": "\u6458\u81ea google material design  \u6587\u6863 .  Single-line text fields\uff0c\u5f53\u8f93\u5165\u5149\u6807\u5230\u8fbe\u8f93\u5165\u6846\u53f3\u8fb9\u7f18\u65f6\uff0c\u6587\u672c\u6846\u7684\u5185\u5bb9\u4f1a\u81ea\u52a8\u6eda\u52a8\u5230\u5de6\u8fb9\u3002   \u8981\u8ba9\u4f60\u7684  EditText  \u4e3a\u5355\u884c\uff0c\u9700\u8981\u6dfb\u52a0  android:singleLine  \u5c5e\u6027\uff0c\u5e76\u4e14\u8bbe\u7f6e\u5176\u503c\u4e3a  true  \u3002  EditText \n     android:layout_width= match_parent \n     android:layout_height= wrap_content \n     android:singleLine= true \n     android:hint= Hint text   /", 
            "title": "Single-line text field"
        }, 
        {
            "location": "/components/text-fields/#multi-line-text-field", 
            "text": "\u6458\u81ea google material design  \u6587\u6863 .  Multi-line text fields\uff0c\u5f53\u5149\u6807\u8fbe\u5230\u8f93\u5165\u6846\u8fb9\u7f18\u65f6\uff0c\u6587\u672c\u6846\u4f1a\u4e3a\u6ea2\u51fa\u7684\u6587\u5b57\u81ea\u52a8\u589e\u52a0\u4e00\u884c\uff0c\u4ee5\u4f7f\u6587\u672c\u53ef\u4ee5\u5782\u76f4\u6eda\u52a8\u3002   \u8981\u8ba9\u4f60\u7684  EditText  \u4e3a\u591a\u884c\uff0c\u9700\u8981\u6dfb\u52a0  android:inputType  \u5c5e\u6027\uff0c\u5e76\u4e14\u8bbe\u7f6e\u5176\u503c\u4e3a  textMultiLine  \u3002  EditText \n     android:layout_width= match_parent \n     android:layout_height= wrap_content \n     android:inputType= textMultiLine \n     android:hint= Hint text   /", 
            "title": "Multi-line text field"
        }, 
        {
            "location": "/components/text-fields/#full-width-text-field", 
            "text": "\u6458\u81ea google material design  \u6587\u6863 .  Full-width text fields\uff08\u548c\u7236\u5e03\u5c40\u7b49\u5bbd\uff09\u9002\u7528\u4e8e\u66f4\u6df1\u5165\u590d\u6742\u7684\u5de5\u4f5c\u3002   I. \u5728\u4f60\u7684  styles.xml  \u4e2d\u58f0\u660e\u4f60\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002  style   name= FullWidthEditText   parent= Widget.AppCompat.EditText \n     item   name= android:padding 20dp /item \n     item   name= android:background @null /item \n     item   name= android:textSize @dimen/abc_text_size_subhead_material /item  /style   II. \u5728\u4f60\u7684  EditText  \u58f0\u660e\u91cc\u8bbe\u7f6e  style  \u5c5e\u6027\u503c\u4e3a\u4f60\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002  EditText \n     style= @style/FullWidthEditText \n     android:layout_width= match_parent \n     android:layout_height= wrap_content \n     android:hint= Subject   /    \u539f\u6587\u4f5c\u8005\uff1aDmytro Danylyk \u539f\u6587\u94fe\u63a5\uff1a Text field", 
            "title": "Full-width text field"
        }, 
        {
            "location": "/components/text-fields/#floating-labels", 
            "text": "\u6458\u81ea  google material design  \u6587\u6863  \u5f53\u7528\u6237\u5728\u8f93\u5165\u6846\u8f93\u5165\u5b57\u7b26\u65f6\uff0c\u884c\u5185\u7684\u6d6e\u52a8\u6807\u7b7e\u4f1a\u81ea\u52a8\u79fb\u52a8\uff0c\u6d6e\u52a8\u5728\u8f93\u5165\u6846\u7684\u4e0a\u65b9\u3002", 
            "title": "Floating labels"
        }, 
        {
            "location": "/components/text-fields/#_3", 
            "text": "I. \u5728\u4f60\u7684  build.gradle  \u6587\u4ef6\u91cc\u6dfb\u52a0\u6700\u65b0\u7248\u672c\u7684  appcompat  \u548c  design  \u5e93\u3002  dependencies   { \n     compile   com.android.support:appcompat-v7:X.X.X   // where X.X.X version \n     compile   com.android.support:design:X.X.X   // where X.X.X version  }   II. \u8ba9\u4f60\u7684 activity \u7ee7\u627f  android.support.v7.app.AppCompatActivity  \u3002  public   class   MainActivity   extends   AppCompatActivity   { \n     ...  }   III. \u5728\u4efb\u610f\u7684  layout.xml  \u91cc\u58f0\u660e\u4f60\u7684  EditText  \uff0c\u5e76\u7528  TextInputLayout  \u5305\u88f9\u3002  android.support.design.widget.TextInputLayout \n     android:layout_width= match_parent \n     android:layout_height= wrap_content \n\n     EditText \n         android:layout_width= match_parent \n         android:layout_height= wrap_content \n         android:hint= @string/Title   /  /android.support.design.widget.TextInputLayout    \u63a7\u4ef6  TextInputLayout  \u548c  EditText  \u90fd\u5177\u6709  android:hint  \u5c5e\u6027\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u3002", 
            "title": "\u5982\u4f55\u6dfb\u52a0\uff1f"
        }, 
        {
            "location": "/components/text-fields/#_4", 
            "text": "I. \u5728\u4f60\u7684  styles.xml  \u91cc\u58f0\u660e\u4f60\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002  !--Floating label text style--  style   name= MyHintText   parent= TextAppearance.AppCompat.Small \n     item   name= android:textColor @color/pink /item  /style  !--Input field style--  style   name= MyEditText   parent= Theme.AppCompat.Light \n     item   name= colorControlNormal @color/indigo /item \n     item   name= colorControlActivated @color/pink /item  /style   II. \u8bbe\u7f6e\u4e0a\u9762\u5b9a\u4e49\u7684\u6837\u5f0f\u7ed9\u4f60\u7684  TextInputLayout  \u7684  app:hintTextAppearance  \u5c5e\u6027 \u548c  EditText  \u7684  android:theme  \u5c5e\u6027\u3002  android.support.design.widget.TextInputLayout \n     android:layout_width= match_parent \n     android:layout_height= wrap_content \n     app:hintTextAppearance= @style/MyHintText \n\n     EditText \n         android:layout_width= match_parent \n         android:layout_height= wrap_content \n         android:hint= @string/Title \n         android:theme= @style/MyEditText   /  /android.support.design.widget.TextInputLayout    \u539f\u6587\u4f5c\u8005\uff1aDmytro Danylyk \u539f\u6587\u94fe\u63a5\uff1a Floating labels", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f\uff1f"
        }, 
        {
            "location": "/components/text-fields/#user-input-errors", 
            "text": "\u6458\u81ea google material design  \u6587\u6863  \uff08\u6dfb\u52a0\u4e86\u8fd9\u4e2a\u5c5e\u6027\uff09\u4e00\u65e6\u68c0\u6d4b\u5230\u8f93\u5165\u9519\u8bef\uff0c\u5c31\u4f1a\u5e2e\u52a9\u7528\u6237\u53bb\u89e3\u51b3\u5b83\u3002\u5982\u679c\u68c0\u6d4b\u5230\u8f93\u5165\u9519\u8bef\uff0c\u5c31\u7981\u6b62\u63d0\u4ea4\u8868\u5355\uff1b\uff08\u6216\u8005\uff09\u5982\u679c\u63d0\u4ea4\u8868\u5355\u4e4b\u540e\u68c0\u6d4b\u5230\u9519\u8bef\uff0c\u53ef\u4ee5\u6e05\u695a\u5730\u89e3\u91ca\u9519\u8bef\u5e76\u63d0\u793a\u5982\u4f55\u53bb\u89e3\u51b3\u3002", 
            "title": "User input errors"
        }, 
        {
            "location": "/components/text-fields/#_5", 
            "text": "I. \u5728\u4f60\u7684  build.gradle  \u6587\u4ef6\u91cc\u6dfb\u52a0\u6700\u65b0\u7248\u672c\u7684  appcompat  \u548c  design  \u5e93\u3002  dependencies   { \n     compile   com.android.support:appcompat-v7:X.X.X   // where X.X.X version \n     compile   com.android.support:design:X.X.X   // where X.X.X version  }   II. \u8ba9\u4f60\u7684 activity \u7ee7\u627f\u81ea  android.support.v7.app.AppCompatActivity  \u3002  public   class   MainActivity   extends   AppCompatActivity   { \n     ...  }   III. \u5728\u4efb\u610f\u7684  layout.xml  \u58f0\u660e\u4f60\u7684  EditText  \uff0c\u5e76\u7528  TextInputLayout  \u5305\u88f9\u5b83\u3002  android.support.design.widget.TextInputLayout \n     android:id= @+id/inputLayout \n     android:layout_width= match_parent \n     android:layout_height= wrap_content \n     app:errorEnabled= true \n\n     EditText \n         android:layout_width= match_parent \n         android:layout_height= wrap_content \n         android:hint= @string/First_name   /  /android.support.design.widget.TextInputLayout   IV. \u8981\u5c55\u793a\u6216\u8005\u9690\u85cf error \u9700\u8981\u7528\u5230  TextInputLayout  \u7684  setError  \u65b9\u6cd5\u3002  TextInputLayout   inputLayout   =   ( TextInputLayout )   findViewById ( R . id . inputLayout );  inputLayout . setError ( First name is required );   // show error  inputLayout . setError ( null );   // hide error    \u5728  TextInputLayout  \u91cc\u58f0\u660e  app:errorEnabled=\"true\"  \u5c5e\u6027\u9700\u8981\u5728  EditText  \u4e0b\u9762\u7ed9\u9519\u8bef\u63d0\u793a\u6807\u7b7e\u9884\u7559\u7a7a\u95f4\u3002", 
            "title": "\u5982\u4f55\u6dfb\u52a0\uff1f"
        }, 
        {
            "location": "/components/text-fields/#_6", 
            "text": "I. \u5728  styles.xml  \u58f0\u660e\u4f60\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002  !--Error label text style--  style   name= MyErrorText   parent= TextAppearance.AppCompat.Small \n     item   name= android:textColor @color/pink /item  /style  !--Input field style--  style   name= MyEditText   parent= Theme.AppCompat.Light \n     item   name= colorControlNormal @color/indigo /item \n     item   name= colorControlActivated @color/pink /item  /style   II. \u8bbe\u7f6e\u4e0a\u9762\u5b9a\u4e49\u7684\u6837\u5f0f\u7ed9\u4f60\u7684  TextInputLayout  \u7684  app:errorTextAppearance  \u5c5e\u6027 \u548c  EditText  \u7684  android:theme  \u5c5e\u6027\u3002  android.support.design.widget.TextInputLayout \n     android:layout_width= match_parent \n     android:layout_height= wrap_content \n     app:errorTextAppearance= @style/MyHintText \n     app:errorEnabled= true \n\n     EditText \n         android:layout_width= match_parent \n         android:layout_height= wrap_content \n         android:hint= @string/Title \n         android:theme= @style/MyEditText   /  /android.support.design.widget.TextInputLayout    \u539f\u6587\u4f5c\u8005\uff1aDmytro Danylyk \u539f\u6587\u94fe\u63a5\uff1a User input errors", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f\uff1f"
        }, 
        {
            "location": "/components/text-fields/#character-counter", 
            "text": "From google material design  documentation .  Use a character counter in fields where a character restriction is in place.", 
            "title": "Character counter"
        }, 
        {
            "location": "/components/text-fields/#how-to-add", 
            "text": "I. In your  build.gradle  add latest  appcompat  and  design  libraries.  dependencies {\n    compile  com.android.support:appcompat-v7:X.X.X  // where X.X.X version\n    compile  com.android.support:design:X.X.X  // where X.X.X version\n}  II. Make your activity extend  android.support.v7.app.AppCompatActivity .  public   class   MainActivity   extends   AppCompatActivity   { \n     ...  }   III. Declare your  EditText  inside any  layout.xml  file and wrap it with  TextInputLayout . Add  app:counterEnabled  attribute and set its value to  true . To restrict maximum characters count set some integer value to  app:counterMaxLength  attribute.  android.support.design.widget.TextInputLayout \n         android:id= @+id/inputLayout \n         android:layout_width= match_parent \n         android:layout_height= wrap_content \n         app:counterEnabled= true \n         app:counterMaxLength= 140 \n\n     EditText \n         android:layout_width= match_parent \n         android:layout_height= wrap_content \n         android:hint= hint text   /  /android.support.design.widget.TextInputLayout", 
            "title": "How to add?"
        }, 
        {
            "location": "/components/text-fields/#how-to-style", 
            "text": "To define a custom style for the overflow.  I. Define the text style.  !--Overflow label text style--  style   name= MyOverflowText   parent= TextAppearance.AppCompat.Small \n     item   name= android:textColor @color/deep_orange /item  /style   II. Apply this styles to your  TextInputLayout  via  app:counterOverflowTextAppearance  attribute.  app:counterOverflowTextAppearance= @style/MyOverflowText", 
            "title": "How to style?"
        }, 
        {
            "location": "/components/text-fields/#password-toggle", 
            "text": "From google material design  documentation .  When the visibility icon is displayed with a text field, it indicates whether or not that field\u2019s input is visible. A text field\u2019s visibility may be toggled on or off using the icon.", 
            "title": "Password toggle"
        }, 
        {
            "location": "/components/text-fields/#how-to-add_1", 
            "text": "I. In your  build.gradle  add latest  appcompat  and  design  libraries.  dependencies {\n    compile  com.android.support:appcompat-v7:X.X.X  // where X.X.X version\n    compile  com.android.support:design:X.X.X  // where X.X.X version\n}  II. Make your activity extend  android.support.v7.app.AppCompatActivity .  public   class   MainActivity   extends   AppCompatActivity   { \n     ...  }   III. Declare your  EditText  inside any  layout.xml  file and wrat it with  TextInputLayout . Add  app:passwordToggleEnabled  and set its value to  true .  android.support.design.widget.TextInputLayout \n         android:id= @+id/inputLayout \n         android:layout_width= match_parent \n         android:layout_height= wrap_content \n         app:passwordToggleEnabled= true \n\n     EditText \n         android:layout_width= match_parent \n         android:layout_height= wrap_content \n         android:hint= Password   /  /android.support.design.widget.TextInputLayout    Note  Declare  app:passwordToggleContentDescription  attribute inside  TextInputLayout  for accessibility purposes.", 
            "title": "How to add?"
        }, 
        {
            "location": "/components/text-fields/#how-to-style_1", 
            "text": "To change the color of the password toggle icon, use the  app:passwordToggleTint  attribute:  android.support.design.widget.TextInputLayout \n         android:id= @+id/inputLayout \n         android:layout_width= match_parent \n         android:layout_height= wrap_content \n         app:passwordToggleEnabled= true \n         app:passwordToggleTint= @color/colorAccent \n\n     EditText \n         android:layout_width= match_parent \n         android:layout_height= wrap_content \n         android:hint= Password   /  /android.support.design.widget.TextInputLayout   Moreover, you can specify the blending mode with the  app:passwordToggleTintMode  attribute.", 
            "title": "How to style?"
        }, 
        {
            "location": "/components/text-fields/#icon", 
            "text": "To change the password toggle icon, use the  app:passwordToggleDrawable  attribute:  android.support.design.widget.TextInputLayout \n         android:id= @+id/inputLayout \n         android:layout_width= match_parent \n         android:layout_height= wrap_content \n         app:passwordToggleEnabled= true \n         app:passwordToggleDrawable= @drawable/ic_lock \n\n     EditText \n         android:layout_width= match_parent \n         android:layout_height= wrap_content \n         android:hint= Password   /  /android.support.design.widget.TextInputLayout   Use a  StateListDrawable  with the  android:state_checked  attribute to use separate drawables for each toggle state. Moreover, choose an  AnimatedStateListDrawable  to animate the drawables between states.", 
            "title": "Icon"
        }, 
        {
            "location": "/components/toolbars/", 
            "text": "Toolbars\n\n\n\n\n\n\n\u6458\u81ea google material design \n\u6587\u6863\n\n\nToolbars appear a step above the sheet of paper affected by their actions. When sheets scroll underneath toolbars, they are clipped and cannot pass through to the opposite side.\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0?\n\n\nI. \u5728\u4f60\u7684 \nbuild.grade\n \u6587\u4ef6\u91cc\u6dfb\u52a0\u6700\u65b0\u7248\u672c\u7684 \nappcompat\n \u5e93\u3002\n\n\ndependencies\n \n{\n\n    \ncompile\n \ncom.android.support:appcompat-v7:X.X.X\n\n    \n// where X.X.X version\n\n\n}\n\n\n\n\n\n\nII. \u4f7f\u4f60\u7684 activity \u7ee7\u627f\u81ea \nandroid.support.v7.app.AppCompatActivity\n.\n\n\npublic\n \nclass\n \nMyActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n   \n...\n\n\n}\n\n\n\n\n\n\nIII. \u5728 \nlayout.xml\n \u6587\u4ef6\u5185\u58f0\u660e\u4f60\u7684 \nToolbar\n\u3002\n\n\nandroid.support.v7.widget.Toolbar\n\n    \nandroid:layout_width=\nfill_parent\n\n    \nandroid:layout_height=\n?attr/actionBarSize\n\n    \nandroid:background=\n?colorPrimary\n\n    \napp:theme=\n@style/ThemeOverlay.AppCompat.Dark.ActionBar\n \n/\n\n\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?\n\n\n\n\nI. \u5728\u4f60\u7684 \nstyle.xml\n \u6587\u4ef6\u91cc\u58f0\u660e\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002\n\n\nstyle\n \nname=\nToolbarTextAppearance\n\n    \nitem\n \nname=\nandroid:fontFamily\nsans-serif-condensed\n/item\n\n    \nitem\n \nname=\nandroid:textColor\n@android:color/white\n/item\n\n    \nitem\n \nname=\nandroid:shadowDx\n1\n/item\n\n    \nitem\n \nname=\nandroid:shadowDy\n1\n/item\n\n    \nitem\n \nname=\nandroid:shadowRadius\n2\n/item\n\n    \nitem\n \nname=\nandroid:shadowColor\n?colorAccent\n/item\n\n\n/style\n\n\n\nstyle\n \nname=\nToolbarTextAppearance.Title\n\n    \nitem\n \nname=\nandroid:textSize\n20sp\n/item\n\n\n/style\n\n\n\nstyle\n \nname=\nToolbarTextAppearance.Subtitle\n\n    \nitem\n \nname=\nandroid:textSize\n14sp\n/item\n\n\n/style\n\n\n\nstyle\n \nname=\nMyToolbar\n\n    \nitem\n \nname=\ntheme\n@style/ThemeOverlay.AppCompat.Dark\n/item\n\n    \nitem\n \nname=\nandroid:background\n?colorPrimary\n/item\n\n    \nitem\n \nname=\nandroid:elevation\n4dp\n/item\n\n\n/style\n\n\n\n\n\n\nII. \u5e94\u7528\u6837\u5f0f\u5230\u4f60\u7684 \nToolbar\n \u7684 \ntitleTextAppearance\n \u548c \nsubtitleTextAppearance\n \u5c5e\u6027\u3002\n\n\nandroid.support.v7.widget.Toolbar\n\n    \nandroid:id=\n@+id/toolbar\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\n?actionBarSize\n\n    \napp:title=\nToolbar\n\n    \napp:subtitle=\nToolbars are amazing\n\n    \napp:titleTextAppearance=\n@style/ToolbarTextAppearance.Title\n\n    \napp:subtitleTextAppearance=\n@style/ToolbarTextAppearance.Subtitle\n\n    \nstyle=\n@style/MyToolbar\n \n/\n\n\n\n\n\n\nToolbar \u83dc\u5355\u56fe\u6807\n\n\n\n\nI. \u521b\u5efa\u6bcf\u4e00\u4e2a Action \u9879\u3002\n\n\nmenu\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \nxmlns:app=\nhttp://schemas.android.com/apk/res-auto\n\n    \nxmlns:tools=\nhttp://schemas.android.com/tools\n\n    \nitem\n\n        \nandroid:id=\n@+id/action_favorite\n\n        \nandroid:icon=\n@drawable/ic_favorite\n\n        \napp:showAsAction=\nalways\n/\n\n    \nitem\n\n        \nandroid:id=\n@+id/action_search\n\n        \nandroid:icon=\n@drawable/ic_search\n\n        \napp:showAsAction=\nalways\n/\n\n    \nitem\n\n        \nandroid:id=\n@+id/action_settings\n\n        \nandroid:orderInCategory=\n100\n\n        \nandroid:title=\n@string/action_settings\n\n        \napp:showAsAction=\nnever\n/\n\n\n/menu\n\n\n\n\n\n\nII. \u901a\u8fc7 \ninflateMenu\n \u65b9\u6cd5\u751f\u6210\u4f60\u7684\u83dc\u5355\u3002\n\n\nToolbar\n \ntoolbar\n \n=\n \n(\nToolbar\n)\n \nfindViewById\n(\nR\n.\nid\n.\ntoolbar\n);\n\n\ntoolbar\n.\ninflateMenu\n(\nR\n.\nmenu\n.\nmain\n);\n\n\n\n\n\n\nII. \u4f7f\u4f60\u7684 activity \u5b9e\u73b0 \nToolbar.OnMenuItemClickListener\n.\n\n\npublic\n \nclass\n \nMyActivity\n \nextends\n \nAppCompatActivity\n \nimplements\n \nToolbar\n.\nOnMenuItemClickListener\n \n{\n\n\n\n\n\n\nIII. \u5728\u4f60\u7684 Toolbar\u4e0a\u8bbe\u7f6e\u5b9e\u73b0\u4e86 listener \u7684 Activity\u7684\u5f15\u7528\u3002\n\n\ntoolbar\n.\nsetOnMenuItemClickListener\n(\nthis\n);\n\n\n\n\n\n\nIV. \u5728 \nonMenuItemClick\n \u65b9\u6cd5\u5185\u5b9e\u73b0\u4f60\u7684 actions\u3002\n\n\n@Override\n\n\npublic\n \nboolean\n \nonMenuItemClick\n(\nMenuItem\n \nitem\n)\n \n{\n\n    \nswitch\n \n(\nitem\n.\ngetItemId\n())\n \n{\n\n        \ncase\n \nR\n.\nid\n.\naction_favorite\n:\n\n            \nToast\n.\nmakeText\n(\nthis\n,\n \nFavorite\n,\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n();\n\n            \nreturn\n \ntrue\n;\n\n\n        \ncase\n \nR\n.\nid\n.\naction_search\n:\n\n            \nToast\n.\nmakeText\n(\nthis\n,\n \nSearch\n,\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n();\n\n            \nreturn\n \ntrue\n;\n\n    \n}\n\n\n    \nreturn\n \ntrue\n;\n\n\n}\n\n\n\n\n\n\nToolbar \u7684\u5bfc\u822a\u8fd4\u56de\u56fe\u6807\n\n\n\n\nI. \u5728\u4f60\u7684 \nstyles.xml\n \u6587\u4ef6\u5185\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002\n\n\nstyle\n \nname=\nMyToolbar\n\n    \nitem\n \nname=\ntheme\n@style/ThemeOverlay.AppCompat.Dark\n/item\n\n    \nitem\n \nname=\nnavigationIcon\n@drawable/abc_ic_ab_back_mtrl_am_alpha\n/item\n\n    \nitem\n \nname=\nandroid:background\n?colorPrimary\n/item\n\n    \nitem\n \nname=\nandroid:elevation\n4dp\n/item\n\n\n/style\n\n\n\n\n\n\nII. \u901a\u8fc7 \nstyle\n \u5c5e\u6027\u5e94\u7528\u8fd9\u4e2a\u6837\u5f0f\u5230\u4f60\u7684 \nToolbar\n\u3002\n\n\nandroid.support.v7.widget.Toolbar\n\n    \nandroid:id=\n@+id/toolbar\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\n?actionBarSize\n\n    \napp:title=\nToolbar\n\n    \napp:subtitle=\nToolbars are amazing\n\n    \nstyle=\n@style/MyToolbar\n \n/\n\n\n\n\n\n\nIII. \u8bbe\u7f6e\u5bfc\u822a\u8fd4\u56de\u52a8\u4f5c\u7684\u76d1\u542c\u5668\u3002\n\n\ntoolbar\n.\nsetNavigationOnClickListener\n(\nnew\n \nView\n.\nOnClickListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonClick\n(\nView\n \nv\n)\n \n{\n\n        \nonBackPressed\n();\n\n    \n}\n\n\n});\n\n\n\n\n\n\nToolbar \u7684\u7559\u767d\n\n\n\n\nI. \u5728\u4f60\u7684 \nstyles.xml\n \u6587\u4ef6\u5185\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002\n\n\nstyle\n \nname=\nMyToolbar\n\n    \nitem\n \nname=\ntheme\n@style/ThemeOverlay.AppCompat.Dark\n/item\n\n    \nitem\n \nname=\nnavigationIcon\n@drawable/abc_ic_ab_back_mtrl_am_alpha\n/item\n\n    \nitem\n \nname=\ntitleMarginTop\n?actionBarSize\n/item\n\n    \nitem\n \nname=\nandroid:background\n?colorPrimary\n/item\n\n    \nitem\n \nname=\nandroid:elevation\n4dp\n/item\n\n\n/style\n\n\n\n\n\n\nII. \u901a\u8fc7 \nstyle\n \u5c5e\u6027\u5e94\u7528\u8fd9\u4e2a\u6837\u5f0f\u5230\u4f60\u7684 \nToolbar\n\u3002\n\n\nandroid\n.\nsupport\n.\nv7\n.\nwidget\n.\nToolbar\n\n    \nandroid\n:\nid\n=\n@+id/toolbar\n\n    \nandroid\n:\nlayout_width\n=\nmatch_parent\n\n    \nandroid\n:\nlayout_height\n=\n112dp\n\n    \napp\n:\ntitle\n=\nToolbar\n\n    \napp\n:\nsubtitle\n=\nToolbars are really cool\n\n    \nstyle\n=\n@style/MyToolbar\n \n/\n\n\n\n\n\n\n\n\n\u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\n\n\n\u539f\u6587\u4f5c\u8005\uff1aSa\u00fal Molinero \u539f\u6587\u5730\u5740\uff1a\nToolbars\n\n\n\u8bd1\u8005\uff1a\n\u8109\u8109\u4e0d\u5f97\u8bed\n \u6821\u5bf9\uff1a\nAilurus", 
            "title": "Toolbars"
        }, 
        {
            "location": "/components/toolbars/#toolbars", 
            "text": "\u6458\u81ea google material design  \u6587\u6863  Toolbars appear a step above the sheet of paper affected by their actions. When sheets scroll underneath toolbars, they are clipped and cannot pass through to the opposite side.", 
            "title": "Toolbars"
        }, 
        {
            "location": "/components/toolbars/#_1", 
            "text": "I. \u5728\u4f60\u7684  build.grade  \u6587\u4ef6\u91cc\u6dfb\u52a0\u6700\u65b0\u7248\u672c\u7684  appcompat  \u5e93\u3002  dependencies   { \n     compile   com.android.support:appcompat-v7:X.X.X \n     // where X.X.X version  }   II. \u4f7f\u4f60\u7684 activity \u7ee7\u627f\u81ea  android.support.v7.app.AppCompatActivity .  public   class   MyActivity   extends   AppCompatActivity   { \n    ...  }   III. \u5728  layout.xml  \u6587\u4ef6\u5185\u58f0\u660e\u4f60\u7684  Toolbar \u3002  android.support.v7.widget.Toolbar \n     android:layout_width= fill_parent \n     android:layout_height= ?attr/actionBarSize \n     android:background= ?colorPrimary \n     app:theme= @style/ThemeOverlay.AppCompat.Dark.ActionBar   /", 
            "title": "\u5982\u4f55\u6dfb\u52a0?"
        }, 
        {
            "location": "/components/toolbars/#_2", 
            "text": "I. \u5728\u4f60\u7684  style.xml  \u6587\u4ef6\u91cc\u58f0\u660e\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u3002  style   name= ToolbarTextAppearance \n     item   name= android:fontFamily sans-serif-condensed /item \n     item   name= android:textColor @android:color/white /item \n     item   name= android:shadowDx 1 /item \n     item   name= android:shadowDy 1 /item \n     item   name= android:shadowRadius 2 /item \n     item   name= android:shadowColor ?colorAccent /item  /style  style   name= ToolbarTextAppearance.Title \n     item   name= android:textSize 20sp /item  /style  style   name= ToolbarTextAppearance.Subtitle \n     item   name= android:textSize 14sp /item  /style  style   name= MyToolbar \n     item   name= theme @style/ThemeOverlay.AppCompat.Dark /item \n     item   name= android:background ?colorPrimary /item \n     item   name= android:elevation 4dp /item  /style   II. \u5e94\u7528\u6837\u5f0f\u5230\u4f60\u7684  Toolbar  \u7684  titleTextAppearance  \u548c  subtitleTextAppearance  \u5c5e\u6027\u3002  android.support.v7.widget.Toolbar \n     android:id= @+id/toolbar \n     android:layout_width= match_parent \n     android:layout_height= ?actionBarSize \n     app:title= Toolbar \n     app:subtitle= Toolbars are amazing \n     app:titleTextAppearance= @style/ToolbarTextAppearance.Title \n     app:subtitleTextAppearance= @style/ToolbarTextAppearance.Subtitle \n     style= @style/MyToolbar   /", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?"
        }, 
        {
            "location": "/components/toolbars/#toolbar", 
            "text": "I. \u521b\u5efa\u6bcf\u4e00\u4e2a Action \u9879\u3002  menu   xmlns:android= http://schemas.android.com/apk/res/android \n     xmlns:app= http://schemas.android.com/apk/res-auto \n     xmlns:tools= http://schemas.android.com/tools \n     item \n         android:id= @+id/action_favorite \n         android:icon= @drawable/ic_favorite \n         app:showAsAction= always / \n     item \n         android:id= @+id/action_search \n         android:icon= @drawable/ic_search \n         app:showAsAction= always / \n     item \n         android:id= @+id/action_settings \n         android:orderInCategory= 100 \n         android:title= @string/action_settings \n         app:showAsAction= never /  /menu   II. \u901a\u8fc7  inflateMenu  \u65b9\u6cd5\u751f\u6210\u4f60\u7684\u83dc\u5355\u3002  Toolbar   toolbar   =   ( Toolbar )   findViewById ( R . id . toolbar );  toolbar . inflateMenu ( R . menu . main );   II. \u4f7f\u4f60\u7684 activity \u5b9e\u73b0  Toolbar.OnMenuItemClickListener .  public   class   MyActivity   extends   AppCompatActivity   implements   Toolbar . OnMenuItemClickListener   {   III. \u5728\u4f60\u7684 Toolbar\u4e0a\u8bbe\u7f6e\u5b9e\u73b0\u4e86 listener \u7684 Activity\u7684\u5f15\u7528\u3002  toolbar . setOnMenuItemClickListener ( this );   IV. \u5728  onMenuItemClick  \u65b9\u6cd5\u5185\u5b9e\u73b0\u4f60\u7684 actions\u3002  @Override  public   boolean   onMenuItemClick ( MenuItem   item )   { \n     switch   ( item . getItemId ())   { \n         case   R . id . action_favorite : \n             Toast . makeText ( this ,   Favorite ,   Toast . LENGTH_SHORT ). show (); \n             return   true ; \n\n         case   R . id . action_search : \n             Toast . makeText ( this ,   Search ,   Toast . LENGTH_SHORT ). show (); \n             return   true ; \n     } \n\n     return   true ;  }", 
            "title": "Toolbar \u83dc\u5355\u56fe\u6807"
        }, 
        {
            "location": "/components/toolbars/#toolbar_1", 
            "text": "I. \u5728\u4f60\u7684  styles.xml  \u6587\u4ef6\u5185\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002  style   name= MyToolbar \n     item   name= theme @style/ThemeOverlay.AppCompat.Dark /item \n     item   name= navigationIcon @drawable/abc_ic_ab_back_mtrl_am_alpha /item \n     item   name= android:background ?colorPrimary /item \n     item   name= android:elevation 4dp /item  /style   II. \u901a\u8fc7  style  \u5c5e\u6027\u5e94\u7528\u8fd9\u4e2a\u6837\u5f0f\u5230\u4f60\u7684  Toolbar \u3002  android.support.v7.widget.Toolbar \n     android:id= @+id/toolbar \n     android:layout_width= match_parent \n     android:layout_height= ?actionBarSize \n     app:title= Toolbar \n     app:subtitle= Toolbars are amazing \n     style= @style/MyToolbar   /   III. \u8bbe\u7f6e\u5bfc\u822a\u8fd4\u56de\u52a8\u4f5c\u7684\u76d1\u542c\u5668\u3002  toolbar . setNavigationOnClickListener ( new   View . OnClickListener ()   { \n     @Override \n     public   void   onClick ( View   v )   { \n         onBackPressed (); \n     }  });", 
            "title": "Toolbar \u7684\u5bfc\u822a\u8fd4\u56de\u56fe\u6807"
        }, 
        {
            "location": "/components/toolbars/#toolbar_2", 
            "text": "I. \u5728\u4f60\u7684  styles.xml  \u6587\u4ef6\u5185\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6837\u5f0f\u3002  style   name= MyToolbar \n     item   name= theme @style/ThemeOverlay.AppCompat.Dark /item \n     item   name= navigationIcon @drawable/abc_ic_ab_back_mtrl_am_alpha /item \n     item   name= titleMarginTop ?actionBarSize /item \n     item   name= android:background ?colorPrimary /item \n     item   name= android:elevation 4dp /item  /style   II. \u901a\u8fc7  style  \u5c5e\u6027\u5e94\u7528\u8fd9\u4e2a\u6837\u5f0f\u5230\u4f60\u7684  Toolbar \u3002  android . support . v7 . widget . Toolbar \n     android : id = @+id/toolbar \n     android : layout_width = match_parent \n     android : layout_height = 112dp \n     app : title = Toolbar \n     app : subtitle = Toolbars are really cool \n     style = @style/MyToolbar   /    \u7ffb\u8bd1\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63  \u539f\u6587\u4f5c\u8005\uff1aSa\u00fal Molinero \u539f\u6587\u5730\u5740\uff1a Toolbars  \u8bd1\u8005\uff1a \u8109\u8109\u4e0d\u5f97\u8bed  \u6821\u5bf9\uff1a Ailurus", 
            "title": "Toolbar \u7684\u7559\u767d"
        }, 
        {
            "location": "/patterns/data-formats/", 
            "text": "Data formats\n\n\nDate \n time\n\n\n\n\n\n\nFrom the Google material design documentation\n\n\nHow you format the date and time depends on a few factors:\n\n\n\n\nIf the time or date is the current one\n\n\nWhether you are using the 12-hour or 24-hour clock\n\n\nHow specific you need to be\n\n\n\n\n\n\nI. Declare a \nTextView\n in your layout file.\n\n\nTextView\n\n    \nandroid:id=\n@+id/hora\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \n/\n\n\n\n\n\n\nII. In your Activity, get the time format which corresponds the locale and configuration of the device.\n\n\n// import android.text.format.DateFormat\n\n\nDateFormat\n \ntimeFormat\n \n=\n \nDateFormat\n.\ngetTimeFormat\n(\ncontext\n);\n\n\n\n\n\n\nIII. Get the text with the current time and insert it in the  \nTextView\n\n\nTextView\n \nhourTextView\n \n=\n \n(\nTextView\n)\n \nfindViewById\n(\nR\n.\nid\n.\nhourTextView\n);\n\n\nhoraTextView\n.\nsetText\n(\ntimeFormat\n.\nformat\n(\nnew\n \nDate\n()));\n\n\n\n\n\n\n\n\nI. Declare a \nTextView\n in your layout file.\n\n\nTextView\n\n    \nandroid:id=\n@+id/fecha\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \n/\n\n\n\n\n\n\nII. In your \nActivity\n, get the format of the date which corresponds to the locale and configuration of the devices. Depending on the available space you can use medium, long or numeric format.\n\n\nDateFormat\n \nnumericDateFormat\n \n=\n\n    \nDateFormat\n.\ngetDateFormat\n(\ncontext\n);\n\n\n\nDateFormat\n \nmediumDateFormat\n \n=\n\n    \nDateFormat\n.\ngetMediumDateFormat\n(\ncontext\n);\n\n\n\nDateFormat\n \nlongDateFormat\n \n=\n\n    \nDateFormat\n.\ngetLongDateFormat\n(\ncontext\n);\n\n\n\n\n\n\nIII. Get the text with the actual date and put it in your  \nTextView\n\n\nTextView\n \nfechaTextView\n \n=\n \n(\nTextView\n)\n \nfindViewById\n(\nR\n.\nid\n.\ndateTextView\n);\n\n\nfechaTextView\n.\nsetText\n(\nlongDateFormat\n.\nformat\n(\nnew\n \nDate\n()));\n\n\n\n\n\n\n\n\nNote\n\n\nThe \nDateFormat\n class allows many configurations according to your specific needs, for more information see the \ndevelopment guides\n.\n\n\n\n\nData redaction and truncation\n\n\nRedacting numbers\n\n\n\n\n!!! note \"From Google material design \ndocumentation\n\".\n    Midline ellipses [\u2022 \u2022 \u2022] are three-bullet glyphs used to represent numeric truncation and the redaction of sensitive data, such as credit card, debit card, and Social Security numbers.\n\n\nI. Declare a \nTextView\n in the layout of your \nActivity\n.\n\n\nTextView\n\n   \nandroid:id=\n@+id/numero_tarjeta\n\n   \nandroid:layout_width=\nwrap_content\n\n   \nandroid:layout_height=\nwrap_content\n\n   \n/\n\n\n\n\n\n\nII. Get the characters corresponding to the points and short spaces.\n\n\nString\n \nspace\n \n=\n \n\\u0020\n;\n\n\nString\n \nthinSpace\n \n=\n \n\\u2006\n;\n\n\nString\n \nbullet\n \n=\n \n\\u2022\n;\n\n\n\n\n\n\nIII. Build the final text pattern separating the points with short spaces. Between the text and ellipsis must have two normal spaces, and between the ellipsis and the remaining numbers must be just one short space.\n\n\nString\n \ncreditCardFinalDigits\n \n=\n \n1234\n;\n\n\nString\n \nfinalText\n \n=\n \nVisa\n \n+\n \nspace\n \n+\n \nspace\n \n+\n \nbullet\n \n+\n \nthinSpace\n \n+\n \nbullet\n \n+\n \nthinSpace\n \n+\n \nbullet\n \n+\n \nthinSpace\n \n+\n \ncreditCardFinalDigits\n;\n\n\n\n\n\n\nIV. Add your text to the \nTextView\n.\n\n\nTextView\n \ncardTextView\n \n=\n \n(\nTextView\n)\n \nfindViewById\n(\nR\n.\nid\n.\ncreditcard_textview\n);\n\n\ncardTextView\n.\nsetText\n(\nfinalText\n);\n\n\n\n\n\n\nRedacting letters\n\n\n\n\n\n\nFrom Google material design \ndocumentation\n.\n\n\nBaseline ellipses [...] represent letters, words or phrases that aren\u2019t shown. They also represent text truncation of a name or email address.\n\n\n\n\nTo automatically place ellipses depending on the space available:\n\n\nI. Declare a \nTextView\n in the layout of your \nActivity\n with the attributes \nlines=\"1\"\n and \nellipsize=\"end\"\n.\n\n\nTextView\n\n    \nandroid:id=\n@+id/titleTextView\n\n    \nandroid:layout_width=\nwrap_content\n\n    \nandroid:layout_height=\nwrap_content\n\n    \nandroid:lines=\n1\n\n    \nandroid:ellipsize=\nend\n\n    \n/\n\n\n\n\n\n\nII. Add a large text to the \nTextView\n.\n\n\nTextView\n \ntitleTextView\n \n=\n \n(\nTextView\n)\n \nfindViewById\n(\nR\n.\nid\n.\ntitleTextView\n);\n\n\ntitleTextView\n.\nsetText\n(\nR\n.\nstring\n.\nbat\n);", 
            "title": "Data formats"
        }, 
        {
            "location": "/patterns/data-formats/#data-formats", 
            "text": "", 
            "title": "Data formats"
        }, 
        {
            "location": "/patterns/data-formats/#date-time", 
            "text": "From the Google material design documentation  How you format the date and time depends on a few factors:   If the time or date is the current one  Whether you are using the 12-hour or 24-hour clock  How specific you need to be    I. Declare a  TextView  in your layout file.  TextView \n     android:id= @+id/hora \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     /   II. In your Activity, get the time format which corresponds the locale and configuration of the device.  // import android.text.format.DateFormat  DateFormat   timeFormat   =   DateFormat . getTimeFormat ( context );   III. Get the text with the current time and insert it in the   TextView  TextView   hourTextView   =   ( TextView )   findViewById ( R . id . hourTextView );  horaTextView . setText ( timeFormat . format ( new   Date ()));    I. Declare a  TextView  in your layout file.  TextView \n     android:id= @+id/fecha \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     /   II. In your  Activity , get the format of the date which corresponds to the locale and configuration of the devices. Depending on the available space you can use medium, long or numeric format.  DateFormat   numericDateFormat   = \n     DateFormat . getDateFormat ( context );  DateFormat   mediumDateFormat   = \n     DateFormat . getMediumDateFormat ( context );  DateFormat   longDateFormat   = \n     DateFormat . getLongDateFormat ( context );   III. Get the text with the actual date and put it in your   TextView  TextView   fechaTextView   =   ( TextView )   findViewById ( R . id . dateTextView );  fechaTextView . setText ( longDateFormat . format ( new   Date ()));    Note  The  DateFormat  class allows many configurations according to your specific needs, for more information see the  development guides .", 
            "title": "Date &amp; time"
        }, 
        {
            "location": "/patterns/data-formats/#data-redaction-and-truncation", 
            "text": "", 
            "title": "Data redaction and truncation"
        }, 
        {
            "location": "/patterns/data-formats/#redacting-numbers", 
            "text": "!!! note \"From Google material design  documentation \".\n    Midline ellipses [\u2022 \u2022 \u2022] are three-bullet glyphs used to represent numeric truncation and the redaction of sensitive data, such as credit card, debit card, and Social Security numbers.  I. Declare a  TextView  in the layout of your  Activity .  TextView \n    android:id= @+id/numero_tarjeta \n    android:layout_width= wrap_content \n    android:layout_height= wrap_content \n    /   II. Get the characters corresponding to the points and short spaces.  String   space   =   \\u0020 ;  String   thinSpace   =   \\u2006 ;  String   bullet   =   \\u2022 ;   III. Build the final text pattern separating the points with short spaces. Between the text and ellipsis must have two normal spaces, and between the ellipsis and the remaining numbers must be just one short space.  String   creditCardFinalDigits   =   1234 ;  String   finalText   =   Visa   +   space   +   space   +   bullet   +   thinSpace   +   bullet   +   thinSpace   +   bullet   +   thinSpace   +   creditCardFinalDigits ;   IV. Add your text to the  TextView .  TextView   cardTextView   =   ( TextView )   findViewById ( R . id . creditcard_textview );  cardTextView . setText ( finalText );", 
            "title": "Redacting numbers"
        }, 
        {
            "location": "/patterns/data-formats/#redacting-letters", 
            "text": "From Google material design  documentation .  Baseline ellipses [...] represent letters, words or phrases that aren\u2019t shown. They also represent text truncation of a name or email address.   To automatically place ellipses depending on the space available:  I. Declare a  TextView  in the layout of your  Activity  with the attributes  lines=\"1\"  and  ellipsize=\"end\" .  TextView \n     android:id= @+id/titleTextView \n     android:layout_width= wrap_content \n     android:layout_height= wrap_content \n     android:lines= 1 \n     android:ellipsize= end \n     /   II. Add a large text to the  TextView .  TextView   titleTextView   =   ( TextView )   findViewById ( R . id . titleTextView );  titleTextView . setText ( R . string . bat );", 
            "title": "Redacting letters"
        }, 
        {
            "location": "/patterns/launch-screen/", 
            "text": "Launch screens\n\n\n\n\n\n\nFrom google material design \ndocumentation\n.\n\n\nThe launch screen is a user\u2019s first experience of your application.\n\n\nBecause launching your app while displaying a blank canvas increases its perceived loading time, consider using a placeholder UI or a branded launch screen.\n\n\n\n\nHow to add?\n\n\nI. Declare custom \ndrawable.xml\n file with \nitems\n for launch screen background.\n\n\nlayer-list\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \nitem\n\n        \nandroid:drawable=\n@color/blue\n/\n\n\n    \nitem\n\n        \nbitmap\n\n            \nandroid:gravity=\ncenter\n\n            \nandroid:src=\n@drawable/logo\n/\n\n    \n/item\n\n\n/layer-list\n\n\n\n\n\n\nII. Declare custom style in your \nstyles.xml\n using the new \ndrawable\n as background.\n\n\nstyle\n \nname=\nSplashTheme\n \nparent=\nTheme.AppCompat.NoActionBar\n\n    \nitem\n \nname=\nandroid:windowBackground\n@drawable/background_splash\n/item\n\n\n/style\n\n\n\n\n\n\n\n\nNote\n\n\nIf your API Level is greater than v19, you can make Status Bar and Navigation Bar translucent setting attributes \nandroid:windowTranslucentStatus\n and \nandroid:windowTranslucentNavigation\n to \ntrue\n.\n\n\n\n\nIII. Apply this style to your splash activity via \nandroid:theme\n attribute in your \nAndroidManifest.xml\n file.\n\n\nactivity\n\n    \nandroid:name=\n.SplashActivity\n\n    \nandroid:theme=\n@style/SplashTheme\n\n    \nintent-filter\n\n        \naction\n \nandroid:name=\nandroid.intent.action.MAIN\n \n/\n\n\n        \ncategory\n \nandroid:name=\nandroid.intent.category.LAUNCHER\n \n/\n\n    \n/intent-filter\n\n\n/activity", 
            "title": "Launch screens"
        }, 
        {
            "location": "/patterns/launch-screen/#launch-screens", 
            "text": "From google material design  documentation .  The launch screen is a user\u2019s first experience of your application.  Because launching your app while displaying a blank canvas increases its perceived loading time, consider using a placeholder UI or a branded launch screen.", 
            "title": "Launch screens"
        }, 
        {
            "location": "/patterns/launch-screen/#how-to-add", 
            "text": "I. Declare custom  drawable.xml  file with  items  for launch screen background.  layer-list   xmlns:android= http://schemas.android.com/apk/res/android \n     item \n         android:drawable= @color/blue / \n\n     item \n         bitmap \n             android:gravity= center \n             android:src= @drawable/logo / \n     /item  /layer-list   II. Declare custom style in your  styles.xml  using the new  drawable  as background.  style   name= SplashTheme   parent= Theme.AppCompat.NoActionBar \n     item   name= android:windowBackground @drawable/background_splash /item  /style    Note  If your API Level is greater than v19, you can make Status Bar and Navigation Bar translucent setting attributes  android:windowTranslucentStatus  and  android:windowTranslucentNavigation  to  true .   III. Apply this style to your splash activity via  android:theme  attribute in your  AndroidManifest.xml  file.  activity \n     android:name= .SplashActivity \n     android:theme= @style/SplashTheme \n     intent-filter \n         action   android:name= android.intent.action.MAIN   / \n\n         category   android:name= android.intent.category.LAUNCHER   / \n     /intent-filter  /activity", 
            "title": "How to add?"
        }, 
        {
            "location": "/patterns/navigation-drawer/", 
            "text": "From Google material design \ndocumentation\n and \nandroid training\n.\n\n\nThe navigation drawer slides in from the left. It is a common pattern found in Google apps and follows the keylines and metrics for lists.\n\n\nNormally represents the app\u2019s main navigation options on the left edge of the screen. It is hidden most of the time, but is revealed when the user swipes a finger from the left edge of the screen or, while at the top level of the app, the user touches the app icon in the toolbar.\n\n\n\n\nHow to add?\n\n\nI. In your \nbuild.gradle\n file add the latest \nappcompat\n, \ndesign\n and \nsupport-v4\n libraries.\n\n\ncompile \ncom.android.support:appcompat-v7:X.X.X\n\ncompile \ncom.android.support:design:X.X.X\n\ncompile \ncom.android.support:support-v4:X.X.X\n\n// X.X.X specify the version\n\n\n\n\n\nII. Declare \nDrawerLayout\n as your root \nlayout\n container, inside you will have two views, one containing your main layout and another containing drawer items.\n\n\nandroid.support.v4.widget.DrawerLayout\n\n    \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \nxmlns:app=\nhttp://schemas.android.com/apk/res-auto\n\n    \nandroid:id=\n@+id/drawer_layout\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nmatch_parent\n\n    \nandroid:fitsSystemWindows=\ntrue\n\n\n  \ninclude\n \nlayout=\n@layout/content_main\n/\n\n\n  \nandroid.support.design.widget.NavigationView\n\n      \nandroid:id=\n@+id/nav_view\n\n      \nandroid:layout_width=\nwrap_content\n\n      \nandroid:layout_height=\nmatch_parent\n\n      \nandroid:layout_gravity=\nstart\n\n      \nandroid:fitsSystemWindows=\ntrue\n\n      \napp:headerLayout=\n@layout/drawer_header\n\n      \napp:menu=\n@menu/drawer_menu\n/\n\n\n\n/android.support.v4.widget.DrawerLayout\n\n\n\n\n\n\nIn above example, \n@layout/content_main\n contains your main content and \nNavigationView\n drawers items.\n\n\nIII. Create the \nmenu\n file in your values folder \nvalues/menu.xml\n.\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nmenu\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n  \ngroup\n \nandroid:checkableBehavior=\nsingle\n\n    \nitem\n\n        \nandroid:id=\n@+id/nav_inbox\n\n        \nandroid:checked=\ntrue\n\n        \nandroid:icon=\n@drawable/ic_inbox_grey600_36dp\n\n        \nandroid:title=\n@string/inbox\n/\n\n    \nitem\n\n        \nandroid:id=\n@+id/nav_starred\n\n        \nandroid:icon=\n@drawable/ic_star_grey600_36dp\n\n        \nandroid:title=\n@string/starred\n/\n\n    \n!-- more items --\n\n\n    \nitem\n\n        \nandroid:id=\n@+id/subheader\n\n        \nandroid:title=\n@string/subheader\n\n      \nmenu\n\n        \nitem\n\n            \nandroid:id=\n@+id/nav_all_email\n\n            \nandroid:icon=\n@drawable/ic_email_grey600_36dp\n\n            \nandroid:title=\n@string/all_email\n/\n\n        \n!-- more items --\n\n      \n/menu\n\n    \n/item\n\n  \n/group\n\n\n/menu\n\n\n\n\n\n\nThe menu structure is hierarchical, that let's you separate your items in categories.\n\n\nIV. To add a header for your drawer, create a layout file in \nlayout/drawer_header.xml\n.\n\n\nLinearLayout\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \nxmlns:app=\nhttp://schemas.android.com/apk/res-auto\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\n@dimen/drawer_header_height\n\n    \nandroid:gravity=\nbottom\n\n    \nandroid:background=\n@drawable/navigation_background\n\n    \nandroid:orientation=\nvertical\n\n    \nandroid:padding=\n@dimen/activity_horizontal_margin\n\n    \nandroid:theme=\n@style/ThemeOverlay.AppCompat.Dark\n\n\n  \nImageView\n\n      \nandroid:id=\n@+id/drawer_profile_image\n\n      \nandroid:layout_width=\n@dimen/drawer_header_profile\n\n      \nandroid:layout_height=\n@dimen/drawer_header_profile\n\n      \nandroid:layout_marginBottom=\n@dimen/standard_margin\n\n      \nandroid:scaleType=\ncenterCrop\n\n      \nandroid:src=\n@drawable/alexandru_simonescu\n\n \n/\n\n\n  \nTextView\n\n      \nandroid:id=\n@+id/name\n\n      \nandroid:layout_width=\nmatch_parent\n\n      \nandroid:layout_height=\nwrap_content\n\n      \nandroid:text=\nAlexandru Simonescu\n\n      \nandroid:textAppearance=\n@style/TextAppearance.AppCompat.Body1\n\n      \nandroid:textStyle=\nbold\n\n      \n/\n\n\n  \nTextView\n\n      \nandroid:id=\n@+id/email\n\n      \nandroid:layout_width=\nmatch_parent\n\n      \nandroid:layout_height=\nwrap_content\n\n      \nandroid:text=\nhi@alexsimo.com\n\n      \nandroid:textAppearance=\n@style/TextAppearance.AppCompat.Body1\n\n      \nstyle=\n@style/Widget.AppCompat.Spinner\n\n      \n/\n\n\n\n/LinearLayout\n\n\n\n\n\n\nV. In your activity find the \nNavigationView\n and \nNavigationDrawer\n and set their listeners.\n\n\nDrawer setup.\n\n\nprivate\n \nvoid\n \nsetupDrawer\n()\n \n{\n\n    \ndrawerLayout\n \n=\n \n(\nDrawerLayout\n)\n \nfindViewById\n(\nR\n.\nid\n.\ndrawer_layout\n);\n\n    \ndrawerLayout\n.\nsetDrawerListener\n(\nnew\n \nDrawerLayout\n.\nDrawerListener\n()\n \n{\n\n      \n@Override\n \npublic\n \nvoid\n \nonDrawerSlide\n(\nView\n \ndrawerView\n,\n \nfloat\n \nslideOffset\n)\n \n{\n\n\n      \n}\n\n\n      \n@Override\n \npublic\n \nvoid\n \nonDrawerOpened\n(\nView\n \ndrawerView\n)\n \n{\n\n\n      \n}\n\n\n      \n@Override\n \npublic\n \nvoid\n \nonDrawerClosed\n(\nView\n \ndrawerView\n)\n \n{\n\n\n      \n}\n\n\n      \n@Override\n \npublic\n \nvoid\n \nonDrawerStateChanged\n(\nint\n \nnewState\n)\n \n{\n\n\n      \n}\n\n    \n});\n\n  \n}\n\n\n\n\n\n\n\n\nNote\n\n\nTo achieve the round image effect you can use \nGoogle's official way\n.\n\n\n\n\nExample using Google's \nRoundedBitmapDrawable\n:\n\n\nBitmap\n \nbitmap\n \n=\n \nBitmapFactory\n.\ndecodeResource\n(\ngetResources\n(),\n \nR\n.\ndrawable\n.\navatar\n);\n\n\n\nRoundedBitmapDrawable\n \nrounded\n \n=\n   \nRoundedBitmapDrawableFactory\n.\ncreate\n(\ngetResources\n(),\n \navatar\n);\n\n\n\nrounded\n.\nsetCornerRadius\n(\nbitmap\n.\ngetWidth\n());\n\n\n\nImageView\n \ndrawerProfile\n \n=\n \n(\nImageView\n)\n \ndrawerLayout\n.\nfindViewById\n(\nR\n.\nid\n.\ndrawer_profile_image\n);\n\n\ndrawerProfile\n.\nsetImageDrawable\n(\nrounded\n);\n\n\n\n\n\n\nNavigationView setup.\n\n\npublic\n \nvoid\n \nsetupDrawerContent\n(\nNavigationView\n \nnavigationView\n)\n \n{\n\n    \nnavigationView\n.\nsetNavigationItemSelectedListener\n(\n\n        \nnew\n \nNavigationView\n.\nOnNavigationItemSelectedListener\n()\n \n{\n\n          \n@Override\n\n          \npublic\n \nboolean\n \nonNavigationItemSelected\n(\nMenuItem\n \nitem\n)\n \n{\n\n            \nitem\n.\nsetChecked\n(\ntrue\n);\n\n            \n// manage menu item click\n\n            \ndrawerLayout\n.\ncloseDrawers\n();\n\n            \nreturn\n \ntrue\n;\n\n          \n}\n\n        \n});\n\n  \n}\n\n\n\n\n\n\nVI. If needed you can give some basic styling using the properties:\n\n\nandroid:\nbackground\n=\n@color/colorDrawer\n\n\napp:\nitemBackground\n=\n@color/colorDrawerItem\n\n\n\n\n\n\nThe drawables colors should be selector defining for each pressed state - focused, checked, active, etc.\n\n\nMenu item background.\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nselector\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n  \nitem\n \nandroid:drawable=\n@drawable/button_pressed\n\n      \nandroid:state_pressed=\ntrue\n/\n\n  \nitem\n \nandroid:drawable=\n@drawable/button_focused\n\n      \nandroid:state_focused=\ntrue\n/\n\n  \nitem\n \nandroid:drawable=\n@drawable/button_focused\n\n      \nandroid:state_hovered=\ntrue\n/\n\n  \nitem\n \nandroid:drawable=\n@drawable/button_normal\n/\n\n\n/selector", 
            "title": "Navigation drawer"
        }, 
        {
            "location": "/patterns/navigation-drawer/#how-to-add", 
            "text": "I. In your  build.gradle  file add the latest  appcompat ,  design  and  support-v4  libraries.  compile  com.android.support:appcompat-v7:X.X.X \ncompile  com.android.support:design:X.X.X \ncompile  com.android.support:support-v4:X.X.X \n// X.X.X specify the version  II. Declare  DrawerLayout  as your root  layout  container, inside you will have two views, one containing your main layout and another containing drawer items.  android.support.v4.widget.DrawerLayout \n     xmlns:android= http://schemas.android.com/apk/res/android \n     xmlns:app= http://schemas.android.com/apk/res-auto \n     android:id= @+id/drawer_layout \n     android:layout_width= match_parent \n     android:layout_height= match_parent \n     android:fitsSystemWindows= true \n\n   include   layout= @layout/content_main / \n\n   android.support.design.widget.NavigationView \n       android:id= @+id/nav_view \n       android:layout_width= wrap_content \n       android:layout_height= match_parent \n       android:layout_gravity= start \n       android:fitsSystemWindows= true \n       app:headerLayout= @layout/drawer_header \n       app:menu= @menu/drawer_menu /  /android.support.v4.widget.DrawerLayout   In above example,  @layout/content_main  contains your main content and  NavigationView  drawers items.  III. Create the  menu  file in your values folder  values/menu.xml .  ?xml version= 1.0  encoding= utf-8 ?  menu   xmlns:android= http://schemas.android.com/apk/res/android \n   group   android:checkableBehavior= single \n     item \n         android:id= @+id/nav_inbox \n         android:checked= true \n         android:icon= @drawable/ic_inbox_grey600_36dp \n         android:title= @string/inbox / \n     item \n         android:id= @+id/nav_starred \n         android:icon= @drawable/ic_star_grey600_36dp \n         android:title= @string/starred / \n     !-- more items -- \n\n     item \n         android:id= @+id/subheader \n         android:title= @string/subheader \n       menu \n         item \n             android:id= @+id/nav_all_email \n             android:icon= @drawable/ic_email_grey600_36dp \n             android:title= @string/all_email / \n         !-- more items -- \n       /menu \n     /item \n   /group  /menu   The menu structure is hierarchical, that let's you separate your items in categories.  IV. To add a header for your drawer, create a layout file in  layout/drawer_header.xml .  LinearLayout   xmlns:android= http://schemas.android.com/apk/res/android \n     xmlns:app= http://schemas.android.com/apk/res-auto \n     android:layout_width= match_parent \n     android:layout_height= @dimen/drawer_header_height \n     android:gravity= bottom \n     android:background= @drawable/navigation_background \n     android:orientation= vertical \n     android:padding= @dimen/activity_horizontal_margin \n     android:theme= @style/ThemeOverlay.AppCompat.Dark \n\n   ImageView \n       android:id= @+id/drawer_profile_image \n       android:layout_width= @dimen/drawer_header_profile \n       android:layout_height= @dimen/drawer_header_profile \n       android:layout_marginBottom= @dimen/standard_margin \n       android:scaleType= centerCrop \n       android:src= @drawable/alexandru_simonescu \n  / \n\n   TextView \n       android:id= @+id/name \n       android:layout_width= match_parent \n       android:layout_height= wrap_content \n       android:text= Alexandru Simonescu \n       android:textAppearance= @style/TextAppearance.AppCompat.Body1 \n       android:textStyle= bold \n       / \n\n   TextView \n       android:id= @+id/email \n       android:layout_width= match_parent \n       android:layout_height= wrap_content \n       android:text= hi@alexsimo.com \n       android:textAppearance= @style/TextAppearance.AppCompat.Body1 \n       style= @style/Widget.AppCompat.Spinner \n       /  /LinearLayout   V. In your activity find the  NavigationView  and  NavigationDrawer  and set their listeners.  Drawer setup.  private   void   setupDrawer ()   { \n     drawerLayout   =   ( DrawerLayout )   findViewById ( R . id . drawer_layout ); \n     drawerLayout . setDrawerListener ( new   DrawerLayout . DrawerListener ()   { \n       @Override   public   void   onDrawerSlide ( View   drawerView ,   float   slideOffset )   { \n\n       } \n\n       @Override   public   void   onDrawerOpened ( View   drawerView )   { \n\n       } \n\n       @Override   public   void   onDrawerClosed ( View   drawerView )   { \n\n       } \n\n       @Override   public   void   onDrawerStateChanged ( int   newState )   { \n\n       } \n     }); \n   }    Note  To achieve the round image effect you can use  Google's official way .   Example using Google's  RoundedBitmapDrawable :  Bitmap   bitmap   =   BitmapFactory . decodeResource ( getResources (),   R . drawable . avatar );  RoundedBitmapDrawable   rounded   =     RoundedBitmapDrawableFactory . create ( getResources (),   avatar );  rounded . setCornerRadius ( bitmap . getWidth ());  ImageView   drawerProfile   =   ( ImageView )   drawerLayout . findViewById ( R . id . drawer_profile_image );  drawerProfile . setImageDrawable ( rounded );   NavigationView setup.  public   void   setupDrawerContent ( NavigationView   navigationView )   { \n     navigationView . setNavigationItemSelectedListener ( \n         new   NavigationView . OnNavigationItemSelectedListener ()   { \n           @Override \n           public   boolean   onNavigationItemSelected ( MenuItem   item )   { \n             item . setChecked ( true ); \n             // manage menu item click \n             drawerLayout . closeDrawers (); \n             return   true ; \n           } \n         }); \n   }   VI. If needed you can give some basic styling using the properties:  android: background = @color/colorDrawer  app: itemBackground = @color/colorDrawerItem   The drawables colors should be selector defining for each pressed state - focused, checked, active, etc.  Menu item background.  ?xml version= 1.0  encoding= utf-8 ?  selector   xmlns:android= http://schemas.android.com/apk/res/android \n   item   android:drawable= @drawable/button_pressed \n       android:state_pressed= true / \n   item   android:drawable= @drawable/button_focused \n       android:state_focused= true / \n   item   android:drawable= @drawable/button_focused \n       android:state_hovered= true / \n   item   android:drawable= @drawable/button_normal /  /selector", 
            "title": "How to add?"
        }, 
        {
            "location": "/patterns/notifications/", 
            "text": "Notifications with text\n\n\n\n\n\n\n\u6458\u81ea Google material design \n\u6587\u6863\n\n\n\u5728\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u91cc\uff0c\u4f7f\u7528 Notifications \u544a\u77e5\u4f60\u7684 APP \u7528\u6237\u4e00\u4e9b\u76f8\u5173\u548c\u53ca\u65f6\u7684\u4fe1\u606f\u3002\u5f88\u591a\u573a\u666f\u4e0b\uff0c\u4f60\u90fd\u53ef\u4ee5\u521b\u5efa notifications \u6765\u5438\u5f15\u6ce8\u610f\uff0c\u5982\u670b\u53cb\u53d1\u6765\u4fe1\u606f\uff0c\u4ea4\u901a\u72b6\u51b5\u4e0d\u597d\u7684\u65f6\u5019\u63d0\u9192\u901a\u52e4\u72b6\u51b5\uff0c\u5b89\u88c5\u5e94\u7528\u5b8c\u6210\u7684\u65f6\u5019\u5c55\u793a\u4e00\u4e2a\u8fdb\u5ea6\u6761\u7b49\u3002\n\n\nNotifications should be synced to all of a user\u2019s devices.\n\n\n\n\n\u5982\u4f55\u6dfb\u52a0\uff1f\n\n\nI. \u5728\u4f60\u7684 \nbuild.gradle\n \u6587\u4ef6\u91cc\u6dfb\u52a0\u6700\u65b0\u7684 \nappcompat\n \u5e93\u3002\n\n\ndependencies\n \n{\n\n    \ncompile\n \ncom.android.support:appcompat-v7:X.X.X\n\n    \n// X.X.X specify the version\n\n\n}\n\n\n\n\n\n\nII. \u83b7\u53d6\u4e00\u4e2a \nNotificationCompat.Builder\n \u5b9e\u4f8b\u3002\n\n\nNotificationCompat\n.\nBuilder\n \nbuilder\n \n=\n \nnew\n \nNotificationCompat\n.\nBuilder\n(\ncontext\n);\n\n\n\n\n\n\nIII. \u4f7f\u7528 \nNotification.Builder\n \u521b\u5efa\u4e00\u4e2a \nNotification\n \u3002\n\n\nNotification\n \nnotification\n \n=\n \nbuilder\n\n    \n.\nsetContentTitle\n(\nTitle\n)\n\n    \n.\nsetContentText\n(\nThis is a notification!\n)\n\n\n.\nsetSmallIcon\n(\nR\n.\ndrawable\n.\nic_notifications_white_small\n)\n\n    \n.\nbuild\n();\n\n\n\n\n\n\nIV. \u4f7f\u7528 \nNotificationManagerCompat\n \u7684 \nnotify\n \u65b9\u6cd5\u5c55\u793a\u4f60\u8bbe\u7f6e\u4e86 id \u7684\u90a3\u4e2a \nNotification\n \u3002\n\n\nNotificationManagerCompat\n \nnotificationManager\n \n=\n\n    \nNotificationManagerCompat\n.\nfrom\n(\ncontext\n);\n\n\n\nnotificationManager\n.\nnotify\n(\n0x1234\n,\n \nnotification\n);\n\n\n\n\n\n\n\n\n\u5907\u6ce8\n\n\n\u4e3a\u4e86\u663e\u793a\u901a\u77e5\uff0c\u6807\u9898\u3001\u6587\u5b57\u3001\u5c0f\u56fe\u6807\u662f\u5f3a\u5236\u6027\u5fc5\u987b\u8981\u8bbe\u7f6e\u7684\u3002\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?\n\n\n\n\n\u5728\u4f60\u7684 notification \u91cc\u4f7f\u7528 \nNotificationCompat.Builder\n \u7684 \nsetColor(int color)\n \u65b9\u6cd5\u7ed9\u5706\u5f62\u80cc\u666f\u8bbe\u7f6e\u989c\u8272\u3002\n\n\nNotification\n \nnotification\n \n=\n\n    \nnew\n \nNotificationCompat\n.\nBuilder\n(\ncontext\n)\n\n        \n.\nsetContentTitle\n(\nTitle\n)\n\n        \n.\nsetContentText\n(\nThis is a notification!\n)\n\n        \n.\nsetSmallIcon\n(\nR\n.\ndrawable\n.\nic_bell\n)\n\n        \n.\nsetColor\n(\nColor\n.\nparseColor\n(\n#4B8A08\n))\n\n        \n.\nbuild\n();\n\n\n\n\n\n\n\u5305\u542b\u56fe\u7247\u7684\u901a\u77e5\n\n\n\n\n\u4f7f\u7528 \nNotificationCompat.Builder\n \u7684 \nsetLargeIcon(Bitmap)\n \u65b9\u6cd5\u7ed9\u901a\u77e5\u7684\u8bbe\u7f6e\u5c0f\u56fe\u6807\u65c1\u8fb9\u7684\u5927\u56fe\u6807\u3002\n\n\nNotification\n \nnotification\n \n=\n\n    \nnew\n \nNotificationCompat\n.\nBuilder\n(\ncontext\n)\n\n        \n.\nsetContentTitle\n(\nTitle\n)\n\n        \n.\nsetContentText\n(\nThis is a notification!\n)\n\n        \n.\nsetSmallIcon\n(\nR\n.\ndrawable\n.\nic_bell\n)\n\n        \n.\nsetLargeIcon\n(\nprofileImageBitmap\n)\n \n// Bitmap\n\n        \n.\nsetColor\n(\nColor\n.\nparseColor\n(\n#4B8A08\n))\n\n        \n.\nbuild\n();\n\n\n\n\n\n\n\u632f\u52a8\u901a\u77e5\n\n\n\u4f7f\u7528 \nNotificationCompat.Builder\n \u7684 \nsetVibrate\n \u65b9\u6cd5\u8bbe\u7f6e\u4e00\u4e2a\u5e26\u6709\u632f\u52a8\u6a21\u5f0f\u7684\u901a\u77e5\u3002\n\n\nlong\n[]\n \nvibratePattern\n \n=\n \nnew\n \nlong\n[]\n \n{\n\n   \nmillisToWait\n,\n \nmillisToVibrate\n,\n\n   \nmillisToWait\n,\n \nmillisToVibrate\n\n\n}\n\n\n\nNotification\n \nnotification\n \n=\n\n    \nnew\n \nNotificationCompat\n.\nBuilder\n(\ncontext\n)\n\n        \n.\nsetContentTitle\n(\nTitle\n)\n\n        \n.\nsetContentText\n(\nThis is a notification!\n)\n\n        \n.\nsetSmallIcon\n(\nR\n.\ndrawable\n.\nic_bell\n)\n\n        \n.\nsetVibrate\n(\nvibratePattern\n)\n\n        \n.\nbuild\n();\n\n\n\n\n\n\n\n\n\u5907\u6ce8\n\n\n\u4e3a\u4e86\u80fd\u591f\u4f7f\u7528\u632f\u52a8\uff0c\u4f60\u9700\u8981\u5728 \nAndroidManifest.xml\n \u91cc\u58f0\u660e \nandroid.permission.VIBRATE\n \u6743\u9650\u3002\n\n\n\n\n\u5e26\u547c\u5438\u706f\u7684\u901a\u77e5\n\n\n\u4f7f\u7528 \nNotificationCompat.Builder\n \u7684 \nsetLights(int argb, int msOn, int msOff)\n \u65b9\u6cd5\u5b9a\u5236\u8bbe\u5907\u8981\u663e\u793a\u7684\u547c\u5438\u706f\u7684\u989c\u8272\u548c LED \u6a21\u5f0f\u3002\n\n\nNotification\n \nnotification\n \n=\n\n   \nnew\n \nNotificationCompat\n.\nBuilder\n(\ncontext\n)\n\n      \n.\nsetContentTitle\n(\nTitle\n)\n\n      \n.\nsetContentText\n(\nThis is a notification!\n)\n\n      \n.\nsetSmallIcon\n(\nR\n.\ndrawable\n.\nic_bell\n)\n\n      \n.\nsetLights\n(\nColor\n.\nMAGENTA\n,\n \nonMillis\n,\n \noffMillis\n)\n\n      \n.\nbuild\n();\n\n\n\n\n\n\n\u6280\u5de7\u548c\u6700\u4f73\u5b9e\u8df5\n\n\nI. \u4e13\u95e8\u9488\u5bf9\u65f6\u95f4\u654f\u611f\u7684\u7528\u6237\u8fdb\u884c\u901a\u77e5\u3002\n\n\nII. \u5bf9\u4e8e\u53e6\u5916\u4e00\u4e2a\u4eba\u53d1\u7684\u901a\u77e5\uff0c\u8981\u5305\u542b\u4ed6\u7684\u56fe\u7247\u3002\n\n\nIII. \u5f53\u7528\u6237\u70b9\u51fb\u4e00\u4e2a\u901a\u77e5\u7684\u65f6\u5019\uff0c\u5141\u8bb8\u7528\u6237\u76f4\u63a5\u8fdb\u884c\u64cd\u4f5c\u3002\u8fd9\u53ef\u80fd\u4f1a\u6253\u4e00\u4e2a\u8be6\u60c5\u89c6\u56fe\uff0c\u5982\u4e00\u6761\u4fe1\u606f\uff0c\u6216\u8005\u591a\u4e2a\u901a\u77e5\u7684\u6458\u8981\u89c6\u56fe\u3002\n\n\nIV. \u5f53\u6ca1\u6709\u4f7f\u7528 \nsetLargeIcon\n \u65b9\u6cd5\uff0c\u800c\u4f7f\u7528\u4e86 \nsetSmallIcon\n \u65b9\u6cd5\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u5706\u5f62\u56fe\u7247\u3002\u5f53\u4f7f\u7528\u4e86 \nsetLargeIcon\n \u65b9\u6cd5\u65f6\uff0c\u8981\u7528\u5706\u5f62\u56fe\u7247\u65f6\u5219\u8981\u624b\u52a8\u8bbe\u7f6e\u3002\n\n\n\n\n\n\n\n\nWarning\n\n\n\u539f\u6587\u4f5c\u8005\uff1a\nSa\u00fal D\u00edaz Gonz\u00e1lez\n\n\u7ffb\u8bd1\uff1a\nAilurus\n\n\n\n\nExpanded Notifications Layouts\n\n\n\n\n\n\nQuote\n\n\nFrom the Google Material Design \ndocumentation\n_\n\n\nYou can choose how much detail your app's notifications should provide. They can show the first few lines of a message or show a larger image preview.\n\n\nThe additional information provides the user with more context, and\u2014in some cases\u2014may allow the user to read a message in its entirety.\n\n\n\n\nHow to use it?\n\n\nI. Add the latest version of appcompat library on your \nbuild.gradle\n.\n\n\ndependencies {\n    compile \ncom.android.support:appcompat-v7:X.X.X\n\n    // X.X.X especifica la versi\u00f3n\n}\n\n\n\n\n\nII. Retrieve an instance of \nNotificationCompat.Builder\n.\n\n\nNotificationCompat\n.\nBuilder\n \nbuilder\n \n=\n\n    \nnew\n \nNotificationCompat\n.\nBuilder\n(\ncontext\n);\n\n\n\n\n\n\nIII. Apply a style to the \nNotificationCompat.Builder\n\n\nNotificationCompat\n.\nBigTextStyle\n \nstyle\n \n=\n \nnew\n \nNotificationCompat\n.\nBigTextStyle\n(\nbuilder\n);\n\n\n\n\n\n\nIV. You have several styles available.\n\n\n// Big Text Style\n\n\nNotificationCompat\n.\nBigTextStyle\n \nstyle\n\n    \n=\n \nnew\n \nNotificationCompat\n.\nBigTextStyle\n(\nbuilder\n);\n\n\n\n\n\n\n// Big Picture Style\n\n\nNotificationCompat\n.\nBigPictureStyle\n \nstyle\n\n    \n=\n \nnew\n \nNotificationCompat\n.\nBigPictureStyle\n(\nbuilder\n);\n\n\n\n\n\n\n// Inbox Style\n\n\nNotificationCompat\n.\nInboxStyle\n \nstyle\n\n    \n=\n \nnew\n \nNotificationCompat\n.\nInboxStyle\n(\nbuilder\n);\n\n\n\n\n\n\nV. Build a \nNotification\n using the \nNotificationCompat.Builder\n\n\nNotification\n \nnotification\n \n=\n \nbuilder\n\n    \n.\nsetContentTitle\n(\nTitle\n)\n\n    \n.\nsetContentText\n(\nThis is a notification!\n)\n\n    \n.\nsetSmallIcon\n(\nR\n.\ndrawable\n.\nic_notifications_white_small\n)\n\n    \n.\nbuild\n();\n\n\n\n\n\n\nVI. Pass along the \nNotification\n object via \nnotify\n method from  \nNotificationManagerCompat\n and assign an ID of your choice.\n\n\nNotificationManagerCompat\n \nnotificationManager\n \n=\n\n    \nNotificationManagerCompat\n.\nfrom\n(\ncontext\n);\n\n\n\nnotificationManager\n.\nnotify\n(\n0x1234\n,\n \nnotification\n);\n\n\n\n\n\n\n\n\nNote\n\n\nTitle, text and small icon are mandatory so the notification can be displayed.\n\n\n\n\nBig Text Style\n\n\n\n\n\n\nBig Text Style is used to show large quantities of text. The notification body can hold around \n450\n characters. The rest of the text will be trimmed \nwithout\n the use of an ellipsis.\n\n\nI. Apply the style by passing the builder to a \nNotificationCompat.BigTextStyle\n\ninstance.\n\n\nNotificationCompat\n.\nBigTextStyle\n \nstyle\n \n=\n\n    \nnew\n \nNotificationCompat\n.\nBigTextStyle\n(\nbuilder\n);\n\n\n\n\n\n\nII. Set the long text you want to display on the expanded mode.\n\n\nstyle\n.\nbigText\n(\nThe path of...\n \n/* long text goes here */\n \n);\n\n\n\n\n\n\n\n\nNote\n\n\nFor the compressed layout, the text set via \nsetContentText\n of \nNotificationCompat.Builder\n will be shown.\n\n\n\n\nIII. Use the method \nsetBigContentTitle\n of \nNotificationCompat.BigTextStyle\n if you want a different title for the expanded layout form.\n\n\nstyle\n.\nbigText\n(\nThe path of...\n \n/* long text goes here */\n)\n\n     \n.\nsetBigContentTitle\n(\nExpanded title\n);\n\n\n\n\n\n\n\n\nNote\n\n\nIf you do not call this method the title will fallback to the value you set on \nsetContentTitle\n from \nNotificationCompat.Builder\n.\n\n\n\n\nIV. Add if you like an additional summary to the expanded layout form.\n\n\nstyle\n.\nbigText\n(\nThe path of...\n \n/* long text goes here */\n \n)\n\n     \n.\nsetBigContentTitle\n(\nExpanded title\n)\n\n     \n.\nsetSummaryText\n(\nSummary text\n);\n\n\n\n\n\n\nBig Picture Style\n\n\n\n\n\n\nNote\n\n\nBig Picture Style is used to show image-rich content. The image limits will be phone screen length by \n256dp\n height. On Tablets, the image is 2:1 ratio. The rest of the image will be cropped with a \nScaleType.CROP_CENTER\n.\n\n\n\n\nI. Create a new instance of \nNotificationCompat.BigPictureStyle\n which will accept a \nNotificationCompat.Builder\n instance.\n\n\nNotificationCompat\n.\nBigPictureStyle\n \nstyle\n\n    \n=\n \nnew\n \nNotificationCompat\n.\nBigPictureStyle\n(\nbuilder\n);\n\n\n\n\n\n\n\n\nNote\n\n\nCheck how \nNotificationCompat.Builder\n are managed on the \nbasic notifications\n article.\n\n\n\n\nII. Add the image you want to display by using \nBigPictureStyle.bigPicture\n method. The format of the image must be a \nBitmap\n.\n\n\nBitmap\n \npicture\n \n=\n \nBitmapFactory\n.\ndecodeResource\n(\ngetResources\n(),\n \nR\n.\ndrawable\n.\nconga\n);\n\n\nstyle\n.\nbigPicture\n(\npicture\n);\n\n\n\n\n\n\nIII. Add a new \nLargeIcon\n if you want to change it. In other case it will default to \nNotificationCompat.Builder.setLargeIcon(Bitmap)\n.\n\n\nBitmap\n \nlargeExpandedAvatar\n \n=\n \nBitmapFactory\n.\ndecodeResource\n(\n\n             \ngetResources\n(),\n \nR\n.\ndrawable\n.\nkoala_avatar\n)\n  \n\n\nstyle\n.\nbigPicture\n(\npicture\n)\n\n     \n.\nbigLargeIcon\n(\nlargeExpandedAvatar\n);\n\n\n\n\n\n\nIV. Add a new title for the expanded layout form.\n\n\nBitmap\n \npicture\n \n=\n \nBitmapFactory\n.\ndecodeResource\n(\ngetResources\n(),\n \nR\n.\ndrawable\n.\nconga\n);\n\n\nBitmap\n \nlargeExpandedAvatar\n \n=\n \nBitmapFactory\n.\ndecodeResource\n(\n\n             \ngetResources\n(),\n \nR\n.\ndrawable\n.\nkoala_avatar\n)\n  \n\n\nstyle\n.\nbigPicture\n(\npicture\n)\n\n     \n.\nbigLargeIcon\n(\nlargeExpandedAvatar\n);\n\n     \n.\nsetBigContentTitle\n(\nExpanded title\n)\n\n\n\n\n\n\nV. Add a summary which sums up the notification content.\n\n\nBitmap\n \npicture\n \n=\n \nBitmapFactory\n.\ndecodeResource\n(\ngetResources\n(),\n \nR\n.\ndrawable\n.\nconga\n);\n\n\nBitmap\n \nlargeExpandedAvatar\n \n=\n \nBitmapFactory\n.\ndecodeResource\n(\n\n             \ngetResources\n(),\n \nR\n.\ndrawable\n.\nkoala_avatar\n)\n  \n\n\nstyle\n.\nbigPicture\n(\npicture\n)\n\n     \n.\nbigLargeIcon\n(\nlargeExpandedAvatar\n);\n\n     \n.\nsetBigContentTitle\n(\nExpanded title\n)\n\n     \n.\nsetSummaryText\n(\nSummary text\n);\n\n\n\n\n\n\nInbox Style\n\n\n\n\n\n\nQuote\n\n\nInbox Style allows a notification made of several independent lines of short text, as in the normal notifications. This style accepts up to \n7\n lines. Any number above the notification will ellipsize further lines by adding a \"...\".\n\n\n\n\nI. Apply the style by creating a new \nNotificationCompat.BigPictureStyle\n instance.\n\n\nNotificationCompat\n.\nInboxStyle\n \nstyle\n \n=\n\n    \nnew\n \nNotificationCompat\n.\nInboxStyle\n(\nbuilder\n);\n\n\n\n\n\n\nII. Add as many lines as you wish.\n\n\nstyle\n.\naddLine\n(\nThis is line #\n \n+\n \ni\n);\n\n\n\n\n\n\nIII. Add a different title if you want by using \nsetBigContentTitle\n.\n\n\nstyle\n.\naddLine\n(\nThis is line #\n \n+\n \ni\n)\n\n    \n.\nsetBigContentTitle\n(\nExpanded title\n);\n\n\n\n\n\n\nIV. Optionally add a summary to the notification.\n\n\nstyle\n.\naddLine\n(\nThis is line #\n \n+\n \ni\n)\n\n    \n.\nsetBigContentTitle\n(\nExpanded title\n)\n\n    \n.\nsetSummaryText\n(\nSummary text\n);\n\n\n\n\n\n\nTricks and good practices\n\n\nI. Guidelines insist that every app should display a single notification at all times in order to keep the notification list clean. Use \nInboxStyle\n to join several notifications in one while providing a history of the last ones.\n\n\nII. Expanded layouts will be automatically displayed when the notification list have enough space, while compressing them otherwise. Play with different titles, \nLargeIcon\n and summaries to pick the interest of your user in both cases. If your notification is related to an image content, make it more attractive by using \nBigPictureStyle\n.\n\n\nIII. If your notification does not require images and there is only one, using by default \nBigTextStyle\n will not hurt. In this way, you will ensure that you can accomodate as much text as possible and giving the user the maximum context available.", 
            "title": "Notifications"
        }, 
        {
            "location": "/patterns/notifications/#notifications-with-text", 
            "text": "\u6458\u81ea Google material design  \u6587\u6863  \u5728\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u91cc\uff0c\u4f7f\u7528 Notifications \u544a\u77e5\u4f60\u7684 APP \u7528\u6237\u4e00\u4e9b\u76f8\u5173\u548c\u53ca\u65f6\u7684\u4fe1\u606f\u3002\u5f88\u591a\u573a\u666f\u4e0b\uff0c\u4f60\u90fd\u53ef\u4ee5\u521b\u5efa notifications \u6765\u5438\u5f15\u6ce8\u610f\uff0c\u5982\u670b\u53cb\u53d1\u6765\u4fe1\u606f\uff0c\u4ea4\u901a\u72b6\u51b5\u4e0d\u597d\u7684\u65f6\u5019\u63d0\u9192\u901a\u52e4\u72b6\u51b5\uff0c\u5b89\u88c5\u5e94\u7528\u5b8c\u6210\u7684\u65f6\u5019\u5c55\u793a\u4e00\u4e2a\u8fdb\u5ea6\u6761\u7b49\u3002  Notifications should be synced to all of a user\u2019s devices.", 
            "title": "Notifications with text"
        }, 
        {
            "location": "/patterns/notifications/#_1", 
            "text": "I. \u5728\u4f60\u7684  build.gradle  \u6587\u4ef6\u91cc\u6dfb\u52a0\u6700\u65b0\u7684  appcompat  \u5e93\u3002  dependencies   { \n     compile   com.android.support:appcompat-v7:X.X.X \n     // X.X.X specify the version  }   II. \u83b7\u53d6\u4e00\u4e2a  NotificationCompat.Builder  \u5b9e\u4f8b\u3002  NotificationCompat . Builder   builder   =   new   NotificationCompat . Builder ( context );   III. \u4f7f\u7528  Notification.Builder  \u521b\u5efa\u4e00\u4e2a  Notification  \u3002  Notification   notification   =   builder \n     . setContentTitle ( Title ) \n     . setContentText ( This is a notification! )  . setSmallIcon ( R . drawable . ic_notifications_white_small ) \n     . build ();   IV. \u4f7f\u7528  NotificationManagerCompat  \u7684  notify  \u65b9\u6cd5\u5c55\u793a\u4f60\u8bbe\u7f6e\u4e86 id \u7684\u90a3\u4e2a  Notification  \u3002  NotificationManagerCompat   notificationManager   = \n     NotificationManagerCompat . from ( context );  notificationManager . notify ( 0x1234 ,   notification );    \u5907\u6ce8  \u4e3a\u4e86\u663e\u793a\u901a\u77e5\uff0c\u6807\u9898\u3001\u6587\u5b57\u3001\u5c0f\u56fe\u6807\u662f\u5f3a\u5236\u6027\u5fc5\u987b\u8981\u8bbe\u7f6e\u7684\u3002", 
            "title": "\u5982\u4f55\u6dfb\u52a0\uff1f"
        }, 
        {
            "location": "/patterns/notifications/#_2", 
            "text": "\u5728\u4f60\u7684 notification \u91cc\u4f7f\u7528  NotificationCompat.Builder  \u7684  setColor(int color)  \u65b9\u6cd5\u7ed9\u5706\u5f62\u80cc\u666f\u8bbe\u7f6e\u989c\u8272\u3002  Notification   notification   = \n     new   NotificationCompat . Builder ( context ) \n         . setContentTitle ( Title ) \n         . setContentText ( This is a notification! ) \n         . setSmallIcon ( R . drawable . ic_bell ) \n         . setColor ( Color . parseColor ( #4B8A08 )) \n         . build ();", 
            "title": "\u5982\u4f55\u8bbe\u7f6e\u6837\u5f0f?"
        }, 
        {
            "location": "/patterns/notifications/#_3", 
            "text": "\u4f7f\u7528  NotificationCompat.Builder  \u7684  setLargeIcon(Bitmap)  \u65b9\u6cd5\u7ed9\u901a\u77e5\u7684\u8bbe\u7f6e\u5c0f\u56fe\u6807\u65c1\u8fb9\u7684\u5927\u56fe\u6807\u3002  Notification   notification   = \n     new   NotificationCompat . Builder ( context ) \n         . setContentTitle ( Title ) \n         . setContentText ( This is a notification! ) \n         . setSmallIcon ( R . drawable . ic_bell ) \n         . setLargeIcon ( profileImageBitmap )   // Bitmap \n         . setColor ( Color . parseColor ( #4B8A08 )) \n         . build ();", 
            "title": "\u5305\u542b\u56fe\u7247\u7684\u901a\u77e5"
        }, 
        {
            "location": "/patterns/notifications/#_4", 
            "text": "\u4f7f\u7528  NotificationCompat.Builder  \u7684  setVibrate  \u65b9\u6cd5\u8bbe\u7f6e\u4e00\u4e2a\u5e26\u6709\u632f\u52a8\u6a21\u5f0f\u7684\u901a\u77e5\u3002  long []   vibratePattern   =   new   long []   { \n    millisToWait ,   millisToVibrate , \n    millisToWait ,   millisToVibrate  }  Notification   notification   = \n     new   NotificationCompat . Builder ( context ) \n         . setContentTitle ( Title ) \n         . setContentText ( This is a notification! ) \n         . setSmallIcon ( R . drawable . ic_bell ) \n         . setVibrate ( vibratePattern ) \n         . build ();    \u5907\u6ce8  \u4e3a\u4e86\u80fd\u591f\u4f7f\u7528\u632f\u52a8\uff0c\u4f60\u9700\u8981\u5728  AndroidManifest.xml  \u91cc\u58f0\u660e  android.permission.VIBRATE  \u6743\u9650\u3002", 
            "title": "\u632f\u52a8\u901a\u77e5"
        }, 
        {
            "location": "/patterns/notifications/#_5", 
            "text": "\u4f7f\u7528  NotificationCompat.Builder  \u7684  setLights(int argb, int msOn, int msOff)  \u65b9\u6cd5\u5b9a\u5236\u8bbe\u5907\u8981\u663e\u793a\u7684\u547c\u5438\u706f\u7684\u989c\u8272\u548c LED \u6a21\u5f0f\u3002  Notification   notification   = \n    new   NotificationCompat . Builder ( context ) \n       . setContentTitle ( Title ) \n       . setContentText ( This is a notification! ) \n       . setSmallIcon ( R . drawable . ic_bell ) \n       . setLights ( Color . MAGENTA ,   onMillis ,   offMillis ) \n       . build ();", 
            "title": "\u5e26\u547c\u5438\u706f\u7684\u901a\u77e5"
        }, 
        {
            "location": "/patterns/notifications/#_6", 
            "text": "I. \u4e13\u95e8\u9488\u5bf9\u65f6\u95f4\u654f\u611f\u7684\u7528\u6237\u8fdb\u884c\u901a\u77e5\u3002  II. \u5bf9\u4e8e\u53e6\u5916\u4e00\u4e2a\u4eba\u53d1\u7684\u901a\u77e5\uff0c\u8981\u5305\u542b\u4ed6\u7684\u56fe\u7247\u3002  III. \u5f53\u7528\u6237\u70b9\u51fb\u4e00\u4e2a\u901a\u77e5\u7684\u65f6\u5019\uff0c\u5141\u8bb8\u7528\u6237\u76f4\u63a5\u8fdb\u884c\u64cd\u4f5c\u3002\u8fd9\u53ef\u80fd\u4f1a\u6253\u4e00\u4e2a\u8be6\u60c5\u89c6\u56fe\uff0c\u5982\u4e00\u6761\u4fe1\u606f\uff0c\u6216\u8005\u591a\u4e2a\u901a\u77e5\u7684\u6458\u8981\u89c6\u56fe\u3002  IV. \u5f53\u6ca1\u6709\u4f7f\u7528  setLargeIcon  \u65b9\u6cd5\uff0c\u800c\u4f7f\u7528\u4e86  setSmallIcon  \u65b9\u6cd5\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u5706\u5f62\u56fe\u7247\u3002\u5f53\u4f7f\u7528\u4e86  setLargeIcon  \u65b9\u6cd5\u65f6\uff0c\u8981\u7528\u5706\u5f62\u56fe\u7247\u65f6\u5219\u8981\u624b\u52a8\u8bbe\u7f6e\u3002     Warning  \u539f\u6587\u4f5c\u8005\uff1a Sa\u00fal D\u00edaz Gonz\u00e1lez \n\u7ffb\u8bd1\uff1a Ailurus", 
            "title": "\u6280\u5de7\u548c\u6700\u4f73\u5b9e\u8df5"
        }, 
        {
            "location": "/patterns/notifications/#expanded-notifications-layouts", 
            "text": "Quote  From the Google Material Design  documentation _  You can choose how much detail your app's notifications should provide. They can show the first few lines of a message or show a larger image preview.  The additional information provides the user with more context, and\u2014in some cases\u2014may allow the user to read a message in its entirety.", 
            "title": "Expanded Notifications Layouts"
        }, 
        {
            "location": "/patterns/notifications/#how-to-use-it", 
            "text": "I. Add the latest version of appcompat library on your  build.gradle .  dependencies {\n    compile  com.android.support:appcompat-v7:X.X.X \n    // X.X.X especifica la versi\u00f3n\n}  II. Retrieve an instance of  NotificationCompat.Builder .  NotificationCompat . Builder   builder   = \n     new   NotificationCompat . Builder ( context );   III. Apply a style to the  NotificationCompat.Builder  NotificationCompat . BigTextStyle   style   =   new   NotificationCompat . BigTextStyle ( builder );   IV. You have several styles available.  // Big Text Style  NotificationCompat . BigTextStyle   style \n     =   new   NotificationCompat . BigTextStyle ( builder );   // Big Picture Style  NotificationCompat . BigPictureStyle   style \n     =   new   NotificationCompat . BigPictureStyle ( builder );   // Inbox Style  NotificationCompat . InboxStyle   style \n     =   new   NotificationCompat . InboxStyle ( builder );   V. Build a  Notification  using the  NotificationCompat.Builder  Notification   notification   =   builder \n     . setContentTitle ( Title ) \n     . setContentText ( This is a notification! ) \n     . setSmallIcon ( R . drawable . ic_notifications_white_small ) \n     . build ();   VI. Pass along the  Notification  object via  notify  method from   NotificationManagerCompat  and assign an ID of your choice.  NotificationManagerCompat   notificationManager   = \n     NotificationManagerCompat . from ( context );  notificationManager . notify ( 0x1234 ,   notification );    Note  Title, text and small icon are mandatory so the notification can be displayed.", 
            "title": "How to use it?"
        }, 
        {
            "location": "/patterns/notifications/#big-text-style", 
            "text": "Big Text Style is used to show large quantities of text. The notification body can hold around  450  characters. The rest of the text will be trimmed  without  the use of an ellipsis.  I. Apply the style by passing the builder to a  NotificationCompat.BigTextStyle \ninstance.  NotificationCompat . BigTextStyle   style   = \n     new   NotificationCompat . BigTextStyle ( builder );   II. Set the long text you want to display on the expanded mode.  style . bigText ( The path of...   /* long text goes here */   );    Note  For the compressed layout, the text set via  setContentText  of  NotificationCompat.Builder  will be shown.   III. Use the method  setBigContentTitle  of  NotificationCompat.BigTextStyle  if you want a different title for the expanded layout form.  style . bigText ( The path of...   /* long text goes here */ ) \n      . setBigContentTitle ( Expanded title );    Note  If you do not call this method the title will fallback to the value you set on  setContentTitle  from  NotificationCompat.Builder .   IV. Add if you like an additional summary to the expanded layout form.  style . bigText ( The path of...   /* long text goes here */   ) \n      . setBigContentTitle ( Expanded title ) \n      . setSummaryText ( Summary text );", 
            "title": "Big Text Style"
        }, 
        {
            "location": "/patterns/notifications/#big-picture-style", 
            "text": "Note  Big Picture Style is used to show image-rich content. The image limits will be phone screen length by  256dp  height. On Tablets, the image is 2:1 ratio. The rest of the image will be cropped with a  ScaleType.CROP_CENTER .   I. Create a new instance of  NotificationCompat.BigPictureStyle  which will accept a  NotificationCompat.Builder  instance.  NotificationCompat . BigPictureStyle   style \n     =   new   NotificationCompat . BigPictureStyle ( builder );    Note  Check how  NotificationCompat.Builder  are managed on the  basic notifications  article.   II. Add the image you want to display by using  BigPictureStyle.bigPicture  method. The format of the image must be a  Bitmap .  Bitmap   picture   =   BitmapFactory . decodeResource ( getResources (),   R . drawable . conga );  style . bigPicture ( picture );   III. Add a new  LargeIcon  if you want to change it. In other case it will default to  NotificationCompat.Builder.setLargeIcon(Bitmap) .  Bitmap   largeExpandedAvatar   =   BitmapFactory . decodeResource ( \n              getResources (),   R . drawable . koala_avatar )    style . bigPicture ( picture ) \n      . bigLargeIcon ( largeExpandedAvatar );   IV. Add a new title for the expanded layout form.  Bitmap   picture   =   BitmapFactory . decodeResource ( getResources (),   R . drawable . conga );  Bitmap   largeExpandedAvatar   =   BitmapFactory . decodeResource ( \n              getResources (),   R . drawable . koala_avatar )    style . bigPicture ( picture ) \n      . bigLargeIcon ( largeExpandedAvatar ); \n      . setBigContentTitle ( Expanded title )   V. Add a summary which sums up the notification content.  Bitmap   picture   =   BitmapFactory . decodeResource ( getResources (),   R . drawable . conga );  Bitmap   largeExpandedAvatar   =   BitmapFactory . decodeResource ( \n              getResources (),   R . drawable . koala_avatar )    style . bigPicture ( picture ) \n      . bigLargeIcon ( largeExpandedAvatar ); \n      . setBigContentTitle ( Expanded title ) \n      . setSummaryText ( Summary text );", 
            "title": "Big Picture Style"
        }, 
        {
            "location": "/patterns/notifications/#inbox-style", 
            "text": "Quote  Inbox Style allows a notification made of several independent lines of short text, as in the normal notifications. This style accepts up to  7  lines. Any number above the notification will ellipsize further lines by adding a \"...\".   I. Apply the style by creating a new  NotificationCompat.BigPictureStyle  instance.  NotificationCompat . InboxStyle   style   = \n     new   NotificationCompat . InboxStyle ( builder );   II. Add as many lines as you wish.  style . addLine ( This is line #   +   i );   III. Add a different title if you want by using  setBigContentTitle .  style . addLine ( This is line #   +   i ) \n     . setBigContentTitle ( Expanded title );   IV. Optionally add a summary to the notification.  style . addLine ( This is line #   +   i ) \n     . setBigContentTitle ( Expanded title ) \n     . setSummaryText ( Summary text );", 
            "title": "Inbox Style"
        }, 
        {
            "location": "/patterns/notifications/#tricks-and-good-practices", 
            "text": "I. Guidelines insist that every app should display a single notification at all times in order to keep the notification list clean. Use  InboxStyle  to join several notifications in one while providing a history of the last ones.  II. Expanded layouts will be automatically displayed when the notification list have enough space, while compressing them otherwise. Play with different titles,  LargeIcon  and summaries to pick the interest of your user in both cases. If your notification is related to an image content, make it more attractive by using  BigPictureStyle .  III. If your notification does not require images and there is only one, using by default  BigTextStyle  will not hurt. In this way, you will ensure that you can accomodate as much text as possible and giving the user the maximum context available.", 
            "title": "Tricks and good practices"
        }, 
        {
            "location": "/patterns/swipe-to-refresh/", 
            "text": "Swipe to refresh\n\n\n\n\n\n\nFrom the Google Material Design \ndocumentation\n\n\nSwipe to refresh manually refreshes screen content with a user action or gesture.\n\n\n\n\nHow to add?\n\n\nI. Add the last version of the \nsupport-v4\n library to your  \nbuild.gradle\n file.\n\n\ndependencies {  \n    compile \ncom.android.support:support-v4:X.X.X\n\n    // where X.X.X is the last version available\n}\n\n\n\n\n\nII. Create your layout file and declare \nSwipeRefreshLayout\ninside. This view is usually along with lists, but you can use it with any view that fits your design.\n\n\nandroid.support.v4.widget.SwipeRefreshLayout\n\n    \nandroid:id=\n@+id/swipe_refresh_layout\n\n    \nandroid:layout_width=\nmatch_parent\n\n    \nandroid:layout_height=\nwrap_content\n\n\n    \nListView\n\n        \nandroid:id=\n@+id/listview\n\n        \nandroid:layout_width=\nmatch_parent\n\n        \nandroid:layout_height=\nmatch_parent\n/\n\n\n\n/android.support.v4.widget.SwipeRefreshLayout\n\n\n\n\n\n\nIII. Proceed with the refresh listening the events in the Activity using a \nSwipeRefreshLayout.OnRefreshListener\n instance.\n\n\nSwipeRefreshLayout\n \nswipeRefreshLayout\n \n=\n\n        \n(\nSwipeRefreshLayout\n)\n \nfindViewById\n(\nR\n.\nid\n.\nactivity_main_swipe_refresh_layout\n);\n\n\nswipeRefreshLayout\n.\nsetOnRefreshListener\n(\nnew\n \nSwipeRefreshLayout\n.\nOnRefreshListener\n()\n \n{\n\n        \n@Override\n\n        \npublic\n \nvoid\n \nonRefresh\n()\n \n{\n\n            \nrefreshData\n();\n\n        \n}\n\n\n});\n\n\n\n\n\n\nIV. To cancel the progress animation use \nsetRefreshing\n method.\n\n\nswipeRefreshLayout\n.\nsetRefreshing\n(\nfalse\n);\n\n\n\n\n\n\nHow to style?\n\n\n\n\nTo define your own color scheme for the loading icon.\n\n\nI. Define the colors you want to use it.\n\n\nresources\n\n    \ncolor\n \nname=\npink\n#FF4081\n/color\n\n    \ncolor\n \nname=\nindigo\n#3F51B5\n/color\n\n    \ncolor\n \nname=\nlime\n#CDDC39\n/color\n\n\n/resources\n\n\n\n\n\n\nII. Assign the colors to the view with the \nsetColorSchemeResources\n method.\n\n\nswipeRefreshLayout\n.\nsetColorSchemeResources\n(\nR\n.\ncolor\n.\npink\n,\n \nR\n.\ncolor\n.\nindigo\n,\n \nR\n.\ncolor\n.\nlime\n);", 
            "title": "Swipe to refresh"
        }, 
        {
            "location": "/patterns/swipe-to-refresh/#swipe-to-refresh", 
            "text": "From the Google Material Design  documentation  Swipe to refresh manually refreshes screen content with a user action or gesture.", 
            "title": "Swipe to refresh"
        }, 
        {
            "location": "/patterns/swipe-to-refresh/#how-to-add", 
            "text": "I. Add the last version of the  support-v4  library to your   build.gradle  file.  dependencies {  \n    compile  com.android.support:support-v4:X.X.X \n    // where X.X.X is the last version available\n}  II. Create your layout file and declare  SwipeRefreshLayout inside. This view is usually along with lists, but you can use it with any view that fits your design.  android.support.v4.widget.SwipeRefreshLayout \n     android:id= @+id/swipe_refresh_layout \n     android:layout_width= match_parent \n     android:layout_height= wrap_content \n\n     ListView \n         android:id= @+id/listview \n         android:layout_width= match_parent \n         android:layout_height= match_parent /  /android.support.v4.widget.SwipeRefreshLayout   III. Proceed with the refresh listening the events in the Activity using a  SwipeRefreshLayout.OnRefreshListener  instance.  SwipeRefreshLayout   swipeRefreshLayout   = \n         ( SwipeRefreshLayout )   findViewById ( R . id . activity_main_swipe_refresh_layout );  swipeRefreshLayout . setOnRefreshListener ( new   SwipeRefreshLayout . OnRefreshListener ()   { \n         @Override \n         public   void   onRefresh ()   { \n             refreshData (); \n         }  });   IV. To cancel the progress animation use  setRefreshing  method.  swipeRefreshLayout . setRefreshing ( false );", 
            "title": "How to add?"
        }, 
        {
            "location": "/patterns/swipe-to-refresh/#how-to-style", 
            "text": "To define your own color scheme for the loading icon.  I. Define the colors you want to use it.  resources \n     color   name= pink #FF4081 /color \n     color   name= indigo #3F51B5 /color \n     color   name= lime #CDDC39 /color  /resources   II. Assign the colors to the view with the  setColorSchemeResources  method.  swipeRefreshLayout . setColorSchemeResources ( R . color . pink ,   R . color . indigo ,   R . color . lime );", 
            "title": "How to style?"
        }, 
        {
            "location": "/article-template/", 
            "text": "Article name\n\n\n\n\n\n\nFrom the Google material design \ndocumentation\n\n\nAlways in the beginning of your article, you have to mention the section in the material design spec which talks about the component, pattern or animation that you talking about.\n\n\n\n\nHow to add/implement ?\n\n\nI. Try to write small steps, if possible, always accompanied by a copy-paste ready block of code.\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n    \n...\n\n\n}\n\n\n\n\n\n\nII. All sentences should be end with a dot [.]\n\n\nIII. Use the three ` symbol with the name of the language in order to highlight a block code.\n\n\n// block of code\n\n\n\n\n\n\n\n\nNote\n\n\nThis is a small note, informing that this step could be realized in a different way, or just an important note regarding the last step\n\n\n\n\nCompatibility issues\n\n\nSome components, animations, patterns have different behaviors in different API version. It would be nice to write a small paragraph about it. If show images about the differences better.\n\n\nHow to Style ?\n\n\n\n\nIf components can be customized describe how to do this.", 
            "title": "Article template"
        }, 
        {
            "location": "/article-template/#article-name", 
            "text": "From the Google material design  documentation  Always in the beginning of your article, you have to mention the section in the material design spec which talks about the component, pattern or animation that you talking about.", 
            "title": "Article name"
        }, 
        {
            "location": "/article-template/#how-to-addimplement", 
            "text": "I. Try to write small steps, if possible, always accompanied by a copy-paste ready block of code.  public   class   MainActivity   extends   AppCompatActivity   { \n     ...  }   II. All sentences should be end with a dot [.]  III. Use the three ` symbol with the name of the language in order to highlight a block code.  // block of code    Note  This is a small note, informing that this step could be realized in a different way, or just an important note regarding the last step", 
            "title": "How to add/implement ?"
        }, 
        {
            "location": "/article-template/#compatibility-issues", 
            "text": "Some components, animations, patterns have different behaviors in different API version. It would be nice to write a small paragraph about it. If show images about the differences better.", 
            "title": "Compatibility issues"
        }, 
        {
            "location": "/article-template/#how-to-style", 
            "text": "If components can be customized describe how to do this.", 
            "title": "How to Style ?"
        }
    ]
}